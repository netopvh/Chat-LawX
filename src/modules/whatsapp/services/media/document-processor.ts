import { Injectable, Logger } from '@nestjs/common';
import { HttpClientService } from '../clients/http.client';
import { UploadService } from '../../../upload/upload.service';

@Injectable()
export class DocumentProcessor {
  private readonly logger = new Logger(DocumentProcessor.name);

  constructor(
    private readonly uploadService: UploadService,
    private readonly http: HttpClientService,
  ) {}

  convertBase64ToBuffer(base64Data: string): Buffer {
    const base64 = base64Data.replace(/^data:[^;]+;base64,/, '');
    return Buffer.from(base64, 'base64');
  }

  detectDocumentMime(buffer: Buffer): string {
    const header = buffer.slice(0, 8);
    const headerHex = header.toString('hex').toLowerCase();
    if (headerHex.startsWith('25504446')) return 'application/pdf';
    if (headerHex.startsWith('504b0304') || headerHex.startsWith('504b0506')) return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    if (headerHex.startsWith('d0cf11e0')) return 'application/msword';
    return 'unknown';
  }

  isSupportedDocumentType(mimeType: string): boolean {
    return [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    ].includes(mimeType);
  }

  generateFileName(mimeType: string): string {
    const timestamp = Date.now();
    const extensions: { [key: string]: string } = {
      'application/pdf': 'pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
      'application/msword': 'doc'
    };
    const ext = extensions[mimeType] || 'bin';
    return `document-${timestamp}.${ext}`;
  }

  async upload(buffer: Buffer, fileName: string): Promise<string> {
    return this.uploadService.uploadDocumentFile(buffer, fileName);
  }

  async analyzeDocumentWithExternalAPI(fileUrl: string, jurisdiction?: string): Promise<any> {
    try {
      const promptText = this.generateLocalizedAnalysisPrompt(jurisdiction);
      const data = await this.http.post<any>(
        'https://us-central1-gleaming-nomad-443014-u2.cloudfunctions.net/vertex-LawX-personalizada',
        { prompt_text: promptText, file_url: fileUrl },
        { headers: { 'Content-Type': 'application/json' } }
      );
      return typeof data === 'string' ? JSON.parse(data) : data;
    } catch (error) {
      this.logger.error('Erro na an√°lise externa:', error);
      throw new Error('Falha na an√°lise do documento. Tente novamente.');
    }
  }

  formatDocumentAnalysisForUser(analysisData: any, jurisdiction?: string): string {
    try {
      const isSpanish = jurisdiction === 'ES';
      const isPortuguese = jurisdiction === 'PT';
      let formattedText: string;
      let labels: any;
      if (isSpanish) {
        formattedText = 'üìÑ **AN√ÅLISIS JUR√çDICO DEL DOCUMENTO**\n\n';
        labels = {
          documentType: 'üìã **Tipo de Documento:**',
          parties: 'üë• **Partes Involucradas:**',
          mainObjective: 'üéØ **Objetivo Principal:**',
          importantPoints: '‚≠ê **Puntos Importantes:**',
          relevantClauses: 'üìú **Cl√°usulas/Art√≠culos Relevantes:**',
          deadlinesAndValues: '‚è∞ **Plazos y Valores:**',
          identifiedRisks: '‚ö†Ô∏è **Riesgos Identificados:**',
          recommendations: 'üí° **Recomendaciones:**',
          executiveSummary: 'üìù **Resumen Ejecutivo:**',
          completed: '‚úÖ *¬°An√°lisis completado con √©xito!*'
        };
      } else if (isPortuguese) {
        formattedText = 'üìÑ **AN√ÅLISE JUR√çDICA DO DOCUMENTO**\n\n';
        labels = {
          documentType: 'üìã **Tipo de Documento:**',
          parties: 'üë• **Partes Envolvidas:**',
          mainObjective: 'üéØ **Objetivo Principal:**',
          importantPoints: '‚≠ê **Pontos Importantes:**',
          relevantClauses: 'üìú **Cl√°usulas/Artigos Relevantes:**',
          deadlinesAndValues: '‚è∞ **Prazos e Valores:**',
          identifiedRisks: '‚ö†Ô∏è **Riscos Identificados:**',
          recommendations: 'üí° **Recomenda√ß√µes:**',
          executiveSummary: 'üìù **Resumo Executivo:**',
          completed: '‚úÖ *An√°lise conclu√≠da com sucesso!*'
        };
      } else {
        formattedText = 'üìÑ **AN√ÅLISE JUR√çDICA DO DOCUMENTO**\n\n';
        labels = {
          documentType: 'üìã **Tipo de Documento:**',
          parties: 'üë• **Partes Envolvidas:**',
          mainObjective: 'üéØ **Objetivo Principal:**',
          importantPoints: '‚≠ê **Pontos Importantes:**',
          relevantClauses: 'üìú **Cl√°usulas/Artigos Relevantes:**',
          deadlinesAndValues: '‚è∞ **Prazos e Valores:**',
          identifiedRisks: '‚ö†Ô∏è **Riscos Identificados:**',
          recommendations: 'üí° **Recomenda√ß√µes:**',
          executiveSummary: 'üìù **Resumo Executivo:**',
          completed: '‚úÖ *An√°lise conclu√≠da com sucesso!*'
        };
      }

      if (analysisData.documentType) {
        formattedText += `${labels.documentType} ${analysisData.documentType}\n\n`;
      }
      if (analysisData.parties && Array.isArray(analysisData.parties) && analysisData.parties.length > 0) {
        formattedText += `${labels.parties}\n`;
        analysisData.parties.forEach((party: string) => {
          formattedText += `‚Ä¢ ${party}\n`;
        });
        formattedText += '\n';
      }
      if (analysisData.mainObjective) {
        formattedText += `${labels.mainObjective}\n${analysisData.mainObjective}\n\n`;
      }
      if (analysisData.importantPoints && Array.isArray(analysisData.importantPoints) && analysisData.importantPoints.length > 0) {
        formattedText += `${labels.importantPoints}\n`;
        analysisData.importantPoints.forEach((point: string) => {
          formattedText += `‚Ä¢ ${point}\n`;
        });
        formattedText += '\n';
      }
      if (analysisData.relevantClauses && Array.isArray(analysisData.relevantClauses) && analysisData.relevantClauses.length > 0) {
        formattedText += `${labels.relevantClauses}\n`;
        analysisData.relevantClauses.forEach((clause: string) => {
          formattedText += `‚Ä¢ ${clause}\n`;
        });
        formattedText += '\n';
      }
      if (analysisData.deadlinesAndValues) {
        formattedText += `${labels.deadlinesAndValues}\n${analysisData.deadlinesAndValues}\n\n`;
      }
      if (analysisData.identifiedRisks && Array.isArray(analysisData.identifiedRisks) && analysisData.identifiedRisks.length > 0) {
        formattedText += `${labels.identifiedRisks}\n`;
        analysisData.identifiedRisks.forEach((risk: string) => {
          formattedText += `‚Ä¢ ${risk}\n`;
        });
        formattedText += '\n';
      }
      if (analysisData.recommendations && Array.isArray(analysisData.recommendations) && analysisData.recommendations.length > 0) {
        formattedText += `${labels.recommendations}\n`;
        analysisData.recommendations.forEach((recommendation: string) => {
          formattedText += `‚Ä¢ ${recommendation}\n`;
        });
        formattedText += '\n';
      }
      if (analysisData.executiveSummary) {
        formattedText += `${labels.executiveSummary}\n${analysisData.executiveSummary}\n\n`;
      }
      formattedText += '---\n';
      formattedText += labels.completed;
      return formattedText;
    } catch (error) {
      this.logger.error('Erro ao formatar an√°lise:', error);
      return '‚ùå Erro ao processar a an√°lise do documento.';
    }
  }

  private generateLocalizedAnalysisPrompt(jurisdiction?: string): string {
    const isSpanish = jurisdiction === 'ES';
    const isPortuguese = jurisdiction === 'PT';
    if (isSpanish) {
      return `Analiza este documento jur√≠dico y proporciona un resumen completo y detallado.

IMPORTANTE: Devuelve la respuesta EXACTAMENTE en el formato JSON siguiente, sin texto adicional:

{\n  "documentType": "tipo de documento (contrato, petici√≥n, dictamen, sentencia, etc.)",\n  "parties": ["lista de las partes involucradas"],\n  "mainObjective": "objetivo principal del documento",\n  "importantPoints": ["lista de los puntos m√°s relevantes"],\n  "relevantClauses": ["cl√°usulas o art√≠culos m√°s importantes"],\n  "deadlinesAndValues": "plazos, valores y fechas importantes",\n  "identifiedRisks": ["riesgos o problemas identificados"],\n  "recommendations": ["sugerencias pr√°cticas"],\n  "executiveSummary": "resumen conciso de los puntos principales"\n}

S√© espec√≠fico, pr√°ctico y proporciona un an√°lisis jur√≠dico completo y √∫til.`;
    }
    if (isPortuguese) {
      return `Analisa este documento jur√≠dico e fornece um resumo completo e detalhado.

IMPORTANTE: Retorna a resposta EXATAMENTE no formato JSON abaixo, sem texto adicional:

{\n  "documentType": "tipo do documento (contrato, peti√ß√£o, parecer, senten√ßa, etc.)",\n  "parties": ["lista das partes envolvidas"],\n  "mainObjective": "objetivo principal do documento",\n  "importantPoints": ["lista dos pontos mais relevantes"],\n  "relevantClauses": ["cl√°usulas ou artigos mais importantes"],\n  "deadlinesAndValues": "prazos, valores e datas importantes",\n  "identifiedRisks": ["riscos ou problemas identificados"],\n  "recommendations": ["sugest√µes pr√°ticas"],\n  "executiveSummary": "resumo conciso dos pontos principais"\n}

Seja espec√≠fico, pr√°tico e forne√ßa uma an√°lise jur√≠dica completa e √∫til.`;
    }
    return `Analise este documento jur√≠dico e forne√ßa um resumo completo e detalhado. 

IMPORTANTE: Retorne a resposta EXATAMENTE no formato JSON abaixo, sem texto adicional:

{\n  "documentType": "tipo do documento (contrato, peti√ß√£o, parecer, senten√ßa, etc.)",\n  "parties": ["lista das partes envolvidas"],\n  "mainObjective": "objetivo principal do documento",\n  "importantPoints": ["lista dos pontos mais relevantes"],\n  "relevantClauses": ["cl√°usulas ou artigos mais importantes"],\n  "deadlinesAndValues": "prazos, valores e datas importantes",\n  "identifiedRisks": ["riscos ou problemas identificados"],\n  "recommendations": ["sugest√µes pr√°ticas"],\n  "executiveSummary": "resumo conciso dos pontos principais"\n}

Seja espec√≠fico, pr√°tico e forne√ßa uma an√°lise jur√≠dica completa e √∫til.`;
  }
}


