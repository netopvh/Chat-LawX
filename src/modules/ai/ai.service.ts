import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';
import OpenAI from 'openai';
import * as Tesseract from 'tesseract.js';
import * as fs from 'fs';
import * as path from 'path';
import * as sharp from 'sharp';

export interface ExtractedData {
  amount: number;
  original_amount?: number;
  discount_amount?: number;
  category: string;
  date: string;
  description: string;
  payment_method?: string;
  store_name?: string;
  store_cnpj?: string;
  store_address?: string;
  document_type?: string;
  document_number?: string;
  // Novos campos para classifica√ß√£o
  document_classification: 'revenue' | 'expense';
  revenue_type?: string; // 'salary', 'freelance', 'sale', 'investment', 'other'
  expense_type?: string; // 'purchase', 'bill', 'service', 'other'
  payer_name?: string; // para receitas
  payer_cnpj?: string; // para receitas
  payer_address?: string; // para receitas
  source?: string; // origem da receita
}

export interface ImageValidationResult {
  isValid: boolean;
  reason?: string;
  confidence?: number;
}

export interface DocumentClassification {
  type: 'revenue' | 'expense';
  confidence: number;
  reason: string;
  documentCategory: string; // 'salary', 'freelance', 'purchase', 'bill', etc.
}

@Injectable()
export class AiService {
  private readonly logger = new Logger(AiService.name);
  private gemini: GoogleGenerativeAI;
  private openai: OpenAI;

  constructor(private configService: ConfigService) {
    this.gemini = new GoogleGenerativeAI(this.configService.get('GEMINI_API_KEY'));
    this.openai = new OpenAI({
      apiKey: this.configService.get('OPENAI_API_KEY'),
    });
  }

  /**
   * Obt√©m a data atual no timezone de S√£o Paulo (America/Sao_Paulo)
   * @returns Data no formato YYYY-MM-DD
   */
  private getCurrentDateInSaoPaulo(): string {
    const now = new Date();
    // Ajustar para o timezone de S√£o Paulo (UTC-3)
    const saoPauloOffset = -3 * 60; // -3 horas em minutos
    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);
    const saoPauloTime = new Date(utc + (saoPauloOffset * 60000));
    return saoPauloTime.toISOString().split('T')[0];
  }

  async extractDataFromImage(imageBuffer: Buffer): Promise<ExtractedData> {
    try {
      // Validar buffer de entrada
      if (!imageBuffer || imageBuffer.length === 0) {
        throw new Error('Buffer de imagem vazio ou inv√°lido');
      }

      this.logger.log('üìä Tamanho do buffer de entrada:', imageBuffer.length, 'bytes');

      // Primeiro, validar se a imagem √© um comprovante v√°lido
      const validation = await this.validateReceiptImage(imageBuffer);
      if (!validation.isValid) {
        throw new Error(`Imagem inv√°lida: ${validation.reason}`);
      }

      // Classificar o tipo de documento (receita ou despesa)
      this.logger.log('üîç Classificando tipo de documento...');
      const classification = await this.classifyDocument(imageBuffer);
      this.logger.log('‚úÖ Classifica√ß√£o:', classification);

      // Verificar formato da imagem pelos primeiros bytes
      const firstBytes = imageBuffer.slice(0, 4);
      const isJPEG = firstBytes[0] === 0xFF && firstBytes[1] === 0xD8 && firstBytes[2] === 0xFF;
      const isPNG = firstBytes[0] === 0x89 && firstBytes[1] === 0x50 && firstBytes[2] === 0x4E && firstBytes[3] === 0x47;
      
      this.logger.log('üîç Primeiros bytes:', firstBytes.toString('hex'));
      this.logger.log('üîç Formato detectado - JPEG:', isJPEG, 'PNG:', isPNG);

      // Se a imagem n√£o √© um formato v√°lido, tentar converter
      if (!isJPEG && !isPNG) {
        this.logger.warn('‚ö†Ô∏è Formato de imagem n√£o reconhecido, tentando converter...');
        try {
          imageBuffer = await this.convertImageToJPEG(imageBuffer);
          this.logger.log('‚úÖ Imagem convertida para JPEG');
        } catch (convertError) {
          this.logger.warn('‚ö†Ô∏è Falha na convers√£o, tentando processar original:', convertError);
        }
      }

      // Extrair dados baseado na classifica√ß√£o
      let extractedData: ExtractedData;
      
      if (classification.type === 'revenue') {
        // Extrair dados espec√≠ficos para receitas
        extractedData = await this.extractRevenueData(imageBuffer, classification);
      } else {
        // Extrair dados espec√≠ficos para despesas
        extractedData = await this.extractExpenseData(imageBuffer, classification);
      }

      return extractedData;
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar imagem:', error);
      
      // Se for erro de valida√ß√£o, re-lan√ßar o erro
      if (error.message.includes('Imagem inv√°lida:')) {
        throw error;
      }
      
      // Para outros erros, retornar dados padr√£o
      return this.extractDataManually('Erro no processamento da imagem');
    }
  }

  async validateReceiptImage(imageBuffer: Buffer): Promise<ImageValidationResult> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const validationPrompt = `
        Analise esta imagem e determine se √© um comprovante de pagamento, boleto, nota fiscal, cupom fiscal, recibo ou documento financeiro v√°lido.
        
        Considere como V√ÅLIDO se a imagem cont√©m:
        - Comprovantes de pagamento (PIX, cart√£o, etc.)
        - Boletos banc√°rios
        - Notas fiscais (NFC-e, NFe)
        - Cupons fiscais
        - Recibos de pagamento
        - Extratos banc√°rios
        - Comprovantes de transfer√™ncia
        - Faturas de cart√£o
        - Comprovantes de compra online
        - Notas de restaurante/bar
        - Comprovantes de servi√ßos
        
        Considere como INV√ÅLIDO se a imagem cont√©m:
        - Selfies
        - Fotos de pessoas
        - Paisagens
        - Screenshots de redes sociais
        - Imagens de entretenimento
        - Documentos pessoais (RG, CPF, etc.)
        - Imagens sem rela√ß√£o financeira
        
        Responda APENAS em JSON no seguinte formato:
        {
          "isValid": true/false,
          "reason": "Explica√ß√£o detalhada do motivo",
          "confidence": 0.95
        }
        
        Seja rigoroso na valida√ß√£o. S√≥ considere v√°lido se for claramente um documento financeiro.
      `;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um validador especializado em documentos financeiros. Seja rigoroso e preciso.'
          },
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: validationPrompt
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`
                }
              }
            ]
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const validation = JSON.parse(jsonMatch[0]);
          this.logger.log('‚úÖ Valida√ß√£o conclu√≠da:', validation);
          return validation;
        }
      }
      
      // Se n√£o conseguir extrair JSON, tentar com Gemini
      return await this.validateReceiptImageWithGemini(imageBuffer);
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Falha na valida√ß√£o com OpenAI, tentando Gemini:', error);
      return await this.validateReceiptImageWithGemini(imageBuffer);
    }
  }

  private async validateReceiptImageWithGemini(imageBuffer: Buffer): Promise<ImageValidationResult> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const validationPrompt = `
        Analise esta imagem e determine se √© um comprovante de pagamento, boleto, nota fiscal, cupom fiscal, recibo ou documento financeiro v√°lido.
        
        Considere como V√ÅLIDO se a imagem cont√©m:
        - Comprovantes de pagamento (PIX, cart√£o, etc.)
        - Boletos banc√°rios
        - Notas fiscais (NFC-e, NFe)
        - Cupons fiscais
        - Recibos de pagamento
        - Extratos banc√°rios
        - Comprovantes de transfer√™ncia
        - Faturas de cart√£o
        - Comprovantes de compra online
        - Notas de restaurante/bar
        - Comprovantes de servi√ßos
        
        Considere como INV√ÅLIDO se a imagem cont√©m:
        - Selfies
        - Fotos de pessoas
        - Paisagens
        - Screenshots de redes sociais
        - Imagens de entretenimento
        - Documentos pessoais (RG, CPF, etc.)
        - Imagens sem rela√ß√£o financeira
        
        Responda APENAS em JSON no seguinte formato:
        {
          "isValid": true/false,
          "reason": "Explica√ß√£o detalhada do motivo",
          "confidence": 0.95
        }
        
        Seja rigoroso na valida√ß√£o. S√≥ considere v√°lido se for claramente um documento financeiro.
      `;

      const result = await this.gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const response = await result.generateContent([
        validationPrompt,
        {
          inlineData: {
            mimeType: 'image/jpeg',
            data: base64Image
          }
        }
      ]);
      
      const responseText = response.response.text();
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const validation = JSON.parse(jsonMatch[0]);
        this.logger.log('‚úÖ Valida√ß√£o conclu√≠da com Gemini:', validation);
        return validation;
      }
      
      // Se n√£o conseguir extrair JSON, retornar inv√°lido por seguran√ßa
      return {
        isValid: false,
        reason: 'N√£o foi poss√≠vel validar a imagem. Por favor, envie um comprovante de pagamento v√°lido.',
        confidence: 0.5
      };
    } catch (error) {
      this.logger.error('‚ùå Erro na valida√ß√£o com Gemini:', error);
      return {
        isValid: false,
        reason: 'Erro na valida√ß√£o da imagem. Por favor, envie um comprovante de pagamento v√°lido.',
        confidence: 0.0
      };
    }
  }

  async classifyDocument(imageBuffer: Buffer): Promise<DocumentClassification> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const classificationPrompt = `
        Analise esta imagem e determine se representa uma RECEITA ou DESPESA.

        RECEITA = Dinheiro ENTRANDO na conta (sal√°rio, pagamento recebido, venda, etc.)
        DESPESA = Dinheiro SAINDO da conta (compra, pagamento feito, boleto pago, etc.)

        Considere:
        - Palavras-chave: "recebido", "pago", "cr√©dito", "d√©bito", "entrada", "sa√≠da"
        - Contexto: quem est√° pagando para quem
        - Tipo de documento: holerite (receita) vs comprovante de compra (despesa)
        - Valores: positivos vs negativos
        - Fluxo: entrada vs sa√≠da de dinheiro

        Categorias de RECEITA:
        - salary: Sal√°rio, contracheque, holerite
        - freelance: Pagamento por servi√ßo, nota fiscal de servi√ßo
        - sale: Venda de produto, nota fiscal de venda
        - investment: Rendimentos, dividendos, juros
        - refund: Reembolso, estorno
        - transfer: Transfer√™ncia recebida, PIX recebido
        - rent: Aluguel recebido
        - commission: Comiss√£o, b√¥nus
        - other: Outras receitas

        Categorias de DESPESA:
        - purchase: Compra de produto, nota fiscal de compra
        - bill: Conta, boleto, fatura
        - service: Servi√ßo contratado
        - transfer: Transfer√™ncia enviada, PIX enviado
        - other: Outras despesas

        Responda APENAS em JSON no seguinte formato:
        {
          "type": "revenue" | "expense",
          "confidence": 0.95,
          "reason": "Explica√ß√£o detalhada do motivo",
          "documentCategory": "salary|freelance|sale|investment|refund|transfer|rent|commission|other|purchase|bill|service|transfer|other"
        }

        Seja rigoroso na classifica√ß√£o. Analise cuidadosamente o contexto e fluxo do dinheiro.
      `;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um classificador especializado em documentos financeiros. Seja preciso e rigoroso.'
          },
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: classificationPrompt
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`
                }
              }
            ]
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const classification = JSON.parse(jsonMatch[0]);
          this.logger.log('‚úÖ Classifica√ß√£o conclu√≠da:', classification);
          return classification;
        }
      }
      
      // Se n√£o conseguir extrair JSON, tentar com Gemini
      return await this.classifyDocumentWithGemini(imageBuffer);
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Falha na classifica√ß√£o com OpenAI, tentando Gemini:', error);
      return await this.classifyDocumentWithGemini(imageBuffer);
    }
  }

  private async classifyDocumentWithGemini(imageBuffer: Buffer): Promise<DocumentClassification> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const classificationPrompt = `
        Analise esta imagem e determine se representa uma RECEITA ou DESPESA.

        RECEITA = Dinheiro ENTRANDO na conta (sal√°rio, pagamento recebido, venda, etc.)
        DESPESA = Dinheiro SAINDO da conta (compra, pagamento feito, boleto pago, etc.)

        Considere:
        - Palavras-chave: "recebido", "pago", "cr√©dito", "d√©bito", "entrada", "sa√≠da"
        - Contexto: quem est√° pagando para quem
        - Tipo de documento: holerite (receita) vs comprovante de compra (despesa)
        - Valores: positivos vs negativos
        - Fluxo: entrada vs sa√≠da de dinheiro

        Categorias de RECEITA:
        - salary: Sal√°rio, contracheque, holerite
        - freelance: Pagamento por servi√ßo, nota fiscal de servi√ßo
        - sale: Venda de produto, nota fiscal de venda
        - investment: Rendimentos, dividendos, juros
        - refund: Reembolso, estorno
        - transfer: Transfer√™ncia recebida, PIX recebido
        - rent: Aluguel recebido
        - commission: Comiss√£o, b√¥nus
        - other: Outras receitas

        Categorias de DESPESA:
        - purchase: Compra de produto, nota fiscal de compra
        - bill: Conta, boleto, fatura
        - service: Servi√ßo contratado
        - transfer: Transfer√™ncia enviada, PIX enviado
        - other: Outras despesas

        Responda APENAS em JSON no seguinte formato:
        {
          "type": "revenue" | "expense",
          "confidence": 0.95,
          "reason": "Explica√ß√£o detalhada do motivo",
          "documentCategory": "salary|freelance|sale|investment|refund|transfer|rent|commission|other|purchase|bill|service|transfer|other"
        }

        Seja rigoroso na classifica√ß√£o. Analise cuidadosamente o contexto e fluxo do dinheiro.
      `;

      const result = await this.gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const response = await result.generateContent([
        classificationPrompt,
        {
          inlineData: {
            mimeType: 'image/jpeg',
            data: base64Image
          }
        }
      ]);
      
      const responseText = response.response.text();
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const classification = JSON.parse(jsonMatch[0]);
        this.logger.log('‚úÖ Classifica√ß√£o conclu√≠da com Gemini:', classification);
        return classification;
      }
      
      // Se n√£o conseguir extrair JSON, retornar classifica√ß√£o padr√£o
      return {
        type: 'expense',
        confidence: 0.5,
        reason: 'N√£o foi poss√≠vel classificar o documento. Assumindo como despesa por padr√£o.',
        documentCategory: 'other'
      };
    } catch (error) {
      this.logger.error('‚ùå Erro na classifica√ß√£o com Gemini:', error);
      return {
        type: 'expense',
        confidence: 0.0,
        reason: 'Erro na classifica√ß√£o do documento. Assumindo como despesa por padr√£o.',
        documentCategory: 'other'
      };
    }
  }

  private async extractDataWithOpenAIVision(imageBuffer: Buffer): Promise<ExtractedData> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente que extrai dados financeiros de imagens de comprovantes. Responda apenas em JSON v√°lido.'
          },
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `Extraia do comprovante os seguintes dados:
- Valor final pago (amount)
- Valor original antes de descontos (original_amount, se houver desconto)
- Valor do desconto (discount_amount, se houver)
- Categoria do gasto (ex: Alimenta√ß√£o, Transporte, Lazer, Sa√∫de, Educa√ß√£o, Moradia, Outros)
- Data da compra (formato YYYY-MM-DD)
- Descri√ß√£o do que foi comprado
- Forma de pagamento (PIX, cart√£o, dinheiro, etc.)
- Nome da loja/estabelecimento
- CNPJ da loja (se vis√≠vel)
- Endere√ßo da loja (se vis√≠vel)
- Tipo de documento (NFC-e, cupom, etc.)
- N√∫mero do documento fiscal

Considere descontos, promo√ß√µes e formas de pagamento. Se houver desconto, calcule o valor original e o desconto aplicado.

Responda APENAS em JSON no seguinte formato:
{
  "amount": 0.00,
  "original_amount": 0.00,
  "discount_amount": 0.00,
  "category": "Categoria",
  "date": "YYYY-MM-DD",
  "description": "Descri√ß√£o do gasto",
  "payment_method": "Forma de pagamento",
  "store_name": "Nome da loja",
  "store_cnpj": "CNPJ da loja",
  "store_address": "Endere√ßo da loja",
  "document_type": "Tipo de documento",
  "document_number": "N√∫mero do documento"
}`
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`
                }
              }
            ]
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const data = JSON.parse(jsonMatch[0]);
          this.logger.log('‚úÖ Dados extra√≠dos com OpenAI Vision');
          
          // Adicionar campos obrigat√≥rios com valores padr√£o
          return {
            ...data,
            document_classification: 'expense', // Ser√° sobrescrito pelos m√©todos espec√≠ficos
            expense_type: 'purchase',
          };
        }
      }
      
      throw new Error('Resposta inv√°lida da OpenAI Vision API');
    } catch (error) {
      this.logger.error('‚ùå Erro na OpenAI Vision API:', error);
      throw error;
    }
  }

  private async extractDataWithTesseract(imageBuffer: Buffer): Promise<ExtractedData> {
    // Criar diret√≥rio tempor√°rio se n√£o existir
    const tempDir = path.join(process.cwd(), 'temp');
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir);
    }

    // Salvar imagem temporariamente
    const tempFile = path.join(tempDir, `receipt_${Date.now()}.jpg`);
    fs.writeFileSync(tempFile, imageBuffer);
    
    this.logger.log('üíæ Imagem salva temporariamente:', tempFile);
    this.logger.log('üìä Tamanho da imagem:', imageBuffer.length, 'bytes');

    // Verificar se o arquivo foi criado corretamente
    if (!fs.existsSync(tempFile)) {
      throw new Error('Arquivo tempor√°rio n√£o foi criado');
    }

    const fileStats = fs.statSync(tempFile);
    this.logger.log('üìÅ Arquivo criado, tamanho:', fileStats.size, 'bytes');

    // Verificar se o arquivo tem conte√∫do
    if (fileStats.size === 0) {
      throw new Error('Arquivo tempor√°rio est√° vazio');
    }

    // Extrair texto da imagem usando Tesseract
    this.logger.log('üîç Iniciando OCR com Tesseract...');
    
    try {
      const { data: { text } } = await Tesseract.recognize(tempFile, 'por', {
        logger: m => this.logger.log('üîç Tesseract:', m.status, m.progress)
      });
      
      // Deletar arquivo tempor√°rio
      fs.unlinkSync(tempFile);
      
      this.logger.log('üìù Texto extra√≠do da imagem:', text);

      if (!text || text.trim().length === 0) {
        this.logger.warn('‚ö†Ô∏è Nenhum texto foi extra√≠do da imagem');
        return this.extractDataManually('Imagem sem texto leg√≠vel');
      }

      // Processar texto com IA para extrair dados estruturados
      const extractedData = await this.processTextWithAI(text);
      
      return extractedData;
    } catch (tesseractError) {
      this.logger.error('‚ùå Erro no Tesseract:', tesseractError);
      
      // Tentar com configura√ß√µes diferentes
      this.logger.log('üîÑ Tentando OCR com configura√ß√µes alternativas...');
      
      try {
        const { data: { text } } = await Tesseract.recognize(tempFile, 'eng', {
          logger: m => this.logger.log('üîç Tesseract (eng):', m.status, m.progress)
        });
        
        // Deletar arquivo tempor√°rio
        fs.unlinkSync(tempFile);
        
        this.logger.log('üìù Texto extra√≠do (ingl√™s):', text);

        if (!text || text.trim().length === 0) {
          this.logger.warn('‚ö†Ô∏è Nenhum texto foi extra√≠do mesmo com ingl√™s');
          return this.extractDataManually('Imagem sem texto leg√≠vel');
        }

        const extractedData = await this.processTextWithAI(text);
        return extractedData;
      } catch (secondError) {
        this.logger.error('‚ùå Erro no Tesseract (segunda tentativa):', secondError);
        
        // Deletar arquivo tempor√°rio se ainda existir
        try {
          if (fs.existsSync(tempFile)) {
            fs.unlinkSync(tempFile);
          }
        } catch (cleanupError) {
          this.logger.error('‚ùå Erro ao limpar arquivo tempor√°rio:', cleanupError);
        }
        
        // Retornar dados padr√£o em vez de lan√ßar erro
        return this.extractDataManually('Falha no OCR');
      }
    }
  }

  private async processTextWithAI(text: string): Promise<ExtractedData> {
    const prompt = `
      Extraia do texto abaixo os seguintes dados:
      - Valor final pago (amount)
      - Valor original antes de descontos (original_amount, se houver desconto)
      - Valor do desconto (discount_amount, se houver)
      - Categoria do gasto (ex: Alimenta√ß√£o, Transporte, Lazer, Sa√∫de, Educa√ß√£o, Moradia, Outros)
      - Data (formato YYYY-MM-DD, se n√£o encontrar use a data atual)
      - Descri√ß√£o (resumo do que foi comprado)
      - Forma de pagamento (PIX, cart√£o, dinheiro, etc.)
      - Nome da loja/estabelecimento
      - CNPJ da loja (se vis√≠vel)
      - Endere√ßo da loja (se vis√≠vel)
      - Tipo de documento (NFC-e, cupom, etc.)
      - N√∫mero do documento fiscal

      Considere descontos, promo√ß√µes e formas de pagamento. Se houver desconto, calcule o valor original e o desconto aplicado.

      Texto: "${text}"

      Responda APENAS em JSON no seguinte formato:
      {
        "amount": 0.00,
        "original_amount": 0.00,
        "discount_amount": 0.00,
        "category": "Categoria",
        "date": "YYYY-MM-DD",
        "description": "Descri√ß√£o do gasto",
        "payment_method": "Forma de pagamento",
        "store_name": "Nome da loja",
        "store_cnpj": "CNPJ da loja",
        "store_address": "Endere√ßo da loja",
        "document_type": "Tipo de documento",
        "document_number": "N√∫mero do documento"
      }
    `;

    try {
      // Tentar primeiro com GPT-4
      this.logger.log('ü§ñ Processando com GPT-4...');
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente que extrai dados financeiros de textos. Responda apenas em JSON v√°lido.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const data = JSON.parse(jsonMatch[0]);
          this.logger.log('‚úÖ Dados extra√≠dos com GPT-4');
          
          // Adicionar campos obrigat√≥rios com valores padr√£o
          return {
            ...data,
            document_classification: 'expense', // Ser√° sobrescrito pelos m√©todos espec√≠ficos
            expense_type: 'purchase',
          };
        }
      }
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Falha com GPT-4, tentando Gemini:', error);
    }

    try {
      // Fallback para Gemini
      this.logger.log('ü§ñ Processando com Gemini...');
      const result = await this.gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const response = await result.generateContent(prompt);
      const responseText = response.response.text();
      
      // Extrair JSON da resposta
      const jsonMatch = responseText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const data = JSON.parse(jsonMatch[0]);
        this.logger.log('‚úÖ Dados extra√≠dos com Gemini');
        
        // Adicionar campos obrigat√≥rios com valores padr√£o
        return {
          ...data,
          document_classification: 'expense', // Ser√° sobrescrito pelos m√©todos espec√≠ficos
          expense_type: 'purchase',
        };
      }
    } catch (error) {
      this.logger.error('‚ùå Falha com Gemini:', error);
    }

    // Fallback manual se ambas as IAs falharem
    this.logger.warn('‚ö†Ô∏è Usando extra√ß√£o manual');
    return this.extractDataManually(text);
  }

  private extractDataManually(text: string): ExtractedData {
    // Extra√ß√£o manual b√°sica
    const amountMatch = text.match(/R?\$?\s*(\d+[.,]\d{2}|\d+)/);
    const amount = amountMatch ? parseFloat(amountMatch[1].replace(',', '.')) : 0;

    // Tentar extrair valor original e desconto
    let originalAmount = amount;
    let discountAmount = 0;
    
    const originalMatch = text.match(/R?\$?\s*(\d+[.,]\d{2}|\d+)\s*por\s*R?\$?\s*(\d+[.,]\d{2}|\d+)/);
    if (originalMatch) {
      originalAmount = parseFloat(originalMatch[1].replace(',', '.'));
      const finalAmount = parseFloat(originalMatch[2].replace(',', '.'));
      discountAmount = originalAmount - finalAmount;
    }

    const currentDate = this.getCurrentDateInSaoPaulo();

    // Tentar extrair categoria baseada no texto
    let category = 'Outros';
    const lowerText = text.toLowerCase();
    
    if (lowerText.includes('supermercado') || lowerText.includes('mercado') || lowerText.includes('alimento')) {
      category = 'Alimenta√ß√£o';
    } else if (lowerText.includes('uber') || lowerText.includes('taxi') || lowerText.includes('transporte')) {
      category = 'Transporte';
    } else if (lowerText.includes('farmacia') || lowerText.includes('medicamento') || lowerText.includes('saude') || lowerText.includes('drogaria')) {
      category = 'Sa√∫de';
    } else if (lowerText.includes('cinema') || lowerText.includes('restaurante') || lowerText.includes('lazer')) {
      category = 'Lazer';
    } else if (lowerText.includes('escola') || lowerText.includes('curso') || lowerText.includes('educacao')) {
      category = 'Educa√ß√£o';
    } else if (lowerText.includes('aluguel') || lowerText.includes('condominio') || lowerText.includes('moradia')) {
      category = 'Moradia';
    }

    // Tentar extrair forma de pagamento
    let paymentMethod = '';
    if (lowerText.includes('pix')) {
      paymentMethod = 'PIX';
    } else if (lowerText.includes('cartao') || lowerText.includes('card')) {
      paymentMethod = 'Cart√£o';
    } else if (lowerText.includes('dinheiro') || lowerText.includes('cash')) {
      paymentMethod = 'Dinheiro';
    }

    // Tentar extrair nome da loja
    let storeName = '';
    const storeMatch = text.match(/([A-Z][A-Z\s]+(?:LTDA|ME|EPP|SA|S\.A\.))/);
    if (storeMatch) {
      storeName = storeMatch[1].trim();
    }

    return {
      amount,
      original_amount: originalAmount,
      discount_amount: discountAmount,
      category,
      date: currentDate,
      description: text.substring(0, 100) || 'Despesa n√£o identificada',
      payment_method: paymentMethod,
      store_name: storeName,
      document_classification: 'expense', // Default para despesa
      expense_type: 'purchase',
    };
  }

  async generateResponse(message: string, userData?: any): Promise<string> {
    const prompt = `
      Voc√™ √© o MePoupeBot, um assistente financeiro pessoal amig√°vel via WhatsApp! ü§ñüí∞
      
      Responda de forma natural, sem formalidade excessiva, como se fosse um amigo conversando.
      Use emojis ocasionalmente para tornar a conversa mais amig√°vel e envolvente.
      
      FUNCIONALIDADES DISPON√çVEIS:
      
      üì∏ REGISTRAR DESPESAS/RECEITAS:
      - Envie fotos de comprovantes, recibos, notas fiscais
      - Envie √°udios descrevendo suas despesas ou receitas
      - Digite mensagens como "Compra no mercado R$ 150" ou "Sal√°rio R$ 3000"
      
      üìä RELAT√ìRIOS E CONSULTAS:
      - "hoje" ou "gastos de hoje" - Ver despesas de hoje
      - "ontem" ou "gastos de ontem" - Ver despesas de ontem
      - "semana" ou "gastos da semana" - Relat√≥rio semanal
      - "m√™s" ou "gastos do m√™s" - Relat√≥rio mensal
      - "22/07/2025" - Data espec√≠fica
      - "receitas" - Ver suas receitas
      - "balan√ßo" - Resumo geral
      
      üí° DICAS E AJUDA:
      - "dicas" - Dicas de economia
      - "como economizar" - Sugest√µes pr√°ticas
      - "or√ßamento" - Ajuda com planejamento
      
      üöÄ UPGRADE E PLANOS:
      - "upgrade" ou "planos" - Conhecer planos premium
      - "limites" - Ver seus limites atuais
      
      O contexto da conversa deve ser sempre sobre controle de gastos pessoal, economizar e planejar melhor suas finan√ßas.
      Se o usu√°rio sair do contexto, redirecione gentilmente para as funcionalidades financeiras.
      
      IMPORTANTE: Sempre seja √∫til e amig√°vel, sempre em portugu√™s brasileiro.
      
      Mensagem do usu√°rio: "${message}"
      
      Responda de forma natural e amig√°vel, e SEMPRE termine sua resposta com:
      
      "üí° Dica: Digite 'menu' para ver todas as funcionalidades dispon√≠veis!"
    `;

    try {
      // Tentar primeiro com GPT-4
      this.logger.log('ü§ñ Gerando resposta com GPT-4...');
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© o MePoupeBot, um assistente financeiro pessoal amig√°vel via WhatsApp. Seja natural, use emojis ocasionalmente e sempre termine suas respostas sugerindo o usu√°rio digitar "menu" para ver todas as funcionalidades.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
      });

      const response = completion.choices[0]?.message?.content;
      if (response) {
        this.logger.log('‚úÖ Resposta gerada com GPT-4');
        return response;
      }
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Falha com GPT-4, tentando Gemini:', error);
    }

    try {
      // Fallback para Gemini
      this.logger.log('ü§ñ Gerando resposta com Gemini...');
      const result = await this.gemini.getGenerativeModel({ model: 'gemini-1.5-flash' });
      const response = await result.generateContent(prompt);
      const responseText = response.response.text();
      
      this.logger.log('‚úÖ Resposta gerada com Gemini');
      return responseText;
    } catch (error) {
      this.logger.error('‚ùå Falha com Gemini:', error);
    }

    // Resposta padr√£o se ambas as IAs falharem
    return 'Desculpe, n√£o consegui processar sua mensagem. Pode tentar novamente? üòä';
  }

  async generateExpenseReportResponse(reportData: any, userMessage: string): Promise<string> {
    const prompt = `
      Voc√™ √© um assistente financeiro amig√°vel. Gere um relat√≥rio de despesas baseado nos dados fornecidos.
      
      Dados do relat√≥rio:
      - Per√≠odo: ${reportData.period}
      - Total gasto: R$ ${reportData.total.toFixed(2)}
      - Total de descontos: R$ ${reportData.totalDiscounts.toFixed(2)}
      - Quantidade de despesas: ${reportData.count}
      
      Categorias:
      ${Object.entries(reportData.byCategory).map(([category, data]: [string, any]) => 
        `- ${category}: R$ ${data.total.toFixed(2)} (${data.count} despesas)`
      ).join('\n')}
      
      Formas de pagamento:
      ${Object.entries(reportData.byPaymentMethod).map(([method, amount]: [string, number]) => 
        `- ${method}: R$ ${amount.toFixed(2)}`
      ).join('\n')}
      
      Top 5 despesas mais caras:
      ${reportData.topExpenses.map((expense: any, index: number) => 
        `${index + 1}. ${expense.description}: R$ ${expense.amount.toFixed(2)}`
      ).join('\n')}
      
      Mensagem original do usu√°rio: "${userMessage}"
      
      Gere um relat√≥rio amig√°vel e natural, sem formalidade excessiva. Use emojis ocasionalmente.
      Seja espec√≠fico sobre os dados mais relevantes e d√™ insights √∫teis.
      Se n√£o houver despesas, seja encorajador.
    `;

    try {
      this.logger.log('üìä Gerando relat√≥rio com GPT-4...');
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente financeiro amig√°vel. Gere relat√≥rios naturais e √∫teis.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
      });

      const response = completion.choices[0]?.message?.content;
      if (response) {
        this.logger.log('‚úÖ Relat√≥rio gerado com GPT-4');
        return response;
      }
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Falha com GPT-4, usando relat√≥rio padr√£o:', error);
    }

    // Relat√≥rio padr√£o se a IA falhar
    return this.generateDefaultReport(reportData);
  }

  private generateDefaultReport(reportData: any): string {
    if (reportData.count === 0) {
      return `üìä Relat√≥rio de ${reportData.period}:\n\nNenhuma despesa registrada! üéâ\n\nContinue assim, voc√™ est√° economizando! üí™`;
    }

    let report = `üìä Relat√≥rio de ${reportData.period}:\n\n`;
    report += `üí∞ Total gasto: R$ ${reportData.total.toFixed(2)}\n`;
    report += `üìù ${reportData.count} despesas registradas\n`;
    
    if (reportData.totalDiscounts > 0) {
      report += `üéØ Total de descontos: R$ ${reportData.totalDiscounts.toFixed(2)}\n`;
    }
    
    report += `\nüìÇ Por categoria:\n`;
    Object.entries(reportData.byCategory).forEach(([category, data]: [string, any]) => {
      report += `‚Ä¢ ${category}: R$ ${data.total.toFixed(2)} (${data.count} despesas)\n`;
    });
    
    if (reportData.topExpenses.length > 0) {
      report += `\nüî• Maior despesa: ${reportData.topExpenses[0].description} - R$ ${reportData.topExpenses[0].amount.toFixed(2)}\n`;
    }
    
    return report;
  }

  async generateFinancialReportResponse(reportData: any, userMessage: string): Promise<string> {
    try {
      const prompt = `
        Analise os dados financeiros fornecidos e gere um relat√≥rio completo e humanizado em portugu√™s brasileiro.

        Dados do relat√≥rio:
        ${JSON.stringify(reportData, null, 2)}

        Mensagem do usu√°rio: "${userMessage}"

        Gere um relat√≥rio que inclua:
        1. **Resumo Executivo** - Vis√£o geral dos resultados
        2. **Receitas** - Total, categorias principais, tend√™ncias
        3. **Despesas** - Total, categorias principais, alertas
        4. **Resultado L√≠quido** - Saldo (receitas - despesas)
        5. **An√°lise de Categorias** - Principais fontes de receita e gastos
        6. **Insights e Recomenda√ß√µes** - Dicas pr√°ticas baseadas nos dados
        7. **Compara√ß√µes** - Se houver dados de per√≠odos anteriores

        Use emojis apropriados, seja motivacional e ofere√ßa insights √∫teis.
        Se o resultado for negativo, seja encorajador e sugira melhorias.
        Se for positivo, parabenize e sugira como manter o sucesso.

        Formato: Markdown com se√ß√µes bem definidas.
        Tom: Amig√°vel, profissional e motivacional.
      `;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um assistente financeiro especializado em an√°lise de dados pessoais. Seja preciso, motivacional e ofere√ßa insights pr√°ticos.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
      });

      const response = completion.choices[0]?.message?.content;
      if (response) {
        this.logger.log('‚úÖ Relat√≥rio financeiro gerado com sucesso');
        return response;
      }

      return this.generateDefaultFinancialReport(reportData);
    } catch (error) {
      this.logger.error('‚ùå Erro ao gerar relat√≥rio financeiro:', error);
      return this.generateDefaultFinancialReport(reportData);
    }
  }

  private generateDefaultFinancialReport(reportData: any): string {
    const { total_revenue, total_expenses, net_income, revenue_by_category, expense_by_category, period } = reportData;
    
    const revenueTotal = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(total_revenue);

    const expenseTotal = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(total_expenses);

    const netIncome = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(net_income);

    let report = `üìä **RELAT√ìRIO FINANCEIRO - ${period.toUpperCase()}**\n\n`;
    
    // Resumo Executivo
    report += `üéØ **RESUMO EXECUTIVO**\n`;
    report += `üí∞ **Receitas:** ${revenueTotal}\n`;
    report += `üí∏ **Despesas:** ${expenseTotal}\n`;
    report += `üìà **Resultado:** ${netIncome}\n\n`;

    // An√°lise de Receitas
    if (revenue_by_category && Object.keys(revenue_by_category).length > 0) {
      report += `üí° **PRINCIPAIS RECEITAS**\n`;
      Object.entries(revenue_by_category)
        .sort(([,a], [,b]) => (b as number) - (a as number))
        .slice(0, 3)
        .forEach(([category, amount]) => {
          const formattedAmount = new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
          }).format(amount as number);
          report += `‚Ä¢ ${category}: ${formattedAmount}\n`;
        });
      report += '\n';
    }

    // An√°lise de Despesas
    if (expense_by_category && Object.keys(expense_by_category).length > 0) {
      report += `‚ö†Ô∏è **PRINCIPAIS DESPESAS**\n`;
      Object.entries(expense_by_category)
        .sort(([,a], [,b]) => (b as number) - (a as number))
        .slice(0, 3)
        .forEach(([category, amount]) => {
          const formattedAmount = new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
          }).format(amount as number);
          report += `‚Ä¢ ${category}: ${formattedAmount}\n`;
        });
      report += '\n';
    }

    // Insights
    report += `üí≠ **INSIGHTS**\n`;
    if (net_income > 0) {
      report += `‚úÖ Excelente! Voc√™ est√° com saldo positivo de ${netIncome}.\n`;
      report += `üéØ Continue mantendo o controle e considere investir o excedente.\n`;
    } else if (net_income < 0) {
      report += `‚ö†Ô∏è Aten√ß√£o! Voc√™ est√° com saldo negativo de ${netIncome}.\n`;
      report += `üîç Analise suas despesas e identifique oportunidades de economia.\n`;
    } else {
      report += `‚öñÔ∏è Seu saldo est√° equilibrado. Continue monitorando suas finan√ßas.\n`;
    }

    report += `\nüì± **Para mais detalhes, envie imagens de seus comprovantes!**`;

    return report;
  }

  private async extractRevenueData(imageBuffer: Buffer, classification: DocumentClassification): Promise<ExtractedData> {
    try {
      // Tentar primeiro com OpenAI Vision API
      this.logger.log('ü§ñ Extraindo dados de receita com OpenAI Vision API...');
      const data = await this.extractDataWithOpenAIVision(imageBuffer);
      
      // Adicionar campos espec√≠ficos de receita
      return {
        ...data,
        document_classification: 'revenue',
        revenue_type: classification.documentCategory,
        payer_name: data.store_name, // Mapear store_name para payer_name
        payer_cnpj: data.store_cnpj, // Mapear store_cnpj para payer_cnpj
        payer_address: data.store_address, // Mapear store_address para payer_address
        source: this.mapRevenueCategoryToSource(classification.documentCategory),
      };
    } catch (visionError) {
      this.logger.warn('‚ö†Ô∏è Falha com OpenAI Vision, tentando Tesseract:', visionError);
      
      try {
        const data = await this.extractDataWithTesseract(imageBuffer);
        return {
          ...data,
          document_classification: 'revenue',
          revenue_type: classification.documentCategory,
          payer_name: data.store_name,
          payer_cnpj: data.store_cnpj,
          payer_address: data.store_address,
          source: this.mapRevenueCategoryToSource(classification.documentCategory),
        };
      } catch (tesseractError) {
        this.logger.error('‚ùå Falha com Tesseract:', tesseractError);
        
        // Fallback manual
        const manualData = this.extractDataManually('Imagem n√£o p√¥de ser processada');
        return {
          ...manualData,
          document_classification: 'revenue',
          revenue_type: classification.documentCategory,
          source: this.mapRevenueCategoryToSource(classification.documentCategory),
        };
      }
    }
  }

  private async extractExpenseData(imageBuffer: Buffer, classification: DocumentClassification): Promise<ExtractedData> {
    try {
      // Tentar primeiro com OpenAI Vision API
      this.logger.log('ü§ñ Extraindo dados de despesa com OpenAI Vision API...');
      const data = await this.extractDataWithOpenAIVision(imageBuffer);
      
      // Adicionar campos espec√≠ficos de despesa
      return {
        ...data,
        document_classification: 'expense',
        expense_type: classification.documentCategory,
      };
    } catch (visionError) {
      this.logger.warn('‚ö†Ô∏è Falha com OpenAI Vision, tentando Tesseract:', visionError);
      
      try {
        const data = await this.extractDataWithTesseract(imageBuffer);
        return {
          ...data,
          document_classification: 'expense',
          expense_type: classification.documentCategory,
        };
      } catch (tesseractError) {
        this.logger.error('‚ùå Falha com Tesseract:', tesseractError);
        
        // Fallback manual
        const manualData = this.extractDataManually('Imagem n√£o p√¥de ser processada');
        return {
          ...manualData,
          document_classification: 'expense',
          expense_type: classification.documentCategory,
        };
      }
    }
  }

  private mapRevenueCategoryToSource(category: string): string {
    const sourceMap: Record<string, string> = {
      'salary': 'employer',
      'freelance': 'client',
      'sale': 'customer',
      'investment': 'financial_institution',
      'refund': 'original_payer',
      'transfer': 'sender',
      'rent': 'tenant',
      'commission': 'employer',
      'other': 'unknown'
    };
    
    return sourceMap[category] || 'unknown';
  }

  private async convertImageToJPEG(imageBuffer: Buffer): Promise<Buffer> {
    try {
      this.logger.log('üîÑ Convertendo imagem para JPEG...');
      
      // Tentar converter usando Sharp
      const convertedBuffer = await sharp(imageBuffer)
        .jpeg({ quality: 90 })
        .toBuffer();
      
      this.logger.log('‚úÖ Convers√£o conclu√≠da, novo tamanho:', convertedBuffer.length, 'bytes');
      return convertedBuffer;
    } catch (error) {
      this.logger.error('‚ùå Erro na convers√£o:', error);
      throw error;
    }
  }

  async generateUpgradeResponse(userMessage: string, state: any): Promise<string> {
    const prompt = `
      Voc√™ √© um assistente de vendas especializado em planos de assinatura.
      
      Contexto atual:
      - Usu√°rio est√° no fluxo de upgrade
      - Plano selecionado: ${state.selectedPlan || 'Nenhum'}
      - Frequ√™ncia selecionada: ${state.selectedFrequency || 'Nenhuma'}
      - Step atual: ${state.upgradeStep}
      
      Mensagem do usu√°rio: "${userMessage}"
      
      Responda de forma amig√°vel e natural, ajudando o usu√°rio a:
      1. Escolher entre Pro (R$ 19,90/m√™s) e Premium (R$ 39,90/m√™s)
      2. Decidir entre mensal e anual
      3. Entender os benef√≠cios
      4. Finalizar a compra
      
      Seja persuasivo mas n√£o agressivo. Use emojis ocasionalmente.
      Responda em portugu√™s brasileiro de forma natural.
      
      Se o usu√°rio tiver d√∫vidas sobre planos, explique os benef√≠cios:
      - Pro: 100 despesas, 100 relat√≥rios, 500 mensagens
      - Premium: ilimitado em tudo
      
      Se tiver d√∫vidas sobre pagamento, explique que aceitamos PIX.
    `;
    
    return this.generateResponse(userMessage);
  }

  // NOVOS M√âTODOS PARA DETEC√á√ÉO DE LAN√áAMENTOS
  async detectReportIntent(text: string): Promise<{
    isReportRequest: boolean;
    confidence: number;
    intent: string;
  }> {
    try {
      this.logger.log('üìä Detectando intent de relat√≥rio:', text);

      const prompt = `Analise a seguinte mensagem e determine se o usu√°rio est√° solicitando um relat√≥rio financeiro ou informa√ß√µes sobre seus gastos/receitas.

Mensagem: "${text}"

Responda apenas com um JSON no seguinte formato:
{
  "isReportRequest": true/false,
  "confidence": 0.0-1.0,
  "intent": "descri√ß√£o da inten√ß√£o"
}

Crit√©rios para considerar como solicita√ß√£o de relat√≥rio:
- Palavras como: relat√≥rio, resumo, gastos, despesas, receitas, quanto gastei, quanto ganhei
- Perguntas sobre per√≠odos: hoje, ontem, semana, m√™s, ano
- Solicita√ß√µes de an√°lise: an√°lise, gr√°fico, estat√≠sticas, balan√ßo
- Palavras relacionadas a dashboard: dashboard, painel, controle, acompanhamento
- Perguntas sobre status financeiro: status, situa√ß√£o, posi√ß√£o

Exemplos que DEVEM ser detectados:
- "Quanto gastei hoje?"
- "Me mostra um relat√≥rio"
- "Quais foram minhas despesas do m√™s?"
- "Preciso ver meus gastos"
- "Como est√° minha situa√ß√£o financeira?"
- "Me mostra um resumo"
- "Quero ver meus dados"

Exemplos que N√ÉO devem ser detectados:
- "Gastei 50 reais no mercado"
- "Recebi meu sal√°rio"
- "Quero fazer upgrade"
- "Como funciona o bot?"`;

      // Usar GPT-4o (mais econ√¥mico que GPT-4) com temperatura baixa para consist√™ncia
      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um detector especializado em identificar solicita√ß√µes de relat√≥rios financeiros. Seja preciso e consistente.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1, // Baixa temperatura para consist√™ncia
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const parsedResponse = JSON.parse(jsonMatch[0]);
          
          this.logger.log('üìä Intent de relat√≥rio detectado:', parsedResponse);
          
          return {
            isReportRequest: parsedResponse.isReportRequest || false,
            confidence: parsedResponse.confidence || 0,
            intent: parsedResponse.intent || 'n√£o especificado'
          };
        }
      }

      this.logger.warn('‚ö†Ô∏è Resposta da IA n√£o cont√©m JSON v√°lido:', responseText);
      return {
        isReportRequest: false,
        confidence: 0,
        intent: 'resposta inv√°lida'
      };

    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar intent de relat√≥rio:', error);
      
      // Fallback: detec√ß√£o manual simples
      return this.detectReportIntentManually(text);
    }
  }

  async detectFinancialEntry(text: string): Promise<{
    isFinancialEntry: boolean;
    type: 'revenue' | 'expense' | null;
    confidence: number;
    reason: string;
  }> {
    try {
      const prompt = `
        Analise a mensagem abaixo e determine se representa um lan√ßamento financeiro (receita ou despesa).

        REGRAS PARA IDENTIFICAR LAN√áAMENTOS:
        1. **Formatos aceitos**:
           - "Descri√ß√£o Valor" (ex: "Aluguel 2000")
           - "Valor Descri√ß√£o" (ex: "2000 Aluguel")
           - "Descri√ß√£o Valor Data" (ex: "Recebimento de b√¥nus 980 no dia 19/07")
           - "Descri√ß√£o Valor em Data" (ex: "Sal√°rio 5000 em 15/07")
           - "Descri√ß√£o Valor dia Data" (ex: "Venda 300 dia 20/07")
           - "Descri√ß√£o Valor na Data" (ex: "Uber 25 na sexta")
        
        2. **Exemplos de DESPESAS**:
           - "Aluguel 2000" ‚Üí Despesa de R$ 2000
           - "Supermercado 150" ‚Üí Despesa de R$ 150
           - "Uber 25" ‚Üí Despesa de R$ 25
           - "Conta de luz 120" ‚Üí Despesa de R$ 120
           - "Aluguel 2000 no dia 05/07" ‚Üí Despesa de R$ 2000
        
        3. **Exemplos de RECEITAS**:
           - "Sal√°rio 5000" ‚Üí Receita de R$ 5000
           - "Freelance 800" ‚Üí Receita de R$ 800
           - "Venda 300" ‚Üí Receita de R$ 300
           - "Reembolso 50" ‚Üí Receita de R$ 50
           - "Recebimento de b√¥nus 980 no dia 19/07" ‚Üí Receita de R$ 980
           - "B√¥nus 500 em 15/07" ‚Üí Receita de R$ 500
           - "Pix recebido 1000" ‚Üí Receita de R$ 1000
           - "Recebimento de servi√ßo 1000" ‚Üí Receita de R$ 1000
        
        4. **Exemplos de CONVERSA (n√£o √© lan√ßamento)**:
           - "Oi, tudo bem?"
           - "Como fa√ßo para ver meus gastos?"
           - "Quero um relat√≥rio"
           - "Obrigado"
           - "Tchau"
           - "Relat√≥rio de hoje"
           - "Mostre meus gastos"

        IMPORTANTE: Se a mensagem cont√©m um valor monet√°rio E uma descri√ß√£o de transa√ß√£o (mesmo com data), √© um lan√ßamento financeiro.

        MENSAGEM PARA ANALISAR: "${text}"

        Responda APENAS em JSON:
        {
          "isFinancialEntry": true/false,
          "type": "revenue"/"expense"/null,
          "confidence": 0.95,
          "reason": "Explica√ß√£o detalhada"
        }
      `;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um detector especializado em identificar lan√ßamentos financeiros. Seja preciso mas n√£o muito restritivo. Se h√° valor monet√°rio e descri√ß√£o de transa√ß√£o, √© um lan√ßamento.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const result = JSON.parse(jsonMatch[0]);
          this.logger.log('‚úÖ Detec√ß√£o de lan√ßamento:', result);
          return result;
        }
      }

      // Fallback para detec√ß√£o manual
      return this.detectFinancialEntryManually(text);
    } catch (error) {
      this.logger.error('‚ùå Erro na detec√ß√£o de lan√ßamento:', error);
      return this.detectFinancialEntryManually(text);
    }
  }

  private detectReportIntentManually(text: string): {
    isReportRequest: boolean;
    confidence: number;
    intent: string;
  } {
    const lowerText = text.toLowerCase();
    
    // Palavras-chave que indicam solicita√ß√£o de relat√≥rio
    const reportKeywords = [
      'relat√≥rio', 'resumo', 'gastos', 'despesas', 'receitas', 
      'quanto gastei', 'quanto ganhei', 'an√°lise', 'gr√°fico', 
      'estat√≠sticas', 'balan√ßo', 'dashboard', 'painel', 'controle',
      'acompanhamento', 'status', 'situa√ß√£o', 'posi√ß√£o', 'dados',
      'informa√ß√µes', 'mostra', 'ver', 'visualizar', 'consultar'
    ];
    
    // Per√≠odos que indicam solicita√ß√£o de relat√≥rio
    const periodKeywords = [
      'hoje', 'ontem', 'semana', 'm√™s', 'mes', 'ano', 'per√≠odo',
      '√∫ltimo', 'passado', 'atual', 'recente'
    ];
    
    // Verificar se cont√©m palavras-chave de relat√≥rio
    const hasReportKeywords = reportKeywords.some(keyword => lowerText.includes(keyword));
    const hasPeriodKeywords = periodKeywords.some(keyword => lowerText.includes(keyword));
    
    // Verificar se √© uma pergunta
    const isQuestion = lowerText.includes('?') || 
                      lowerText.includes('quanto') || 
                      lowerText.includes('quais') || 
                      lowerText.includes('como') ||
                      lowerText.includes('me mostra') ||
                      lowerText.includes('preciso ver') ||
                      lowerText.includes('quero ver');
    
    // Calcular confian√ßa baseada nos crit√©rios
    let confidence = 0;
    let intent = '';
    
    if (hasReportKeywords && isQuestion) {
      confidence = 0.9;
      intent = 'solicita√ß√£o de relat√≥rio com per√≠odo espec√≠fico';
    } else if (hasReportKeywords) {
      confidence = 0.7;
      intent = 'solicita√ß√£o de relat√≥rio';
    } else if (hasPeriodKeywords && isQuestion) {
      confidence = 0.6;
      intent = 'consulta por per√≠odo';
    } else if (isQuestion && (lowerText.includes('gasto') || lowerText.includes('despesa') || lowerText.includes('receita'))) {
      confidence = 0.5;
      intent = 'consulta financeira';
    }
    
    return {
      isReportRequest: confidence > 0.4,
      confidence,
      intent
    };
  }

  private detectFinancialEntryManually(text: string): {
    isFinancialEntry: boolean;
    type: 'revenue' | 'expense' | null;
    confidence: number;
    reason: string;
  } {
    const lowerText = text.toLowerCase().trim();
    
    // Padr√µes para detectar valores monet√°rios (mais flex√≠vel)
    const moneyPattern = /(?:r?\$?\s*)?(\d+[.,]\d{2}|\d+)/i;
    const hasMoney = moneyPattern.test(text);
    
    if (!hasMoney) {
      return {
        isFinancialEntry: false,
        type: null,
        confidence: 0.9,
        reason: 'N√£o cont√©m valor monet√°rio'
      };
    }

    // Palavras-chave para receitas (expandidas)
    const revenueKeywords = [
      'sal√°rio', 'salary', 'pagamento', 'payment', 'recebido', 'received',
      'freelance', 'freela', 'venda', 'sale', 'vendi', 'sold',
      'investimento', 'investment', 'rendimento', 'dividendo',
      'reembolso', 'refund', 'estorno', 'chargeback',
      'transfer√™ncia', 'transfer', 'pix recebido', 'pix received',
      'aluguel recebido', 'rent received', 'comiss√£o', 'commission',
      'b√¥nus', 'bonus', 'pr√™mio', 'award', 'recebimento'
    ];

    // Palavras-chave para despesas (expandidas)
    const expenseKeywords = [
      'aluguel', 'rent', 'supermercado', 'supermarket', 'mercado', 'market',
      'uber', 'taxi', 'transporte', 'transport', 'combust√≠vel', 'fuel',
      'gasolina', 'gas', 'energia', 'energy', 'luz', 'light',
      '√°gua', 'water', 'internet', 'telefone', 'phone',
      'restaurante', 'restaurant', 'lanche', 'lunch', 'jantar', 'dinner',
      'farm√°cia', 'pharmacy', 'medicamento', 'medicine', 'sa√∫de', 'health',
      'cinema', 'teatro', 'show', 'lazer', 'entertainment',
      'escola', 'school', 'curso', 'course', 'educa√ß√£o', 'education',
      'roupa', 'clothes', 'sapato', 'shoes', 'acess√≥rio', 'accessory',
      'conta', 'bill', 'boleto', 'invoice', 'fatura', 'statement',
      'gasto', 'despesa', 'pagamento', 'payment'
    ];

    // Palavras que indicam que N√ÉO √© um lan√ßamento
    const nonFinancialKeywords = [
      'relat√≥rio', 'report', 'mostre', 'show', 'ver', 'see', 'quero', 'want',
      'como', 'how', 'ajuda', 'help', 'oi', 'hello', 'ol√°', 'hi',
      'obrigado', 'thanks', 'tchau', 'bye', 'tudo bem', 'ok', 'okay'
    ];

    // Verificar se cont√©m palavras que indicam que N√ÉO √© lan√ßamento
    const isNonFinancial = nonFinancialKeywords.some(keyword => lowerText.includes(keyword));
    if (isNonFinancial) {
      return {
        isFinancialEntry: false,
        type: null,
        confidence: 0.8,
        reason: 'Cont√©m palavras que indicam conversa, n√£o lan√ßamento'
      };
    }

    const isRevenue = revenueKeywords.some(keyword => lowerText.includes(keyword));
    const isExpense = expenseKeywords.some(keyword => lowerText.includes(keyword));

    // Se tem dinheiro e palavras-chave de receita
    if (isRevenue && !isExpense) {
      return {
        isFinancialEntry: true,
        type: 'revenue',
        confidence: 0.9,
        reason: 'Cont√©m valor monet√°rio e palavras-chave de receita'
      };
    }

    // Se tem dinheiro e palavras-chave de despesa
    if (isExpense && !isRevenue) {
      return {
        isFinancialEntry: true,
        type: 'expense',
        confidence: 0.9,
        reason: 'Cont√©m valor monet√°rio e palavras-chave de despesa'
      };
    }

    // Se tem dinheiro mas n√£o tem palavras-chave claras, analisar contexto
    if (hasMoney) {
      // Verificar se parece ser uma descri√ß√£o de transa√ß√£o
      const hasTransactionWords = lowerText.includes('no dia') || 
                                 lowerText.includes('em ') || 
                                 lowerText.includes('dia ') ||
                                 lowerText.includes('na ') ||
                                 lowerText.includes('recebimento') ||
                                 lowerText.includes('pagamento') ||
                                 lowerText.includes('gasto') ||
                                 lowerText.includes('despesa');

      if (hasTransactionWords) {
        // Se tem palavras de receita, √© receita
        if (isRevenue) {
          return {
            isFinancialEntry: true,
            type: 'revenue',
            confidence: 0.8,
            reason: 'Cont√©m valor monet√°rio e contexto de receita'
          };
        }
        // Se tem palavras de despesa, √© despesa
        if (isExpense) {
          return {
            isFinancialEntry: true,
            type: 'expense',
            confidence: 0.8,
            reason: 'Cont√©m valor monet√°rio e contexto de despesa'
          };
        }
        // Se n√£o tem palavras espec√≠ficas, assumir como despesa (mais comum)
        return {
          isFinancialEntry: true,
          type: 'expense',
          confidence: 0.7,
          reason: 'Cont√©m valor monet√°rio e contexto de transa√ß√£o, assumindo como despesa'
        };
      }
    }

    return {
      isFinancialEntry: false,
      type: null,
      confidence: 0.9,
      reason: 'N√£o parece ser um lan√ßamento financeiro'
    };
  }

  async extractDataFromText(text: string): Promise<ExtractedData> {
    try {
      this.logger.log('üìù Extraindo dados do texto:', text);

      // Usar fun√ß√£o unificada para extra√ß√£o de informa√ß√µes financeiras
      const financialInfo = await this.extractFinancialInfoWithAI(text);
      
      // Criar dados estruturados
      const extractedData: ExtractedData = {
        amount: financialInfo.amount,
        category: this.mapCategoryFromDescription(financialInfo.description, financialInfo.type),
        date: financialInfo.date || this.getCurrentDateInSaoPaulo(),
        description: financialInfo.description,
        payment_method: financialInfo.payment_method,
        document_classification: financialInfo.type,
        // Campos espec√≠ficos baseados no tipo
        ...(financialInfo.type === 'revenue' ? {
          revenue_type: this.mapRevenueTypeFromDescription(financialInfo.description),
          source: financialInfo.description
        } : {
          expense_type: this.mapExpenseTypeFromDescription(financialInfo.description),
          store_name: financialInfo.description
        })
      };
      
      this.logger.log('‚úÖ Dados extra√≠dos do texto:', extractedData);
      return extractedData;

    } catch (error) {
      this.logger.error('‚ùå Erro ao extrair dados do texto:', error);
      throw error;
    }
  }



  /**
   * Transcreve √°udio usando OpenAI Whisper API
   * @param audioBuffer Buffer do arquivo de √°udio
   * @returns Texto transcrito
   */
  async transcribeAudio(audioBuffer: Buffer): Promise<string> {
    try {
      this.logger.log('üéµ Iniciando transcri√ß√£o de √°udio...');
      
      // Verificar se o buffer √© v√°lido
      if (!audioBuffer || audioBuffer.length === 0) {
        throw new Error('Buffer de √°udio vazio ou inv√°lido');
      }

      this.logger.log('üìä Tamanho do √°udio:', audioBuffer.length, 'bytes');

      // Detectar formato do √°udio baseado nos primeiros bytes
      const contentType = this.detectAudioFormat(audioBuffer);
      this.logger.log('üéµ Formato detectado:', contentType);

      // Ordem de prioridade para tentativas (MP3 primeiro, depois outros)
      const formatsToTry = [
        'audio/mp3', // Priorizar MP3
        contentType, // Formato detectado
        'audio/wav',
        'audio/ogg',
        'audio/mp4',
        'audio/flac'
      ];

      // Remover duplicatas mantendo a ordem
      const uniqueFormats = [...new Set(formatsToTry)];

      let lastError: Error | null = null;

      for (const format of uniqueFormats) {
        try {
          this.logger.log(`üéµ Tentando formato: ${format}`);
          
          // Converter buffer para FormData para envio √† API
          const formData = new FormData();
          const audioBlob = new Blob([audioBuffer], { type: format });
          formData.append('file', audioBlob, `audio.${this.getFileExtension(format)}`);
          formData.append('model', 'whisper-1');
          formData.append('language', 'pt'); // Portugu√™s brasileiro
          formData.append('response_format', 'json');

          // Fazer requisi√ß√£o para OpenAI Whisper API
          const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${this.configService.get('OPENAI_API_KEY')}`,
            },
            body: formData,
          });

          if (!response.ok) {
            const errorText = await response.text();
            lastError = new Error(`Erro na transcri√ß√£o: ${response.status} - ${errorText}`);
            this.logger.warn(`‚ö†Ô∏è Falha com formato ${format}:`, errorText);
            continue; // Tentar pr√≥ximo formato
          }

          const result = await response.json();
          const transcribedText = result.text?.trim();

          if (!transcribedText) {
            lastError = new Error('Transcri√ß√£o retornou texto vazio');
            continue; // Tentar pr√≥ximo formato
          }

          this.logger.log('‚úÖ Transcri√ß√£o conclu√≠da:', transcribedText);
          return transcribedText;

        } catch (error) {
          lastError = error;
          this.logger.warn(`‚ö†Ô∏è Erro com formato ${format}:`, error.message);
          continue; // Tentar pr√≥ximo formato
        }
      }

      // Se chegou aqui, todos os formatos falharam
      throw lastError || new Error('Falha na transcri√ß√£o com todos os formatos testados');

    } catch (error) {
      this.logger.error('‚ùå Erro na transcri√ß√£o de √°udio:', error);
      throw error;
    }
  }

  /**
   * Detecta o formato do √°udio baseado nos primeiros bytes
   */
  private detectAudioFormat(buffer: Buffer): string {
    const header = buffer.slice(0, 12);
    const headerHex = header.toString('hex').toLowerCase();

    // Detectar formatos comuns
    if (headerHex.startsWith('4f676753')) return 'audio/ogg'; // OGG
    if (headerHex.startsWith('494433')) return 'audio/mp3'; // MP3
    if (headerHex.startsWith('52494646')) return 'audio/wav'; // WAV
    if (headerHex.startsWith('66747970')) return 'audio/mp4'; // MP4/M4A
    if (headerHex.startsWith('464c4143')) return 'audio/flac'; // FLAC

    // Detec√ß√£o adicional para MP3 (pode ter diferentes headers)
    if (headerHex.startsWith('fffb') || headerHex.startsWith('fff3') || headerHex.startsWith('fff2')) {
      return 'audio/mp3';
    }

    // Se n√£o conseguir detectar, assumir OGG (padr√£o do WhatsApp)
    this.logger.log('‚ö†Ô∏è Formato n√£o detectado, assumindo OGG');
    return 'audio/ogg';
  }

  /**
   * Obt√©m a extens√£o do arquivo baseado no content-type
   */
  private getFileExtension(contentType: string): string {
    const extensions: { [key: string]: string } = {
      'audio/ogg': 'ogg',
      'audio/mp3': 'mp3',
      'audio/wav': 'wav',
      'audio/mp4': 'm4a',
      'audio/flac': 'flac',
      'audio/webm': 'webm'
    };
    return extensions[contentType] || 'ogg';
  }

  /**
   * Processa √°udio para lan√ßamento financeiro com normaliza√ß√£o melhorada
   */
  async processAudioForFinancialEntry(audioBuffer: Buffer): Promise<ExtractedData> {
    try {
      this.logger.log('üéµ Processando √°udio para lan√ßamento financeiro...');

      // 1. Tentar transcri√ß√£o direta
      let transcribedText: string;
      try {
        transcribedText = await this.transcribeAudio(audioBuffer);
      } catch (error) {
        this.logger.warn('‚ö†Ô∏è Falha na transcri√ß√£o direta, tentando convers√£o...');
        
        // 2. Se falhar, tentar converter para formato mais compat√≠vel
        const convertedBuffer = await this.convertAudioToCompatibleFormat(audioBuffer);
        transcribedText = await this.transcribeAudio(convertedBuffer);
      }
      
      this.logger.log('üéµ Transcri√ß√£o original:', transcribedText);
      
      // 3. Extrair informa√ß√µes financeiras usando IA
      const financialInfo = await this.extractFinancialInfoWithAI(transcribedText);
      
      // 4. Criar dados estruturados
      const extractedData: ExtractedData = {
        amount: financialInfo.amount,
        category: this.mapCategoryFromDescription(financialInfo.description, financialInfo.type),
        date: financialInfo.date || this.getCurrentDateInSaoPaulo(), // Usar data da IA ou atual
        description: financialInfo.description,
        payment_method: financialInfo.payment_method,
        document_classification: financialInfo.type,
        // Campos espec√≠ficos baseados no tipo
        ...(financialInfo.type === 'revenue' ? {
          revenue_type: this.mapRevenueTypeFromDescription(financialInfo.description),
          source: financialInfo.description
        } : {
          expense_type: this.mapExpenseTypeFromDescription(financialInfo.description),
          store_name: financialInfo.description
        })
      };
      
      this.logger.log('‚úÖ Dados extra√≠dos do √°udio:', extractedData);
      return extractedData;

    } catch (error) {
      this.logger.error('‚ùå Erro no processamento de √°udio:', error);
      throw error;
    }
  }

  /**
   * Converte √°udio para formato mais compat√≠vel com OpenAI Whisper
   */
  private async convertAudioToCompatibleFormat(audioBuffer: Buffer): Promise<Buffer> {
    try {
      // Verificar se j√° √© um formato compat√≠vel
      const format = this.detectAudioFormat(audioBuffer);
      if (format === 'mp3' || format === 'wav') {
        return audioBuffer;
      }

      // Para outros formatos, retornar como est√° (ser√° processado pelo OpenAI)
      this.logger.log('‚ö†Ô∏è Formato de √°udio n√£o otimizado:', format);
      return audioBuffer;
    } catch (error) {
      this.logger.error('‚ùå Erro ao converter √°udio:', error);
      return audioBuffer;
    }
  }

  async analyzeUpgradeIntent(text: string, context: any): Promise<{
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    reasoning: string;
  }> {
    try {
      this.logger.log('üß† Analisando intent de upgrade com IA:', text);
      this.logger.log('üìã Contexto:', context);

      const prompt = `Analise a seguinte mensagem do usu√°rio no contexto de um fluxo de upgrade de plano e determine a inten√ß√£o.

Contexto atual:
- Passo atual: ${context.currentStep || 'desconhecido'}
- Plano selecionado: ${context.selectedPlan || 'nenhum'}
- Frequ√™ncia selecionada: ${context.selectedFrequency || 'nenhuma'}
- Valor: R$ ${context.amount || 0}

Mensagem do usu√°rio: "${text}"

Responda apenas com um JSON no seguinte formato:
{
  "confidence": 0.0-1.0,
  "intent": "payment_confirmation|frequency_selection|plan_selection|cancel_upgrade|continue_upgrade",
  "reasoning": "explica√ß√£o da an√°lise"
}

Crit√©rios para cada intent:
- payment_confirmation: Usu√°rio confirma pagamento (sim, ok, pode ser, vamos, pagar, prosseguir)
- frequency_selection: Usu√°rio escolhe frequ√™ncia (mensal, anual, monthly, yearly, m√™s, ano)
- plan_selection: Usu√°rio escolhe plano (pro, premium, b√°sico, basico)
- cancel_upgrade: Usu√°rio cancela (cancelar, cancel, n√£o, nao, desistir, parar)
- continue_upgrade: Continua√ß√£o do fluxo sem a√ß√£o espec√≠fica

Exemplos:
- "Sim" ‚Üí payment_confirmation
- "Mensal" ‚Üí frequency_selection  
- "Pro" ‚Üí plan_selection
- "Cancelar" ‚Üí cancel_upgrade
- "O que voc√™ acha?" ‚Üí continue_upgrade`;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um analisador especializado em inten√ß√µes de usu√°rio em fluxos de upgrade. Seja preciso e consistente.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const parsedResponse = JSON.parse(jsonMatch[0]);
          this.logger.log('ü§ñ An√°lise de intent:', parsedResponse);
          return {
            confidence: parsedResponse.confidence || 0,
            intent: parsedResponse.intent || 'continue_upgrade',
            reasoning: parsedResponse.reasoning || 'an√°lise padr√£o'
          };
        }
      }

      // Fallback
      return {
        confidence: 0.5,
        intent: 'continue_upgrade',
        reasoning: 'an√°lise padr√£o - resposta n√£o reconhecida'
      };

    } catch (error) {
      this.logger.error('‚ùå Erro ao analisar intent de upgrade:', error);
      return {
        confidence: 0.3,
        intent: 'continue_upgrade',
        reasoning: 'erro na an√°lise - usando fallback'
      };
    }
  }

  async detectNewUpgradeIntent(text: string): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    reasoning: string;
  }> {
    try {
      this.logger.log('üÜï Detectando novo intent de upgrade:', text);

      const prompt = `Analise a seguinte mensagem do usu√°rio e determine se ela indica uma inten√ß√£o de fazer upgrade de plano.

Mensagem: "${text}"

Responda apenas com um JSON no seguinte formato:
{
  "isUpgradeIntent": true/false,
  "confidence": 0.0-1.0,
  "reasoning": "explica√ß√£o da an√°lise"
}

Crit√©rios para considerar como intent de upgrade:
- Palavras relacionadas a planos: upgrade, plano, assinar, assinatura, premium, pro
- Palavras relacionadas a melhorias: melhorar, evoluir, avan√ßar, crescer
- Palavras relacionadas a recursos: mais, ilimitado, completo, avan√ßado
- Perguntas sobre planos: "quais s√£o os planos?", "como funciona o upgrade?"
- Express√µes de interesse: "quero", "gostaria", "pode me mostrar"

Exemplos que DEVEM ser detectados:
- "Quero fazer upgrade"
- "Quais s√£o os planos?"
- "Como funciona o premium?"
- "Gostaria de mais recursos"
- "Quero o plano pro"

Exemplos que N√ÉO devem ser detectados:
- "Gastei 50 reais"
- "Como est√° meu saldo?"
- "Quero ver meus gastos"`;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um detector especializado em identificar inten√ß√µes de upgrade de plano. Seja preciso e consistente.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const parsedResponse = JSON.parse(jsonMatch[0]);
          this.logger.log('ü§ñ Novo intent detectado:', parsedResponse);
          return {
            isUpgradeIntent: parsedResponse.isUpgradeIntent || false,
            confidence: parsedResponse.confidence || 0,
            reasoning: parsedResponse.reasoning || 'an√°lise padr√£o'
          };
        }
      }

      // Fallback
      return {
        isUpgradeIntent: false,
        confidence: 0.3,
        reasoning: 'an√°lise padr√£o - resposta n√£o reconhecida'
      };

    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar novo intent de upgrade:', error);
      return {
        isUpgradeIntent: false,
        confidence: 0.2,
        reasoning: 'erro na an√°lise - usando fallback'
      };
    }
  }

  async detectFrequencySelection(text: string): Promise<{
    frequency: 'monthly' | 'yearly' | null;
    confidence: number;
    reasoning: string;
  }> {
    try {
      this.logger.log('üìÖ Detectando sele√ß√£o de frequ√™ncia:', text);

      const prompt = `Analise a seguinte mensagem do usu√°rio e determine se ele est√° escolhendo uma frequ√™ncia de pagamento.

Mensagem: "${text}"

Responda apenas com um JSON no seguinte formato:
{
  "frequency": "monthly|yearly|null",
  "confidence": 0.0-1.0,
  "reasoning": "explica√ß√£o da an√°lise"
}

Crit√©rios:
- monthly: mensal, monthly, m√™s, m√™s a m√™s, por m√™s
- yearly: anual, yearly, ano, ano inteiro, por ano, anual
- null: n√£o especificou frequ√™ncia

Exemplos:
- "Mensal" ‚Üí monthly
- "Anual" ‚Üí yearly
- "Por m√™s" ‚Üí monthly
- "Ano inteiro" ‚Üí yearly
- "Sim" ‚Üí null
- "Ok" ‚Üí null`;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um detector especializado em identificar escolhas de frequ√™ncia de pagamento. Seja preciso e consistente.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const parsedResponse = JSON.parse(jsonMatch[0]);
          this.logger.log('ü§ñ Frequ√™ncia detectada:', parsedResponse);
          return {
            frequency: parsedResponse.frequency || null,
            confidence: parsedResponse.confidence || 0,
            reasoning: parsedResponse.reasoning || 'an√°lise padr√£o'
          };
        }
      }

      // Fallback
      return {
        frequency: null,
        confidence: 0.3,
        reasoning: 'an√°lise padr√£o - resposta n√£o reconhecida'
      };

    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar frequ√™ncia:', error);
      return {
        frequency: null,
        confidence: 0.2,
        reasoning: 'erro na an√°lise - usando fallback'
      };
    }
  }

  async detectPlanFromMessage(text: string): Promise<{
    planName: string | null;
    confidence: number;
    reasoning: string;
  }> {
    try {
      this.logger.log('üìã Detectando plano da mensagem:', text);

      const prompt = `Analise a seguinte mensagem do usu√°rio e determine se ele est√° escolhendo um plano espec√≠fico.

Mensagem: "${text}"

Responda apenas com um JSON no seguinte formato:
{
  "planName": "Pro|Premium|Free|null",
  "confidence": 0.0-1.0,
  "reasoning": "explica√ß√£o da an√°lise"
}

Crit√©rios:
- Pro: pro, plano pro, plano profissional
- Premium: premium, plano premium, plano completo
- Free: free, gratuito, b√°sico, plano b√°sico, plano free
- null: n√£o especificou plano

Exemplos:
- "Quero o Pro" ‚Üí Pro
- "Premium" ‚Üí Premium
- "O b√°sico est√° bom" ‚Üí Free
- "Sim" ‚Üí null
- "Ok" ‚Üí null`;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um detector especializado em identificar escolhas de planos. Seja preciso e consistente.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const parsedResponse = JSON.parse(jsonMatch[0]);
          this.logger.log('ü§ñ Plano detectado:', parsedResponse);
          return {
            planName: parsedResponse.planName || null,
            confidence: parsedResponse.confidence || 0,
            reasoning: parsedResponse.reasoning || 'an√°lise padr√£o'
          };
        }
      }

      // Fallback
      return {
        planName: null,
        confidence: 0.3,
        reasoning: 'an√°lise padr√£o - resposta n√£o reconhecida'
      };

    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar plano:', error);
      return {
        planName: null,
        confidence: 0.2,
        reasoning: 'erro na an√°lise - usando fallback'
      };
    }
  }

  /**
   * Normaliza a transcri√ß√£o de √°udio para facilitar o processamento
   */
  private normalizeAudioTranscription(transcription: string): string {
    try {
      this.logger.log('üßπ Normalizando transcri√ß√£o:', transcription);
      
      let normalized = transcription.trim();
      
      // Remover pontua√ß√£o desnecess√°ria
      normalized = normalized.replace(/[.,;:!?]/g, ' ');
      
      // Normalizar espa√ßos m√∫ltiplos
      normalized = normalized.replace(/\s+/g, ' ');
      
      // Converter para min√∫sculas
      normalized = normalized.toLowerCase();
      
      // Normalizar formatos de valor monet√°rio (preservar estrutura)
      normalized = normalized.replace(/r\$\s*(\d+[.,]?\d*)/gi, '$1');
      normalized = normalized.replace(/(\d+)\s*reais?/gi, '$1');
      normalized = normalized.replace(/(\d+)\s*real/gi, '$1');
      
      // Normalizar v√≠rgulas em n√∫meros para pontos (apenas para valores monet√°rios)
      normalized = normalized.replace(/(\d+),(\d{2})/g, '$1.$2');
      
      // Preservar valores como "350 00" para que a IA possa interpretar
      // N√£o fazer normaliza√ß√£o excessiva que quebre a estrutura
      
      this.logger.log('‚úÖ Transcri√ß√£o normalizada:', normalized);
      return normalized;
    } catch (error) {
      this.logger.error('‚ùå Erro ao normalizar transcri√ß√£o:', error);
      return transcription;
    }
  }



  /**
   * Mapeia categoria baseada na descri√ß√£o e tipo
   */
  private mapCategoryFromDescription(description: string, type: 'revenue' | 'expense'): string {
    const lowerDesc = description.toLowerCase();
    
    if (type === 'revenue') {
      if (lowerDesc.includes('sal√°rio') || lowerDesc.includes('salario')) return 'Sal√°rio';
      if (lowerDesc.includes('freelance')) return 'Freelance';
      if (lowerDesc.includes('venda')) return 'Venda';
      if (lowerDesc.includes('reembolso')) return 'Reembolso';
      if (lowerDesc.includes('b√¥nus') || lowerDesc.includes('bonus')) return 'B√¥nus';
      if (lowerDesc.includes('investimento')) return 'Investimento';
      return 'Outros';
    } else {
      if (lowerDesc.includes('aluguel')) return 'Moradia';
      if (lowerDesc.includes('supermercado') || lowerDesc.includes('compra')) return 'Alimenta√ß√£o';
      if (lowerDesc.includes('uber') || lowerDesc.includes('99') || lowerDesc.includes('taxi')) return 'Transporte';
      if (lowerDesc.includes('luz') || lowerDesc.includes('√°gua') || lowerDesc.includes('agua') || lowerDesc.includes('internet')) return 'Contas';
      if (lowerDesc.includes('farm√°cia') || lowerDesc.includes('farmacia')) return 'Sa√∫de';
      if (lowerDesc.includes('restaurante') || lowerDesc.includes('lanche')) return 'Alimenta√ß√£o';
      return 'Outros';
    }
  }

  /**
   * Mapeia tipo de receita baseado na descri√ß√£o
   */
  private mapRevenueTypeFromDescription(description: string): string {
    const lowerDesc = description.toLowerCase();
    
    if (lowerDesc.includes('sal√°rio') || lowerDesc.includes('salario')) return 'salary';
    if (lowerDesc.includes('freelance')) return 'freelance';
    if (lowerDesc.includes('venda')) return 'sale';
    if (lowerDesc.includes('investimento')) return 'investment';
    if (lowerDesc.includes('reembolso')) return 'refund';
    return 'other';
  }

  /**
   * Mapeia tipo de despesa baseado na descri√ß√£o
   */
  private mapExpenseTypeFromDescription(description: string): string {
    const lowerDesc = description.toLowerCase();
    
    if (lowerDesc.includes('compra') || lowerDesc.includes('supermercado')) return 'purchase';
    if (lowerDesc.includes('aluguel') || lowerDesc.includes('conta')) return 'bill';
    if (lowerDesc.includes('uber') || lowerDesc.includes('99') || lowerDesc.includes('taxi')) return 'service';
    return 'other';
  }

  /**
   * Extrai informa√ß√µes financeiras da transcri√ß√£o usando IA (unificado para √°udio e texto)
   */
  private async extractFinancialInfoWithAI(transcription: string): Promise<{
    description: string;
    amount: number;
    payment_method?: string;
    type: 'revenue' | 'expense';
    confidence: number;
    date?: string;
  }> {
    try {
      this.logger.log('üß† Extraindo informa√ß√µes financeiras com IA:', transcription);
      
      // Obter data atual em S√£o Paulo
      const currentDate = new Date();
      const currentDay = currentDate.getDate();
      const currentMonth = currentDate.getMonth() + 1; // getMonth() retorna 0-11
      const currentYear = currentDate.getFullYear();
      this.logger.log('üîç Data atual:', currentDay, currentMonth, currentYear);
      
      const prompt = `Analise a seguinte transcri√ß√£o e extraia informa√ß√µes financeiras.

Transcri√ß√£o: "${transcription}"

Data atual (S√£o Paulo): ${currentDay}/${currentMonth}/${currentYear}

Instru√ß√µes:
1. Identifique o valor monet√°rio (qualquer formato: R$ 350,00, 350 reais, 350 00, trezentos e cinquenta, etc.)
2. Identifique a descri√ß√£o da transa√ß√£o
3. Identifique o m√©todo de pagamento (se mencionado)
4. Classifique como receita ou despesa baseado no contexto
5. Identifique a data da transa√ß√£o (se mencionada)

IMPORTANTE: Para valores monet√°rios:
- "R$ 350,00" ‚Üí amount: 350
- "350 reais" ‚Üí amount: 350
- "350 00" ‚Üí amount: 350
- "trezentos e cinquenta" ‚Üí amount: 350
- "mil reais" ‚Üí amount: 1000

IMPORTANTE: Para datas:
- Se n√£o mencionar data ‚Üí usar data atual: "${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}"
- "dia 12 do 7" ‚Üí "${currentYear}-07-12" (ano atual)
- "12/7" ‚Üí "${currentYear}-07-12" (ano atual)
- "ontem" ‚Üí calcular data de ontem baseado na data atual
- "anteontem" ‚Üí calcular data de anteontem baseado na data atual
- "hoje" ‚Üí usar data atual
- "semana passada" ‚Üí calcular 7 dias atr√°s
- "m√™s passado" ‚Üí calcular 1 m√™s atr√°s

Para datas relativas, calcule baseado na data atual:
- "ontem" = data atual - 1 dia
- "anteontem" = data atual - 2 dias
- "semana passada" = data atual - 7 dias
- "m√™s passado" = data atual - 30 dias

Exemplos de datas relativas (baseado na data atual ${currentDay}/${currentMonth}/${currentYear}):
- "ontem" ‚Üí ${this.calculateRelativeDate('ontem')}
- "anteontem" ‚Üí ${this.calculateRelativeDate('anteontem')}
- "semana passada" ‚Üí ${this.calculateRelativeDate('semana passada')}

Responda APENAS em JSON v√°lido:
{
  "description": "descri√ß√£o da transa√ß√£o",
  "amount": valor_numerico,
  "payment_method": "m√©todo de pagamento ou null",
  "type": "revenue|expense",
  "confidence": 0.0-1.0,
  "date": "YYYY-MM-DD"
}

Exemplos de classifica√ß√£o:
- "Compra no supermercado, R$ 350,00 pago no Pix" ‚Üí {"description": "Compra no supermercado", "amount": 350, "payment_method": "PIX", "type": "expense", "confidence": 0.95, "date": "${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}"}
- "Sal√°rio 5000 reais" ‚Üí {"description": "Sal√°rio", "amount": 5000, "type": "revenue", "confidence": 0.9, "date": "${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}"}
- "Aluguel 2000" ‚Üí {"description": "Aluguel", "amount": 2000, "type": "expense", "confidence": 0.9, "date": "${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}"}
- "Pagamento de fornecedor no dia 12 do 7, o valor de R$290,00" ‚Üí {"description": "Pagamento de fornecedor", "amount": 290, "type": "expense", "confidence": 0.9, "date": "${currentYear}-07-12"}
- "Uber ontem 25 no cart√£o" ‚Üí {"description": "Uber", "amount": 25, "payment_method": "Cart√£o", "type": "expense", "confidence": 0.9, "date": "${this.calculateRelativeDate('ontem')}"}

Palavras que indicam DESPESA: compra, aluguel, conta, uber, taxi, supermercado, farm√°cia, restaurante, gasolina, luz, √°gua, internet, pagamento, fornecedor
Palavras que indicam RECEITA: sal√°rio, freelance, venda, reembolso, b√¥nus, recebimento, pagamento recebido

Seja preciso e extraia apenas informa√ß√µes claramente presentes na transcri√ß√£o.`;

      const completion = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: 'Voc√™ √© um especialista em extrair informa√ß√µes financeiras de transcri√ß√µes de √°udio. Seja preciso e retorne apenas JSON v√°lido.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
      });

      const responseText = completion.choices[0]?.message?.content;
      if (responseText) {
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const result = JSON.parse(jsonMatch[0]);
          
          // Valida√ß√µes b√°sicas
          if (!result.amount || result.amount <= 0) {
            throw new Error('Valor monet√°rio inv√°lido ou n√£o encontrado');
          }
          
          if (!result.description || result.description.trim() === '') {
            result.description = 'Transa√ß√£o';
          }
          
          if (!result.type || !['revenue', 'expense'].includes(result.type)) {
            result.type = 'expense'; // Padr√£o √© despesa
          }
          
          // Validar e processar data
          if (!result.date) {
            // Se n√£o h√° data, usar data atual
            result.date = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`;
          } else {
            // Validar formato da data
            const dateRegex = /^\d{4}-\d{2}-\d{2}$/;
            if (!dateRegex.test(result.date)) {
              // Se formato inv√°lido, usar data atual
              result.date = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`;
            }
          }
          
          this.logger.log('‚úÖ Informa√ß√µes extra√≠das com IA:', result);
          return result;
        }
      }
      
      throw new Error('Resposta da IA n√£o cont√©m JSON v√°lido');
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao extrair informa√ß√µes com IA:', error);
      
      // Fallback para extra√ß√£o manual se IA falhar
      this.logger.log('üîÑ Usando fallback manual...');
      return this.extractFinancialInfoManual(transcription);
    }
  }

  /**
   * Calcula data relativa baseada na data atual
   */
  private calculateRelativeDate(relativeTerm: string): string {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();
    const currentDay = currentDate.getDate();
    
    let targetDate = new Date(currentYear, currentMonth, currentDay);
    
    switch (relativeTerm.toLowerCase()) {
      case 'ontem':
        targetDate.setDate(currentDay - 1);
        break;
      case 'anteontem':
        targetDate.setDate(currentDay - 2);
        break;
      case 'semana passada':
        targetDate.setDate(currentDay - 7);
        break;
      case 'm√™s passado':
      case 'mes passado':
        targetDate.setMonth(currentMonth - 1);
        break;
      case 'hoje':
      default:
        targetDate = new Date(currentYear, currentMonth, currentDay);
        break;
    }
    
    const year = targetDate.getFullYear();
    const month = (targetDate.getMonth() + 1).toString().padStart(2, '0');
    const day = targetDate.getDate().toString().padStart(2, '0');
    
    return `${year}-${month}-${day}`;
  }

  /**
   * Fallback manual para extra√ß√£o de informa√ß√µes financeiras
   */
  private extractFinancialInfoManual(transcription: string): {
    description: string;
    amount: number;
    payment_method?: string;
    type: 'revenue' | 'expense';
    confidence: number;
    date?: string;
  } {
    try {
      this.logger.log('üîß Extraindo informa√ß√µes manualmente:', transcription);
      
      const normalized = this.normalizeAudioTranscription(transcription);
      
      // Padr√µes para extrair valor monet√°rio (melhorados)
      const amountPatterns = [
        /(\d+[.,]?\d*)\s*(?:reais?|real|r\$)/gi,
        /r\$\s*(\d+[.,]?\d*)/gi,
        /(\d+[.,]?\d*)/g
      ];
      
      let amount = 0;
      let amountMatch = null;
      
      // Tentar encontrar valor usando diferentes padr√µes
      for (const pattern of amountPatterns) {
        amountMatch = normalized.match(pattern);
        if (amountMatch) {
          amount = parseFloat(amountMatch[1].replace(',', '.'));
          break;
        }
      }
      
      if (!amount || amount <= 0) {
        throw new Error('Valor monet√°rio n√£o encontrado');
      }
      
      // Extrair descri√ß√£o (remover valor e palavras desnecess√°rias)
      let description = normalized
        .replace(/\d+[.,]?\d*\s*(?:reais?|real|r\$)/gi, '')
        .replace(/\d+[.,]?\d*/g, '')
        .replace(/\b(no|em|dia|data|com|por|via|atrav√©s|de|do|da|dos|das)\b/gi, '')
        .replace(/\b(dinheiro|cart√£o|pix|transfer√™ncia|boleto)\b/gi, '')
        .trim();
      
      // Detectar m√©todo de pagamento
      let payment_method = undefined;
      if (normalized.includes('dinheiro')) payment_method = 'Dinheiro';
      else if (normalized.includes('cart√£o') || normalized.includes('cartao')) payment_method = 'Cart√£o';
      else if (normalized.includes('pix')) payment_method = 'PIX';
      else if (normalized.includes('transfer√™ncia') || normalized.includes('transferencia')) payment_method = 'Transfer√™ncia';
      else if (normalized.includes('boleto')) payment_method = 'Boleto';
      
      // Classificar como receita ou despesa baseado em palavras-chave
      const revenueKeywords = [
        'sal√°rio', 'salario', 'freelance', 'venda', 'reembolso', 'b√¥nus', 'bonus',
        'recebimento', 'pagamento recebido', 'pix recebido', 'transfer√™ncia recebida',
        'boleto recebido', 'comiss√£o', 'comissao', 'investimento', 'rendimento'
      ];
      
      const expenseKeywords = [
        'compra', 'aluguel', 'conta', 'supermercado', 'uber', '99', 'taxi', '√¥nibus',
        'metro', 'trem', 'gasolina', 'combust√≠vel', 'combustivel', 'luz', '√°gua',
        'agua', 'internet', 'telefone', 'celular', 'alimenta√ß√£o', 'alimentacao',
        'restaurante', 'lanche', 'caf√©', 'cafe', 'farm√°cia', 'farmacia', 'medicamento'
      ];
      
      let type: 'revenue' | 'expense' = 'expense'; // Padr√£o √© despesa
      let confidence = 0.7; // Confian√ßa base
      
      const hasRevenueKeyword = revenueKeywords.some(keyword => 
        normalized.includes(keyword)
      );
      
      const hasExpenseKeyword = expenseKeywords.some(keyword => 
        normalized.includes(keyword)
      );
      
      if (hasRevenueKeyword && !hasExpenseKeyword) {
        type = 'revenue';
        confidence = 0.9;
      } else if (hasExpenseKeyword) {
        type = 'expense';
        confidence = 0.9;
      } else {
        // Se n√£o tem palavras-chave espec√≠ficas, usar heur√≠stica
        if (normalized.includes('recebido') || normalized.includes('ganho') || normalized.includes('entrada')) {
          type = 'revenue';
          confidence = 0.8;
        } else if (normalized.includes('gasto') || normalized.includes('pago') || normalized.includes('sa√≠da')) {
          type = 'expense';
          confidence = 0.8;
        }
      }
      
      // Obter data atual para fallback
      const currentDate = new Date();
      const currentDay = currentDate.getDate();
      const currentMonth = currentDate.getMonth() + 1;
      const currentYear = currentDate.getFullYear();
      const currentDateString = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-${currentDay.toString().padStart(2, '0')}`;
      
      const result = {
        description: description || 'Transa√ß√£o',
        amount,
        payment_method,
        type,
        confidence,
        date: currentDateString // Usar data atual no fallback
      };
      
      this.logger.log('‚úÖ Informa√ß√µes extra√≠das manualmente:', result);
      return result;
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao extrair informa√ß√µes manualmente:', error);
      throw error;
    }
  }
} 