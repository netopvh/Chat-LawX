// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  phone         String   @unique
  ddi           String
  jurisdiction  String
  name          String?
  email         String?
  isRegistered  Boolean  @default(false)
  // NOVOS CAMPOS PARA CONTROLE DE SESSÃO WHATSAPP
  lastWhatsAppInteraction DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  legalDocuments LegalDocument[]
  whatsappSession WhatsAppSession?

  @@map("users")
}

model LegalDocument {
  id          String   @id @default(cuid())
  userId      String
  type        String
  content     String
  analysis    String?
  jurisdiction String
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id])
  
  @@map("legal_documents")
}

model LegalPrompt {
  id          String   @id @default(cuid())
  jurisdiction String
  name        String
  description String?
  content     String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  conversations Conversation[]
  
  @@unique([jurisdiction, name])
  @@map("legal_prompts")
}

model Conversation {
  id                    String   @id @default(cuid())
  userId                String
  promptId              String
  previousResponseId    String?
  openaiThreadId        String?
  openaiResponseId      String?
  messages              Json     // Array de mensagens da conversa
  jurisdiction          String
  status                String   @default("active") // active, completed, archived
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  prompt LegalPrompt @relation(fields: [promptId], references: [id])
  
  @@map("conversations")
}

model Plan {
  id                    String   @id @default(cuid())
  name                  String
  description           String
  monthlyPrice          Float
  yearlyPrice           Float
  consultationLimit     Int?     // Limite de consultas jurídicas (apenas para PT/ES)
  documentAnalysisLimit Int?     // Limite de análises de documentos
  messageLimit          Int?     // Limite de mensagens (apenas para PT/ES)
  isUnlimited           Boolean  @default(false)
  isActive              Boolean  @default(true)
  jurisdiction          String   // BR, PT, ES
  ddi                   String   // 55, 351, 34
  stripePriceIdMonthly  String?
  stripePriceIdYearly   String?
  stripeProductId       String?
  features              Json     // Array de funcionalidades incluídas
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  subscriptions         Subscription[]
  
  @@unique([name, jurisdiction])
  @@map("plans")
}

model Subscription {
  id                    String   @id @default(cuid())
  userId                String
  planId                String
  status                String   // active, cancelled, expired, past_due, unpaid
  billingCycle          String   // monthly, yearly
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  cancelledAt           DateTime?
  stripeSubscriptionId  String?
  stripeCustomerId      String?
  lastSyncAt            DateTime?
  syncStatus            String   @default("pending") // synced, pending, error
  stripeWebhookEvents   Json?    // Array de eventos recebidos
  jurisdiction          String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  plan                  Plan     @relation(fields: [planId], references: [id])
  usageTracking         UsageTracking[]
  
  @@map("subscriptions")
}

model UpgradeSession {
  id                        String   @id @default(cuid())
  userId                    String
  phone                     String
  planName                  String
  billingCycle              String   // monthly, yearly
  amount                    Float
  status                    String   // active, completed, expired, failed, cancelled, payment_processing, payment_confirmed, payment_failed
  currentStep               String   // plan_selection, frequency_selection, payment_info, payment_processing, confirmation, expired
  attemptsCount             Int      @default(0)
  lastAttemptAt             DateTime?
  jurisdiction              String?  // BR, PT, ES
  stripeCheckoutUrl         String?
  stripeCheckoutSessionId   String?
  completedAt               DateTime?
  paymentConfirmedAt        DateTime?
  paymentFailedAt           DateTime?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  expiresAt                 DateTime
  
  upgradeAttempts           UpgradeAttempt[]
  
  @@map("upgrade_sessions")
}

model UpgradeAttempt {
  id            String   @id @default(cuid())
  sessionId     String
  step          String
  success       Boolean
  errorMessage  String?
  createdAt     DateTime @default(now())
  
  session       UpgradeSession @relation(fields: [sessionId], references: [id])
  
  @@map("upgrade_attempts")
}

model UsageTracking {
  id                      String   @id @default(cuid())
  userId                  String
  subscriptionId          String
  periodStart             DateTime
  periodEnd               DateTime
  consultationsCount      Int      @default(0)
  documentAnalysisCount   Int      @default(0)
  messagesCount           Int      @default(0)
  jurisdiction            String
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  subscription            Subscription @relation(fields: [subscriptionId], references: [id])
  
  @@map("usage_tracking")
}

// NOVAS ENTIDADES PARA CONTROLE DE SESSÃO WHATSAPP (ES/PT)
model WhatsAppSession {
  id                String   @id @default(cuid())
  phone             String   @unique
  name              String
  jurisdiction      String   // ES, PT
  ddi               String   // 34, 351
  lastMessageSent   DateTime @default(now())
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  user              User?    @relation(fields: [phone], references: [phone])
  messages          WhatsAppMessage[]
  
  @@map("whatsapp_sessions")
}

model WhatsAppMessage {
  id            String   @id @default(cuid())
  sessionId     String
  phone         String
  messageType   String   // text, document, image, audio
  content       String?  @db.Text
  direction     String   // inbound, outbound
  jurisdiction  String
  createdAt     DateTime @default(now())
  
  session       WhatsAppSession @relation(fields: [sessionId], references: [id])
  
  @@map("whatsapp_messages")
}