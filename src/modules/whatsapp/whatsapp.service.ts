import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';
import { UsersService, User } from '../users/users.service';
import { AiService } from '../ai/ai.service';
import { UsageService } from '../usage/usage.service';
import { UploadService } from '../upload/upload.service';
import { StripeService } from '../stripe/stripe.service';
import { UpgradeSessionsService } from '../upgrade-sessions/upgrade-sessions.service';
import { PlansService } from '../plans/plans.service';
import { SubscriptionsService } from '../subscriptions/subscriptions.service';
import { JurisdictionService } from '../jurisdiction/jurisdiction.service';
import { TeamsService } from '../teams/teams.service';
import { PrismaService } from '../prisma/prisma.service';
import { SupabaseService } from '../supabase/supabase.service';
import { WebhookDto } from './dto/webhook.dto';

interface ConversationState {
  isWaitingForName: boolean;
  isWaitingForEmail: boolean;
  isWaitingForConfirmation: boolean;
  isWaitingForBrazilianName: boolean;
  isWaitingForWhatsAppName: boolean; // NOVO: Para controle de nome em ES/PT
  isInUpgradeFlow: boolean;
  isInRegistrationFlow: boolean;
  registrationStep: 'introduction' | 'name' | 'email' | 'confirmation' | 'completed';
  upgradeStep: 'introduction' | 'plan_selection' | 'frequency_selection' | 'payment_info' | 'confirmation';
  selectedPlan?: string;
  selectedFrequency?: 'monthly' | 'yearly';
  isInAnalysis: boolean;
  analysisStartTime?: number;
  pendingDocument?: any;
  jurisdiction?: string;
  ddi?: string;
  pendingName?: string;
  pendingEmail?: string;
}

@Injectable()
export class WhatsAppService {
  private readonly logger = new Logger(WhatsAppService.name);
  private conversationStates = new Map<string, ConversationState>();

  // Array de n√∫meros brasileiros para teste no fluxo ES
  private readonly testNumbersForESFlow = [
    '554892060485', // N√∫mero de teste 1
    '558499869794', // N√∫mero de teste 2
    '553288125754', // N√∫mero de teste 3
  ];

  constructor(
    private configService: ConfigService,
    private aiService: AiService,
    private usageService: UsageService,
    private uploadService: UploadService,
    private usersService: UsersService,
    private upgradeSessionsService: UpgradeSessionsService,
    private plansService: PlansService,
    private subscriptionsService: SubscriptionsService,
    private stripeService: StripeService,
    private jurisdictionService: JurisdictionService,
    private teamsService: TeamsService,
    private prismaService: PrismaService,
    private supabaseService: SupabaseService,
  ) {}

  // M√©todos auxiliares para buscar planos dinamicamente
  private async getAllActivePlans() {
    try {
      return await this.plansService.getAllPlans();
    } catch (error) {
      this.logger.error('Erro ao buscar planos ativos:', error);
      throw error;
    }
  }

  private async getUpgradePlans() {
    try {
      return await this.plansService.getUpgradePlans();
    } catch (error) {
      this.logger.error('Erro ao buscar planos de upgrade:', error);
      throw error;
    }
  }

  private async getPlanByName(planName: string) {
    try {
      return await this.plansService.getPlanByName(planName);
    } catch (error) {
      this.logger.error(`Erro ao buscar plano ${planName}:`, error);
      throw error;
    }
  }

  private async getPlanPrice(planName: string, billingCycle: 'monthly' | 'yearly'): Promise<number> {
    try {
      const plan = await this.plansService.getPlanByName(planName);
      return billingCycle === 'monthly' ? plan.monthly_price : plan.yearly_price;
    } catch (error) {
      this.logger.error(`Erro ao buscar pre√ßo do plano ${planName}:`, error);
      throw error;
    }
  }

  private async getPlanLimits(planName: string, jurisdiction: string): Promise<string> {
    try {
      const plan = await this.plansService.getPlanByName(planName);
      
      if (plan.is_unlimited) {
        return '‚Ä¢ Consultas jur√≠dicas ilimitadas\n‚Ä¢ An√°lise de documentos ilimitada\n‚Ä¢ Mensagens ilimitadas';
      } else {
        const limitControlType = this.jurisdictionService.getLimitControlType(jurisdiction);
        
        if (limitControlType === 'teams') {
          // Para Brasil - limites controlados via Supabase teams
          return `‚Ä¢ Consultas jur√≠dicas controladas via sistema\n‚Ä¢ An√°lise de documentos controlada via sistema\n‚Ä¢ Mensagens controladas via sistema`;
        } else {
          // Para Portugal/Espanha - limites locais
          return `‚Ä¢ ${plan.consultation_limit} consultas por m√™s\n‚Ä¢ An√°lise de documentos inclu√≠da\n‚Ä¢ Mensagens ilimitadas`;
        }
      }
    } catch (error) {
      this.logger.error(`Erro ao buscar limites do plano ${planName}:`, error);
      throw error;
    }
  }

  private async detectPlanFromMessage(userMessage: string): Promise<string | null> {
    try {
      this.logger.log('üìã Detectando plano da mensagem com IA:', userMessage);
      
      // Usar IA para detectar plano
      const planAnalysis = await this.aiService.detectPlanFromMessage(userMessage);
      
      if (planAnalysis.planName && planAnalysis.confidence > 0.6) {
        this.logger.log('ü§ñ Plano detectado pela IA:', planAnalysis);
        return planAnalysis.planName;
      }
      
      // Fallback para detec√ß√£o manual
      const plans = await this.getUpgradePlans();
      const lowerMessage = userMessage.toLowerCase();
      
      const selectedPlan = plans.find(plan => 
        lowerMessage.includes(plan.name.toLowerCase())
      );
      
      return selectedPlan ? selectedPlan.name : null;
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar plano da mensagem:', error);
      return null;
    }
  }

  async handleWebhook(webhookData: any): Promise<void> {
    try {

      if (webhookData.event === 'messages.upsert') {
        // Verificar se data √© array ou objeto √∫nico
        const messages = Array.isArray(webhookData.data) ? webhookData.data : [webhookData.data];
        this.logger.log('üì® Processando mensagens:', messages.length);
        
        for (const message of messages) {
          if (message) {
            console.log('üì® Processando mensagem:', JSON.stringify(message, null, 2));
            await this.processMessage(message);
          }
        }
      } else {
        this.logger.warn('‚ö†Ô∏è Evento n√£o suportado:', webhookData.event);
      }
    } catch (error) {
      this.logger.error('Erro ao processar webhook:', error);
      throw error;
    }
  }

  private async handleUnregisteredUser(
    phone: string, 
    text: string, 
    state: ConversationState, 
    jurisdiction: any, 
    isBrazilianUser: boolean
  ): Promise<void> {
    try {
      // Se √© usu√°rio brasileiro, enviar link para cadastro no site
      if (isBrazilianUser) {
        const response = `üáßüá∑ Ol√°! Seja bem-vindo ao Chat LawX!\n\nPara usu√°rios brasileiros, voc√™ precisa se cadastrar em nossa plataforma web.\n\nüîó Acesse: https://plataforma.lawx.ai/auth/signup\n\nAp√≥s o cadastro, voc√™ poder√° usar nosso assistente jur√≠dico via WhatsApp.\n\nSe j√° possui cadastro, verifique se seu n√∫mero est√° vinculado √† sua conta.`;
        await this.sendMessageWithTyping(phone, response, 2000);
        return;
      }
      
      // Para PT/ES, usar fluxo de boas-vindas WhatsApp (com IA localizada)
      // Em vez de fluxo de cadastro est√°tico, usar handleWhatsAppUserWelcome
      await this.handleWhatsAppUserWelcome(phone, text, state, jurisdiction);
      return;

    } catch (error) {
      this.logger.error('Erro no fluxo de cadastro:', error);
      await this.sendMessage(phone, '‚ùå Ocorreu um erro durante o cadastro. Tente novamente mais tarde.');
    }
  }

  private async finalizeUserRegistration(
    phone: string, 
    state: ConversationState, 
    jurisdiction: any
  ): Promise<void> {
    try {
      // Criar usu√°rio
      const user = await this.usersService.registerUserWithLegalInfo(
        phone,
        state.pendingName!,
        state.pendingEmail!,
        jurisdiction.jurisdiction,
        jurisdiction.ddi
      );

      // Criar assinatura Fremium automaticamente
      await this.subscriptionsService.createFremiumSubscription(user.id);

      // Mensagem de boas-vindas
      const response = `üéâ Parab√©ns, ${state.pendingName}!\n\n‚úÖ Seu cadastro foi realizado com sucesso!\n\nüéÅ Voc√™ recebeu automaticamente o plano *Fremium* com:\n‚Ä¢ 2 consultas jur√≠dicas gratuitas\n‚Ä¢ An√°lise de documentos b√°sica\n\nüí¨ Agora voc√™ pode:\n‚Ä¢ Fazer perguntas sobre direito\n‚Ä¢ Enviar documentos para an√°lise\n‚Ä¢ Solicitar orienta√ß√µes jur√≠dicas\n\nDigite "MENU" para ver todas as op√ß√µes dispon√≠veis.`;
      
      await this.sendMessageWithTyping(phone, response, 2500);
      
      // Limpar estado da conversa
      this.clearConversationState(phone);
      
      this.logger.log(`‚úÖ Usu√°rio ${phone} cadastrado com sucesso com plano Fremium`);

    } catch (error) {
      this.logger.error('Erro ao finalizar cadastro:', error);
      await this.sendMessage(phone, '‚ùå Erro ao finalizar cadastro. Tente novamente mais tarde.');
    }
  }

  // ===== M√âTODOS PARA USU√ÅRIOS BRASILEIROS =====

  private async checkBrazilianUserSession(phone: string): Promise<{
    session: any | null;
    needsWelcomeBack: boolean;
    timeSinceLastMessage: number;
  }> {
    try {
      // Remove o DDI (55) e caracteres n√£o num√©ricos
      const cleanPhone = phone.replace(/\D/g, '');
      const phoneWithoutDDI = cleanPhone.startsWith('55') ? cleanPhone.substring(2) : cleanPhone;
      
      this.logger.log(`üîç Verificando sess√£o brasileira para: ${phoneWithoutDDI}`);
      
      // Buscar na tabela atendimento_wpps
      const { data, error } = await this.supabaseService
        .getClient()
        .from('atendimento_wpps')
        .select('*')
        .eq('number', phoneWithoutDDI)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          this.logger.log(`üë§ Sess√£o n√£o encontrada para: ${phoneWithoutDDI}`);
          return {
            session: null,
            needsWelcomeBack: false,
            timeSinceLastMessage: 0
          };
        }
        throw error;
      }

      this.logger.log(`‚úÖ Sess√£o encontrada: ${data.id} - ${data.name}`);
      
      // Verificar se precisa de mensagem de boas-vindas (mais de 1 hora)
      const ONE_HOUR_MS = 60 * 60 * 1000; // 1 hora em milissegundos
      const lastMessageTime = data.last_message_sent ? new Date(data.last_message_sent).getTime() : 0;
      const currentTime = Date.now();
      const timeSinceLastMessage = currentTime - lastMessageTime;
      const needsWelcomeBack = timeSinceLastMessage > ONE_HOUR_MS;
      
      if (needsWelcomeBack) {
        this.logger.log(`‚è∞ Usu√°rio ${data.name} precisa de mensagem de boas-vindas (√∫ltima mensagem h√° ${Math.round(timeSinceLastMessage / (60 * 1000))} minutos)`);
      }
      
      return {
        session: data,
        needsWelcomeBack,
        timeSinceLastMessage
      };
    } catch (error) {
      this.logger.error(`‚ùå Erro ao verificar sess√£o brasileira ${phone}:`, error);
      return {
        session: null,
        needsWelcomeBack: false,
        timeSinceLastMessage: 0
      };
    }
  }

  private async handleWelcomeBackMessage(phone: string, session: any): Promise<void> {
    try {
      const message = `Bem vindo novamente ${session.name}, em que posso te ajudar?`;
      await this.sendMessageWithTyping(phone, message, 1500);
      
      // Atualizar last_message_sent
      await this.updateLastMessageSent(phone);
      
      this.logger.log(`üëã Mensagem de boas-vindas enviada para ${session.name}`);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar mensagem de boas-vindas para ${phone}:`, error);
    }
  }

  private async updateLastMessageSent(phone: string): Promise<void> {
    try {
      // Remove o DDI (55) e caracteres n√£o num√©ricos
      const cleanPhone = phone.replace(/\D/g, '');
      const phoneWithoutDDI = cleanPhone.startsWith('55') ? cleanPhone.substring(2) : cleanPhone;
      
      // Atualizar campo last_message_sent na tabela atendimento_wpps
      const { error } = await this.supabaseService
        .getClient()
        .from('atendimento_wpps')
        .update({ last_message_sent: new Date().toISOString() })
        .eq('number', phoneWithoutDDI);

      if (error) {
        throw error;
      }

      this.logger.log(`‚úÖ Campo last_message_sent atualizado para ${phoneWithoutDDI}`);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao atualizar last_message_sent para ${phone}:`, error);
    }
  }

  // ===== M√âTODOS PARA CONTROLE DE SESS√ÉO WHATSAPP (ES/PT) =====

  /**
   * Verifica se usu√°rio tem sess√£o ativa no WhatsApp (ES/PT)
   * Equivalente ao checkBrazilianUserSession mas usando Prisma
   */
  private async checkWhatsAppSession(phone: string, jurisdiction: string): Promise<{
    session: any | null;
    needsWelcomeBack: boolean;
    timeSinceLastMessage: number;
  }> {
    try {
      // Remove caracteres n√£o num√©ricos
      const cleanPhone = phone.replace(/\D/g, '');
      
      this.logger.log(`üîç Verificando sess√£o WhatsApp para: ${cleanPhone} (${jurisdiction})`);
      
      // Buscar na tabela whatsapp_sessions
      const session = await this.prismaService.findWhatsAppSessionByPhone(cleanPhone);

      if (!session) {
        this.logger.log(`‚ùå Nenhuma sess√£o encontrada para ${cleanPhone}`);
        return {
          session: null,
          needsWelcomeBack: false,
          timeSinceLastMessage: 0
        };
      }

      // Calcular tempo desde √∫ltima mensagem
      const timeSinceLastMessage = Date.now() - session.lastMessageSent.getTime();
      const oneHourInMs = 60 * 60 * 1000; // 1 hora em milissegundos
      const needsWelcomeBack = timeSinceLastMessage > oneHourInMs;

      this.logger.log(`‚úÖ Sess√£o encontrada: ${session.name}, √∫ltima mensagem: ${timeSinceLastMessage}ms atr√°s`);

      return {
        session,
        needsWelcomeBack,
        timeSinceLastMessage
      };
    } catch (error) {
      this.logger.error(`‚ùå Erro ao verificar sess√£o WhatsApp para ${phone}:`, error);
      return {
        session: null,
        needsWelcomeBack: false,
        timeSinceLastMessage: 0
      };
    }
  }

  /**
   * Cria nova sess√£o WhatsApp (ES/PT)
   * Equivalente ao createBrazilianUserSession mas usando Prisma
   */
  private async createWhatsAppSession(phone: string, name: string, jurisdiction: string): Promise<any> {
    try {
      // Remove caracteres n√£o num√©ricos
      const cleanPhone = phone.replace(/\D/g, '');
      
      this.logger.log(`üìù Criando sess√£o WhatsApp: ${name} - ${cleanPhone} (${jurisdiction})`);
      
      // Determinar DDI baseado na jurisdi√ß√£o
      const ddi = jurisdiction === 'ES' ? '34' : '351';
      
      // ‚úÖ PRIMEIRO: Verificar se o usu√°rio existe na tabela users
      const existingUser = await this.prismaService.findUserByPhone(cleanPhone);
      
      let user;
      if (!existingUser) {
        this.logger.log(`üë§ Usu√°rio n√£o encontrado, criando novo usu√°rio: ${cleanPhone}`);
        
        // Criar usu√°rio na tabela users primeiro
        user = await this.prismaService.user.create({
          data: {
            phone: cleanPhone,
            ddi: ddi,
            jurisdiction: jurisdiction,
            name: name,
            isRegistered: true,
          }
        });
        
        this.logger.log(`‚úÖ Usu√°rio criado com sucesso: ${user.id}`);
        
        // üéÅ CRIAR ASSINATURA FREMIUM AUTOMATICAMENTE
        try {
          await this.prismaService.createFremiumSubscription(user.id, jurisdiction);
          this.logger.log(`üéÅ Assinatura Fremium criada automaticamente para usu√°rio: ${user.id}`);
        } catch (subscriptionError) {
          this.logger.error(`‚ùå Erro ao criar assinatura Fremium:`, subscriptionError);
          // N√£o falhar o processo por causa da assinatura, apenas logar o erro
        }
      } else {
        this.logger.log(`‚úÖ Usu√°rio encontrado: ${existingUser.id}`);
        
        // ‚úÖ NOVO: Atualizar nome do usu√°rio existente se necess√°rio
        if (existingUser.name !== name) {
          await this.prismaService.user.update({
            where: { id: existingUser.id },
            data: { name: name }
          });
          this.logger.log(`‚úÖ Nome do usu√°rio atualizado: ${name}`);
        }
        
        // ‚úÖ NOVO: Verificar se usu√°rio tem assinatura ativa, se n√£o tiver, criar Fremium
        try {
          const activeSubscription = await this.prismaService.findUserSubscription(existingUser.id);
          
          if (!activeSubscription) {
            this.logger.log(`üéÅ Usu√°rio existente sem assinatura ativa, criando Fremium: ${existingUser.id}`);
            await this.prismaService.createFremiumSubscription(existingUser.id, jurisdiction);
            this.logger.log(`üéÅ Assinatura Fremium criada para usu√°rio existente: ${existingUser.id}`);
          } else {
            this.logger.log(`‚úÖ Usu√°rio j√° possui assinatura ativa: ${activeSubscription.id}`);
          }
        } catch (subscriptionError) {
          this.logger.error(`‚ùå Erro ao verificar/criar assinatura para usu√°rio existente:`, subscriptionError);
          // N√£o falhar o processo por causa da assinatura, apenas logar o erro
        }
        
        user = existingUser;
      }
      
      // Inserir na tabela whatsapp_sessions
      const session = await this.prismaService.createWhatsAppSession({
        phone: cleanPhone,
        name: name,
        jurisdiction: jurisdiction,
        ddi: ddi
      });

      // Atualizar usu√°rio com refer√™ncia √† sess√£o
      await this.prismaService.updateUserLastWhatsAppInteraction(cleanPhone);

      this.logger.log(`‚úÖ Sess√£o WhatsApp criada com sucesso: ${session.id}`);
      return session;
    } catch (error) {
      this.logger.error(`‚ùå Erro ao criar sess√£o WhatsApp para ${phone}:`, error);
      throw error;
    }
  }

  /**
   * Atualiza timestamp da √∫ltima mensagem (ES/PT)
   * Equivalente ao updateLastMessageSent mas usando Prisma
   */
  private async updateWhatsAppLastMessageSent(phone: string, jurisdiction: string): Promise<void> {
    try {
      // Remove caracteres n√£o num√©ricos
      const cleanPhone = phone.replace(/\D/g, '');
      
      // Atualizar campo lastMessageSent na tabela whatsapp_sessions
      await this.prismaService.updateWhatsAppSession(cleanPhone, {
        lastMessageSent: new Date(),
        isActive: true
      });

      // Atualizar tamb√©m no User
      await this.prismaService.updateUserLastWhatsAppInteraction(cleanPhone);

      this.logger.log(`‚úÖ Campo lastMessageSent atualizado para ${cleanPhone}`);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao atualizar lastMessageSent para ${phone}:`, error);
    }
  }

  /**
   * Manipula boas-vindas para usu√°rios WhatsApp (ES/PT)
   * Equivalente ao handleBrazilianUserWelcome mas adaptado para ES/PT
   */
  private async handleWhatsAppUserWelcome(
    phone: string, 
    text: string, 
    state: ConversationState,
    jurisdiction: any
  ): Promise<void> {
    try {
      // Se j√° est√° no fluxo de coleta de nome
      if (state.isWaitingForWhatsAppName) {
        // Usu√°rio j√° enviou o nome
        if (text.length < 2) {
          const response = jurisdiction.jurisdiction === 'ES' 
            ? '‚ùå Por favor, proporciona un nombre v√°lido con al menos 2 caracteres.'
            : '‚ùå Por favor, forne√ßa um nome v√°lido com pelo menos 2 caracteres.';

          await this.sendMessageWithTyping(phone, response, 1000);
          return;
        }

        // Criar sess√£o na tabela whatsapp_sessions
        await this.createWhatsAppSession(phone, text, jurisdiction.jurisdiction);
        
        // Gerar mensagem de boas-vindas personalizada com IA
        const welcomePrompt = `Gere uma mensagem de boas-vindas personalizada para o Chat LawX, um assistente jur√≠dico especializado.

Nome do usu√°rio: ${text}
Jurisdi√ß√£o: ${jurisdiction.jurisdiction === 'ES' ? 'Espanha' : 'Portugal'}
Idioma: ${jurisdiction.jurisdiction === 'ES' ? 'Espanhol' : 'Portugu√™s europeu'}

Use obrigatoriamente no idioma ${jurisdiction.jurisdiction === 'ES' ? 'Espanhol' : 'Portugu√™s europeu'} para responder.

Requisitos:
- Deve mencionar obrigatoriamente "Chat LawX"
- Deve especificar que √© um assistente jur√≠dico
- Tom profissional e menos informal (usu√°rio j√° autenticado)
- Deve personalizar com o nome do usu√°rio: ${text}
- M√°ximo 5 linhas
- Use emojis apropriados
- Funcionalidades: Fazer perguntas sobre direito em texto ou audio, Enviar documentos em PDF/DOCX ou imagem para an√°lise.

Exemplo de estrutura:
[Emoji] [Sauda√ß√£o personalizada] ${text}, [Chat LawX]!
Sou teu assistente jur√≠dico especializado
[Emoji] [Funcionalidades dispon√≠veis]
Fazer uma pergunta formal desejando o que deseja fazer hoje.`;

        const welcomeMsg = await this.aiService.executeCustomPrompt(
          welcomePrompt,
          'gpt-3.5-turbo',
          'Voc√™ √© um especialista em criar mensagens de boas-vindas personalizadas para assistentes jur√≠dicos. Seja profissional e √∫til.',
          0.7,
          300
        );
        
        // Enviar mensagem de boas-vindas personalizada
        await this.sendMessageWithTyping(phone, welcomeMsg, 2000);
        
        // Limpar estado da conversa
        this.clearConversationState(phone);
        
        this.logger.log(`‚úÖ Usu√°rio ${jurisdiction.jurisdiction} ${phone} iniciou sess√£o com nome: ${text}`);
        return;
      }

      // Primeira mensagem - gerar boas-vindas personalizada com IA
      const welcomePrompt = `Gere uma mensagem de boas-vindas personalizada para o Chat LawX, um assistente jur√≠dico especializado.

Jurisdi√ß√£o: ${jurisdiction.jurisdiction === 'ES' ? 'Espanha' : 'Portugal'}
Idioma: ${jurisdiction.jurisdiction === 'ES' ? 'Espanhol' : 'Portugu√™s europeu'}

Requisitos:
- Deve mencionar obrigatoriamente "Chat LawX"
- Deve especificar que √© um assistente jur√≠dico
- Deve ser adequado para a jurisdi√ß√£o ${jurisdiction.jurisdiction}
- Tom amig√°vel e profissional
- M√°ximo 5 linhas
- Use emojis apropriados
- N√ÉO inclua pergunta sobre nome (ser√° enviada separadamente)

Exemplo de estrutura:
[Emoji] [Sauda√ß√£o] Chat LawX!
[Emoji] Sou teu assistente jur√≠dico especializado em [jurisdi√ß√£o].
[Emoji] [Mensagem de boas-vindas]`;

      const welcomeMsg = await this.aiService.executeCustomPrompt(
        welcomePrompt,
        'gpt-3.5-turbo',
        'Voc√™ √© um especialista em criar mensagens de boas-vindas para assistentes jur√≠dicos. Seja conciso e profissional.',
        0.7,
        300
      );

      // Segunda mensagem - pergunta sobre nome
      const nameQuestion = jurisdiction.jurisdiction === 'ES' 
        ? 'üìù ¬øCu√°l es tu nombre?'
        : 'üìù Qual √© o teu nome?';
      
      // Enviar primeira mensagem
      await this.sendMessageWithTyping(phone, welcomeMsg, 2000);
      
      // Aguardar 2 segundos antes de enviar a pergunta sobre nome
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Enviar segunda mensagem
      await this.sendMessageWithTyping(phone, nameQuestion, 1000);
      
      // Atualizar estado da conversa
      this.setConversationState(phone, {
        ...state,
        isWaitingForWhatsAppName: true
      });
      
    } catch (error) {
      this.logger.error('Erro no fluxo de boas-vindas WhatsApp:', error);
      const errorMessage = jurisdiction.jurisdiction === 'ES'
        ? '‚ùå Ocurri√≥ un error. Int√©ntalo de nuevo m√°s tarde.'
        : '‚ùå Ocorreu um erro. Tente novamente mais tarde.';
      await this.sendMessage(phone, errorMessage);
    }
  }

  /**
   * Manipula mensagem de boas-vindas para retorno (ES/PT)
   * Equivalente ao handleWelcomeBackMessage mas adaptado para ES/PT
   */
  private async handleWhatsAppWelcomeBackMessage(phone: string, session: any, jurisdiction: string): Promise<void> {
    try {
      let message = '';
      if (jurisdiction === 'ES') {
        message = `Bienvenido de nuevo ${session.name}, ¬øen qu√© puedo ayudarte?`;
      } else {
        message = `Bem-vindo novamente ${session.name}, em que posso ajud√°-lo?`;
      }
      
      await this.sendMessage(phone, message);
      
      // Atualizar lastMessageSent
      await this.updateWhatsAppLastMessageSent(phone, jurisdiction);
      
      this.logger.log(`üëã Mensagem de boas-vindas enviada para ${session.name} (${jurisdiction})`);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar mensagem de boas-vindas para ${phone}:`, error);
    }
  }

  private async createBrazilianUserSession(phone: string, name: string): Promise<any> {
    try {
      // Remove o DDI (55) e caracteres n√£o num√©ricos
      const cleanPhone = phone.replace(/\D/g, '');
      const phoneWithoutDDI = cleanPhone.startsWith('55') ? cleanPhone.substring(2) : cleanPhone;
      
      this.logger.log(`üìù Criando sess√£o brasileira: ${name} - ${phoneWithoutDDI}`);
      
      // Inserir na tabela atendimento_wpps
      const { data, error } = await this.supabaseService
        .getClient()
        .from('atendimento_wpps')
        .insert({
          name: name,
          number: phoneWithoutDDI
        })
        .select()
        .single();

      if (error) {
        throw error;
      }

      this.logger.log(`‚úÖ Sess√£o criada com sucesso: ${data.id}`);
      return data;
    } catch (error) {
      this.logger.error(`‚ùå Erro ao criar sess√£o brasileira ${phone}:`, error);
      throw error;
    }
  }

  private async handleBrazilianUserWelcome(
    phone: string, 
    text: string, 
    state: ConversationState
  ): Promise<void> {
    try {
      // Verificar se j√° est√° no fluxo de coleta de nome
      if (state.isWaitingForBrazilianName) {
        // Usu√°rio j√° enviou o nome
        if (text.length < 2) {
          await this.sendMessageWithTyping(phone, '‚ùå Por favor, informe um nome v√°lido com pelo menos 2 caracteres.', 1000);
          return;
        }

        // Criar sess√£o na tabela atendimento_wpps
        await this.createBrazilianUserSession(phone, text);
        
        // Mensagem de boas-vindas
        const response = `üéâ Ol√°, ${text}! Seja bem-vindo ao Chat LawX!\n\nüáßüá∑ Sou seu assistente jur√≠dico especializado em legisla√ß√£o brasileira.\n\nüí¨ Como posso ajud√°-lo hoje?\n\nVoc√™ pode:\n‚Ä¢ Fazer perguntas sobre direito\n‚Ä¢ Enviar documentos para an√°lise\n‚Ä¢ Solicitar orienta√ß√µes jur√≠dicas\n\nDigite "MENU" para ver todas as op√ß√µes dispon√≠veis.`;
        
        await this.sendMessageWithTyping(phone, response, 2000);
        
        // Limpar estado da conversa
        this.clearConversationState(phone);
        
        this.logger.log(`‚úÖ Usu√°rio brasileiro ${phone} iniciou sess√£o com nome: ${text}`);
        return;
      }

      // Primeira mensagem - enviar boas-vindas e solicitar nome
      const response = `üáßüá∑ Ol√°! Seja bem-vindo ao Chat LawX!\n\nSou seu assistente jur√≠dico especializado em legisla√ß√£o brasileira.\n\nPara personalizar seu atendimento, preciso saber seu nome.\n\nüìù Qual √© o seu nome completo?`;
      
      await this.sendMessageWithTyping(phone, response, 2000);
      
      // Atualizar estado da conversa
      this.setConversationState(phone, {
        ...state,
        isWaitingForBrazilianName: true
      });
      
    } catch (error) {
      this.logger.error('Erro no fluxo de boas-vindas brasileiro:', error);
      await this.sendMessage(phone, '‚ùå Ocorreu um erro. Tente novamente mais tarde.');
    }
  }

  private async processMessage(message: any): Promise<void> {
    try {
      if (!message.key?.remoteJid) {
        return;
      }
      
      const phone = message.key.remoteJid.replace('@s.whatsapp.net', '');
      const isFromMe = message.key.fromMe;
      
      if (isFromMe) {
        return;
      }

      // Detectar jurisdi√ß√£o baseada no n√∫mero de telefone
      let jurisdiction = this.jurisdictionService.detectJurisdiction(phone);
      
        // üß™ TESTE: Verificar se o n√∫mero est√° no array de teste para for√ßar fluxo ES
        if (this.testNumbersForESFlow.includes(phone)) {
          this.logger.log(`üß™ N√öMERO DE TESTE DETECTADO: ${phone} - For√ßando fluxo ES`);
          jurisdiction = {
            jurisdiction: 'ES',
            ddi: '34',
            country: 'Spain',
            isValid: true,
            config: jurisdiction.config, // Manter a configura√ß√£o original
            isForced: true // Marcar como for√ßada para evitar sobrescrita
          };
        }
      
      this.logger.log(`Jurisdi√ß√£o detectada: ${jurisdiction.jurisdiction} para ${phone}`);

      // Extrair texto da mensagem
      const text = message.message?.conversation || '';
      const state = this.getConversationState(phone);
      this.logger.log('üí¨ Estado da conversa:', JSON.stringify(state, null, 2));

      // Roteamento por jurisdi√ß√£o
      switch (jurisdiction.jurisdiction) {
        case 'BR':
          await this.processBrazilianMessage(message, phone, text, state, jurisdiction);
          break;
        case 'PT':
          await this.processPortugueseMessage(message, phone, text, state, jurisdiction);
          break;
        case 'ES':
          await this.processSpanishMessage(message, phone, text, state, jurisdiction);
          break;
        default:
          this.logger.warn(`Jurisdi√ß√£o n√£o suportada: ${jurisdiction.jurisdiction}`);
          await this.sendMessage(phone, 'Desculpe, sua jurisdi√ß√£o n√£o √© suportada no momento.');
      }
    } catch (error) {
      this.logger.error('Erro ao processar mensagem:', error);
    }
  }

  private async processBrazilianMessage(message: any, phone: string, text: string, state: ConversationState, jurisdiction: any): Promise<void> {
    try {
      this.logger.log('üáßüá∑ Processando mensagem de usu√°rio brasileiro...');
      
      // Buscar usu√°rio no Supabase (tabela profiles)
      const user = await this.usersService.getOrCreateUser(phone);
      
      // Verificar se usu√°rio n√£o est√° registrado
      if (!user || !user.is_registered) {
        await this.handleUnregisteredUser(phone, text, state, jurisdiction, true);
        return;
      }

      // Verificar se usu√°rio tem sess√£o ativa na tabela atendimento_wpps
      const sessionResult = await this.checkBrazilianUserSession(phone);
      
      if (!sessionResult.session) {
        // Usu√°rio n√£o tem sess√£o ativa - iniciar fluxo de boas-vindas
        await this.handleBrazilianUserWelcome(phone, text, state);
        return;
      }
      
      // Usu√°rio tem sess√£o ativa - verificar se precisa de mensagem de boas-vindas
      if (sessionResult.needsWelcomeBack) {
        // Usu√°rio tem sess√£o mas passou 1 hora - enviar mensagem de boas-vindas
        await this.handleWelcomeBackMessage(phone, sessionResult.session);
        // Continuar processamento normal ap√≥s mensagem
      } else {
        this.logger.log(`‚úÖ Usu√°rio brasileiro com sess√£o ativa: ${sessionResult.session.name}`);
      }
      
      // Atualizar last_message_sent para esta intera√ß√£o
      await this.updateLastMessageSent(phone);

      // PRIMEIRO: Verificar se est√° em an√°lise de documento
      if (state.isInAnalysis) {
        // Verificar timeout (10 minutos)
        if (this.checkAnalysisTimeout(state)) {
          await this.sendMessageWithTyping(phone, this.getAnalysisTimeoutMessage('BR'), 1500);
          this.setConversationState(phone, { ...state, isInAnalysis: false, analysisStartTime: undefined });
          return;
        }

        // Se est√° em an√°lise, processar confirma√ß√µes ou documentos
        if (await this.isConfirmationMessage(message, 'BR')) {
          await this.handleAnalysisConfirmation(message, phone, null, 'BR');
          return;
        }
        
        if (message.message?.documentMessage) {
          // Processar documento normalmente (mant√©m isInAnalysis = true)
          await this.handleDocumentMessage(message, null, phone);
          return;
        }
        
        // Para textos durante an√°lise: avisar que s√≥ aceita PDF/DOCX
        if (message.message?.textMessage) {
          await this.handleTextDuringAnalysis(phone, 'BR');
          return;
        }
        
        // Ignorar outras mensagens
        return;
      }

      // Processar por tipo de m√≠dia
      if (message.message?.imageMessage) {
        this.logger.log('üñºÔ∏è Processando imagem jur√≠dica (BR)');
        await this.handleImageMessage(message, user, phone);
        return;
      }

      if (message.message?.audioMessage) {
        this.logger.log('üéµ Processando √°udio jur√≠dico (BR)');
        await this.handleAudioMessage(message, user, phone);
        return;
      }

      if (message.message?.documentMessage) {
        this.logger.log('üìÑ Processando documento jur√≠dico (BR)');
        await this.handleDocumentMessage(message, user, phone, jurisdiction.jurisdiction);
        return;
      }

      // Processar texto - fluxo espec√≠fico para usu√°rios brasileiros registrados
      this.logger.log('üìù Processando texto jur√≠dico (BR)');
      await this.handleTextMessage(text, user, phone, state);
      
    } catch (error) {
      this.logger.error('Erro ao processar mensagem brasileira:', error);
      await this.sendMessage(phone, '‚ùå Ocorreu um erro ao processar sua mensagem. Tente novamente.');
    }
  }

  private async processPortugueseMessage(message: any, phone: string, text: string, state: ConversationState, jurisdiction: any): Promise<void> {
    try {
      this.logger.log('üáµüáπ Processando mensagem de usu√°rio portugu√™s...');
      
      // üîí PRESERVAR JURISDI√á√ÉO FOR√áADA: Se foi for√ßada para teste, manter durante todo o fluxo
      if (jurisdiction.isForced) {
        this.logger.log(`üîí Mantendo jurisdi√ß√£o for√ßada: ${jurisdiction.jurisdiction} para ${phone}`);
      }

      // ‚úÖ PRIMEIRO: Verificar se est√° no fluxo de coleta de nome
      if (state.isWaitingForWhatsAppName) {
        await this.handleWhatsAppUserWelcome(phone, text, state, jurisdiction);
        return;
      }

      // Buscar ou criar usu√°rio local com jurisdi√ß√£o for√ßada
      const user = await this.usersService.getOrCreateUser(phone, jurisdiction.jurisdiction);
      
      // Verificar se usu√°rio n√£o est√° registrado
      if (!user || !user.is_registered) {
        await this.handleUnregisteredUser(phone, text, state, jurisdiction, false);
        return;
      }

      // ‚úÖ NOVO: Verificar se usu√°rio tem sess√£o ativa na tabela whatsapp_sessions
      const sessionResult = await this.checkWhatsAppSession(phone, jurisdiction.jurisdiction);
      
      if (!sessionResult.session) {
        // Usu√°rio n√£o tem sess√£o ativa - iniciar fluxo de boas-vindas
        await this.handleWhatsAppUserWelcome(phone, text, state, jurisdiction);
        return;
      }
      
      // ‚úÖ NOVO: Usu√°rio tem sess√£o ativa - verificar se precisa de mensagem de boas-vindas
      if (sessionResult.needsWelcomeBack) {
        // Usu√°rio tem sess√£o mas passou 1 hora - enviar mensagem de boas-vindas
        await this.handleWhatsAppWelcomeBackMessage(phone, sessionResult.session, jurisdiction.jurisdiction);
        // Continuar processamento normal ap√≥s mensagem
      } else {
        this.logger.log(`‚úÖ Usu√°rio portugu√™s com sess√£o ativa: ${sessionResult.session.name}`);
      }
      
      // ‚úÖ NOVO: Atualizar lastMessageSent para esta intera√ß√£o
      await this.updateWhatsAppLastMessageSent(phone, jurisdiction.jurisdiction);

      // PRIMEIRO: Verificar se est√° em an√°lise de documento
      if (state.isInAnalysis) {
        // Verificar timeout (10 minutos)
        if (this.checkAnalysisTimeout(state)) {
          await this.sendMessageWithTyping(phone, this.getAnalysisTimeoutMessage('PT'), 1500);
          this.setConversationState(phone, { ...state, isInAnalysis: false, analysisStartTime: undefined });
          return;
        }

        // Se est√° em an√°lise, processar confirma√ß√µes ou documentos
        if (await this.isConfirmationMessage(message, 'PT')) {
          await this.handleAnalysisConfirmation(message, phone, null, 'PT');
          return;
        }
        
        if (message.message?.documentMessage) {
          // Processar documento normalmente (mant√©m isInAnalysis = true)
          await this.handleDocumentMessage(message, null, phone);
          return;
        }
        
        // Para textos durante an√°lise: avisar que s√≥ aceita PDF/DOCX
        if (message.message?.textMessage) {
          await this.handleTextDuringAnalysis(phone, 'PT');
          return;
        }
        
        // Ignorar outras mensagens
        return;
      }

      // Processar por tipo de m√≠dia
      if (message.message?.imageMessage) {
        this.logger.log('üñºÔ∏è Processando imagem jur√≠dica (PT)');
        await this.handleImageMessage(message, user, phone);
        return;
      }

      if (message.message?.audioMessage) {
        this.logger.log('üéµ Processando √°udio jur√≠dico (PT)');
        await this.handleAudioMessage(message, user, phone, jurisdiction.jurisdiction);
        return;
      }

      if (message.message?.documentMessage) {
        this.logger.log('üìÑ Processando documento jur√≠dico (PT)');
        await this.handleDocumentMessage(message, user, phone, jurisdiction.jurisdiction);
        return;
      }

      // Processar texto
      this.logger.log('üìù Processando texto jur√≠dico (PT)');
      await this.handleTextMessage(text, user, phone, state, jurisdiction.jurisdiction);

    } catch (error) {
      this.logger.error('Erro ao processar mensagem portuguesa:', error);
      await this.sendMessage(phone, '‚ùå Ocorreu um erro ao processar sua mensagem. Tente novamente.');
    }
  }

  private async processSpanishMessage(message: any, phone: string, text: string, state: ConversationState, jurisdiction: any): Promise<void> {
    try {
      this.logger.log('üá™üá∏ Processando mensagem de usu√°rio espanhol...');
      
      // üîí PRESERVAR JURISDI√á√ÉO FOR√áADA: Se foi for√ßada para teste, manter durante todo o fluxo
      if (jurisdiction.isForced) {
        this.logger.log(`üîí Mantendo jurisdi√ß√£o for√ßada: ${jurisdiction.jurisdiction} para ${phone}`);
      }

      // ‚úÖ PRIMEIRO: Verificar se est√° no fluxo de coleta de nome
      if (state.isWaitingForWhatsAppName) {
        await this.handleWhatsAppUserWelcome(phone, text, state, jurisdiction);
        return;
      }

      // Buscar ou criar usu√°rio local com jurisdi√ß√£o for√ßada
      const user = await this.usersService.getOrCreateUser(phone, jurisdiction.jurisdiction);
      
      // Verificar se usu√°rio n√£o est√° registrado
      if (!user || !user.is_registered) {
        await this.handleUnregisteredUser(phone, text, state, jurisdiction, false);
        return;
      }

      // ‚úÖ NOVO: Verificar se usu√°rio tem sess√£o ativa na tabela whatsapp_sessions
      const sessionResult = await this.checkWhatsAppSession(phone, jurisdiction.jurisdiction);
      
      if (!sessionResult.session) {
        // Usu√°rio n√£o tem sess√£o ativa - iniciar fluxo de boas-vindas
        await this.handleWhatsAppUserWelcome(phone, text, state, jurisdiction);
        return;
      }
      
      // ‚úÖ NOVO: Usu√°rio tem sess√£o ativa - verificar se precisa de mensagem de boas-vindas
      if (sessionResult.needsWelcomeBack) {
        // Usu√°rio tem sess√£o mas passou 1 hora - enviar mensagem de boas-vindas
        await this.handleWhatsAppWelcomeBackMessage(phone, sessionResult.session, jurisdiction.jurisdiction);
        // Continuar processamento normal ap√≥s mensagem
      } else {
        this.logger.log(`‚úÖ Usu√°rio espanhol com sess√£o ativa: ${sessionResult.session.name}`);
      }
      
      // ‚úÖ NOVO: Atualizar lastMessageSent para esta intera√ß√£o
      await this.updateWhatsAppLastMessageSent(phone, jurisdiction.jurisdiction);

      // PRIMEIRO: Verificar se est√° em an√°lise de documento
      if (state.isInAnalysis) {
        // Verificar timeout (10 minutos)
        if (this.checkAnalysisTimeout(state)) {
          await this.sendMessageWithTyping(phone, this.getAnalysisTimeoutMessage('ES'), 1500);
          this.setConversationState(phone, { ...state, isInAnalysis: false, analysisStartTime: undefined });
          return;
        }

        // Se est√° em an√°lise, processar confirma√ß√µes ou documentos
        if (await this.isConfirmationMessage(message, 'ES')) {
          await this.handleAnalysisConfirmation(message, phone, null, 'ES');
          return;
        }
        
        if (message.message?.documentMessage) {
          // Processar documento normalmente (mant√©m isInAnalysis = true)
          await this.handleDocumentMessage(message, null, phone);
          return;
        }
        
        // Para textos durante an√°lise: avisar que s√≥ aceita PDF/DOCX
        if (message.message?.textMessage) {
          await this.handleTextDuringAnalysis(phone, 'ES');
          return;
        }
        
        // Ignorar outras mensagens
        return;
      }

      // Processar por tipo de m√≠dia
      if (message.message?.imageMessage) {
        this.logger.log('üñºÔ∏è Processando imagem jur√≠dica (ES)');
        await this.handleImageMessage(message, user, phone);
        return;
      }

      if (message.message?.audioMessage) {
        this.logger.log('üéµ Processando √°udio jur√≠dico (ES)');
        await this.handleAudioMessage(message, user, phone, jurisdiction.jurisdiction);
        return;
      }

      if (message.message?.documentMessage) {
        this.logger.log('üìÑ Processando documento jur√≠dico (ES)');
        await this.handleDocumentMessage(message, user, phone, jurisdiction.jurisdiction);
        return;
      }

      // Processar texto
      this.logger.log('üìù Processando texto jur√≠dico (ES)');
      await this.handleTextMessage(text, user, phone, state, jurisdiction.jurisdiction);

    } catch (error) {
      this.logger.error('Erro ao processar mensagem espanhola:', error);
      await this.sendMessage(phone, '‚ùå Ocorreu un error al procesar tu mensaje. Int√©ntalo de nuevo.');
    }
  }

  private async handleImageMessage(message: any, user: User | null, phone: string): Promise<void> {
    try {
      this.logger.log('üì∏ Processando mensagem de imagem jur√≠dica...');
      
      // Download da imagem
      const imageBuffer = await this.downloadImage(message);
      if (!imageBuffer) {
        await this.sendMessage(phone, '‚ùå N√£o consegui baixar a imagem. Tente novamente.');
        return;
      }

      await this.sendMessageWithTyping(phone, 'üîç Estou analisando o documento jur√≠dico...', 2000);
      
      // Detectar jurisdi√ß√£o
      const jurisdiction = this.jurisdictionService.detectJurisdiction(phone);
      
      // Analisar documento jur√≠dico
      const analysis = await this.aiService.analyzeLegalDocument(
        imageBuffer,
        jurisdiction.jurisdiction,
        user?.id
      );
      
      // Salvar documento no banco de dados apropriado
      await this.saveLegalDocument(analysis, jurisdiction.jurisdiction, user?.id);
      
      // Enviar resposta com an√°lise
      const response = `üìã **An√°lise do Documento Jur√≠dico**\n\n` +
        `**Tipo:** ${analysis.type}\n\n` +
        `**An√°lise:**\n${analysis.analysis}\n\n` +
        `**Riscos Identificados:**\n${analysis.risks.map(risk => `‚Ä¢ ${risk}`).join('\n')}\n\n` +
        `**Sugest√µes:**\n${analysis.suggestions.map(suggestion => `‚Ä¢ ${suggestion}`).join('\n')}\n\n` +
        `‚ö†Ô∏è *Esta an√°lise √© informativa. Para casos espec√≠ficos, consulte um advogado.*`;
      
      await this.sendMessage(phone, response);
      
    } catch (error) {
      this.logger.error('Erro ao processar imagem jur√≠dica:', error);
      await this.sendMessage(phone, '‚ùå Erro ao analisar o documento. Tente novamente ou envie uma imagem mais clara.');
    }
  }

  private async handleTextMessage(text: string, user: User | null, phone: string, state: ConversationState, forcedJurisdiction?: string): Promise<void> {
    try {
      this.logger.log('üìù Processando mensagem de texto jur√≠dica:', text);

      // 0. Verificar se √© comando "menu"
      if (text.toLowerCase().trim() === 'menu') {
        await this.showLegalMenu(phone, forcedJurisdiction || 'BR');
        return;
      }

      // 1. Verificar se h√° sess√£o de upgrade ativa ou estado de upgrade
      if (user) {
        const activeSession = await this.upgradeSessionsService.getActiveSession(user.id);
        if (activeSession || state.isInUpgradeFlow) {
          this.logger.log('üîÑ Sess√£o de upgrade ativa, processando com IA...');
          await this.processUpgradeFlowWithAI(phone, user.id, text, activeSession, state);
          return;
        }

        // 2. Verificar se √© uma nova inten√ß√£o de upgrade
        const upgradeIntent = await this.detectUpgradeIntent(text, user.id);
        if (upgradeIntent.isUpgradeIntent) {
          this.logger.log('üÜï Nova inten√ß√£o de upgrade detectada:', upgradeIntent);
          await this.handleUpgradeFlow(phone, user.id, text);
          return;
        }
      }

      // 3. Processar consulta jur√≠dica
      await this.handleLegalConsultation(text, phone, user, forcedJurisdiction);

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar mensagem de texto:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sua mensagem. Tente novamente.');
    }
  }
  
  private async handleAudioMessage(message: any, user: User, phone: string, forcedJurisdiction?: string): Promise<void> {
    try {
      this.logger.log('üéµ Processando mensagem de √°udio...');

      this.logger.log('üéµ Mensagem de √°udio tipo:', JSON.stringify(message.message?.base64, null, 2));
      // Enviar mensagem de processamento
      await this.sendMessageWithTyping(phone, 'üéµ Processando seu √°udio... Aguarde um momento.', 2000);
      
      let audioBuffer: Buffer | null = null;

      if(message.message?.base64) {
        audioBuffer = await this.processAudioBase64(message);
      if (!audioBuffer) {
        await this.sendMessage(phone, '‚ùå N√£o consegui processar o √°udio. Tente novamente.');
        return;
        }
      } else if(message.audioMessage) {
        audioBuffer = await this.processAudioViaEvolutionAPI(message);
        if (!audioBuffer) {
          await this.sendMessage(phone, '‚ùå N√£o consegui processar o √°udio. Tente novamente.');
          return;
        }
      }

      // Upload do √°udio para Supabase Storage
      const audioUrl = await this.uploadService.uploadAudioFile(audioBuffer, 'audio.mp3');
      
      // Processar √°udio para consulta jur√≠dica
      const transcribedText = await this.aiService.processAudioForLegalConsultation(audioBuffer);
      
      // Usar jurisdi√ß√£o for√ßada se fornecida, sen√£o detectar
      const jurisdiction = forcedJurisdiction 
        ? { jurisdiction: forcedJurisdiction }
        : this.jurisdictionService.detectJurisdiction(phone);
      
      // Gerar resposta jur√≠dica
      const response = await this.aiService.generateLegalResponse(
        transcribedText,
        phone,
        user?.id,
        undefined, // Sem conte√∫do de documento
        forcedJurisdiction // Passar jurisdi√ß√£o for√ßada
      );
      
      await this.sendMessage(phone, response);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar √°udio:', error);
      
      // Verificar se √© erro de limite atingido (PRIORIDADE M√ÅXIMA)
      if (error.message && error.message.includes('Limite de mensagens atingido')) {
        await this.handleLimitReachedMessage(phone, user, error.message, forcedJurisdiction);
        return;
      }
      
      // Verificar se √© erro de valida√ß√£o espec√≠fico
      if (error.message.includes('√Åudio n√£o cont√©m lan√ßamento financeiro:')) {
        await this.sendMessage(phone, `‚ùå ${error.message}\n\nüéµ **Envie um √°udio v√°lido:**\n‚Ä¢ "Aluguel 2000"\n‚Ä¢ "Supermercado 150"\n‚Ä¢ "Sal√°rio 5000"\n‚Ä¢ "Freelance 800"\n\nFale claramente o valor e a descri√ß√£o do lan√ßamento.`);
        return;
      }
      
      // Verificar se √© erro de formato de √°udio
      if (error.message.includes('Invalid file format') || error.message.includes('formato')) {
        await this.sendMessage(phone, `‚ùå **Problema com o formato do √°udio**\n\nüéµ **Solu√ß√£o:**\n‚Ä¢ Envie um √°udio mais curto (m√°ximo 30 segundos)\n‚Ä¢ Fale mais claramente\n‚Ä¢ Evite ru√≠dos de fundo\n‚Ä¢ Tente novamente em alguns segundos\n\n**Exemplo:** "Aluguel 2000"`);
        return;
      }
      
      // Verificar se √© erro de transcri√ß√£o
      if (error.message.includes('transcri√ß√£o') || error.message.includes('transcription')) {
        await this.sendMessage(phone, `‚ùå **Erro na transcri√ß√£o do √°udio**\n\nüéµ **Dicas:**\n‚Ä¢ Fale mais devagar e claramente\n‚Ä¢ Evite ru√≠dos de fundo\n‚Ä¢ Use frases simples como "Aluguel 2000"\n‚Ä¢ Tente novamente`);
        return;
      }
      
      await this.sendMessage(phone, '‚ùå Erro ao processar o √°udio. Tente novamente ou fale mais claramente.');
    }
  }

  private async handleDocumentMessage(message: any, user: User | null, phone: string, forcedJurisdiction?: string): Promise<void> {
    try {
      this.logger.log('üìÑ Processando mensagem de documento jur√≠dico...');
      
      // ‚úÖ NOVO: Verificar limite de an√°lise de documentos ANTES de processar
      if (user?.id) {
        const usageCheck = await this.usageService.checkLimits(user.id, 'document_analysis', phone);
        
        if (!usageCheck.allowed) {
          this.logger.warn(`üö´ Limite de an√°lise de documentos atingido para usu√°rio ${user.id}`);
          await this.handleLimitReachedMessage(phone, user, usageCheck.message, forcedJurisdiction);
          return;
        }
      }
      
      // Definir estado de an√°lise
      const conversationState = this.getConversationState(phone);
      this.setConversationState(phone, {
        ...conversationState,
        isInAnalysis: true,
        analysisStartTime: Date.now(),
        jurisdiction: forcedJurisdiction // ‚úÖ NOVO: Armazenar jurisdi√ß√£o for√ßada no estado
      });
      
      // Extrair base64 da mensagem
      const base64Data = this.extractBase64FromDocumentMessage(message);
      if (!base64Data) {
        const errorMsg = this.getLocalizedErrorMessage('extract_document_failed', forcedJurisdiction);
        await this.sendMessage(phone, errorMsg);
        return;
      }

      // Converter base64 para buffer
      const documentBuffer = await this.convertBase64ToFile(base64Data, 'unknown');

      // Verificar tamanho do arquivo (limite 20MB)
      const fileSizeMB = documentBuffer.length / (1024 * 1024);
      if (fileSizeMB > 20) {
        const errorMsg = this.getLocalizedErrorMessage('file_too_large', forcedJurisdiction);
        await this.sendMessage(phone, errorMsg);
        return;
      }

      // Detectar tipo de documento
      const mimeType = this.detectDocumentType(documentBuffer);
      if (!this.isSupportedDocumentType(mimeType)) {
        const errorMsg = this.getLocalizedErrorMessage('unsupported_file_type', forcedJurisdiction);
        await this.sendMessage(phone, errorMsg);
        return;
      }

      const analyzingMsg = this.getLocalizedMessage('analyzing_document', forcedJurisdiction);
      await this.sendMessageWithTyping(phone, analyzingMsg, 2000);

      // Gerar nome do arquivo
      const fileName = this.generateDocumentFileName(mimeType);

      // Upload para Supabase Storage
      const fileUrl = await this.uploadService.uploadDocumentFile(documentBuffer, fileName);

      // ‚úÖ NOVO: Enviar para endpoint de an√°lise com jurisdi√ß√£o
      const analysis = await this.analyzeDocumentWithExternalAPI(fileUrl, forcedJurisdiction);

      // ‚úÖ NOVO: Formatar an√°lise com localiza√ß√£o por jurisdi√ß√£o
      const formattedAnalysis = this.formatDocumentAnalysisForUser(analysis, forcedJurisdiction);

      // Enviar resposta para usu√°rio
      await this.sendMessageWithTyping(phone, formattedAnalysis, 1500);
      
      // ‚úÖ NOVO: Incrementar contador de an√°lise de documentos
      if (user?.id) {
        await this.usageService.incrementUsage(user.id, 'document_analysis', phone);
      }
      
      // Perguntar se deseja analisar outro documento
      const anotherDocMsg = this.getLocalizedMessage('analyze_another_document', forcedJurisdiction);
      await this.sendMessageWithTyping(phone, anotherDocMsg, 1000);

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar documento:', error);
      
      // Verificar se √© erro de limite atingido (PRIORIDADE M√ÅXIMA)
      if (error.message && error.message.includes('Limite de mensagens atingido')) {
        await this.handleLimitReachedMessage(phone, user, error.message, forcedJurisdiction);
        return;
      }
      
      // Manter estado de an√°lise e solicitar reenvio
      const retryMsg = this.getLocalizedErrorMessage('document_analysis_failed', forcedJurisdiction);
      await this.sendMessage(phone, retryMsg);
    }
  }

  private async saveLegalDocument(
    analysis: any,
    jurisdiction: string,
    userId?: string
  ): Promise<void> {
    try {
      if (jurisdiction === 'BR') {
        // Para Brasil - salvar no Supabase (via teams service)
        // TODO: Implementar salvamento de documento jur√≠dico no Supabase
        // await this.teamsService.saveLegalDocument({
        //   userId: userId || '',
        //   type: analysis.type,
        //   content: analysis.analysis,
        //   analysis: analysis.analysis,
        //   jurisdiction,
        // });
      } else {
        // Para Portugal/Espanha - salvar no MySQL local
        // TODO: Implementar salvamento de documento jur√≠dico no MySQL
        // await this.prismaService.createLegalDocument({
        //   userId: userId || '',
        //   type: analysis.type,
        //   content: analysis.analysis,
        //   analysis: analysis.analysis,
        //   jurisdiction,
        // });
      }
    } catch (error) {
      this.logger.error('Erro ao salvar documento jur√≠dico:', error);
      // N√£o lan√ßar erro para n√£o interromper o fluxo
    }
  }

  private async handleLegalConsultation(text: string, phone: string, user: User | null, forcedJurisdiction?: string): Promise<void> {
    try {
      // Usar jurisdi√ß√£o for√ßada se fornecida, sen√£o detectar
      const jurisdiction = forcedJurisdiction 
        ? { jurisdiction: forcedJurisdiction }
        : this.jurisdictionService.detectJurisdiction(phone);
      
      // Gerar resposta jur√≠dica
      const response = await this.aiService.generateLegalResponse(
        text,
        phone,
        user?.id,
        undefined, // Sem conte√∫do de documento
        forcedJurisdiction // Passar jurisdi√ß√£o for√ßada
      );
      
      await this.sendMessageWithTyping(phone, response, 2000);
      
    } catch (error) {
      this.logger.error('Erro ao processar consulta jur√≠dica:', error);
      
      // Verificar se √© erro de limite atingido
      if (error.message && error.message.includes('Limite de mensagens atingido')) {
        await this.handleLimitReachedMessage(phone, user, error.message, forcedJurisdiction);
      } else {
        await this.sendMessage(phone, '‚ùå Erro ao processar sua consulta jur√≠dica. Tente novamente.');
      }
    }
  }

  private async handleLimitReachedMessage(phone: string, user: User | null, errorMessage: string, forcedJurisdiction?: string): Promise<void> {
    try {
      // Usar jurisdi√ß√£o for√ßada se fornecida, sen√£o detectar
      const jurisdiction = forcedJurisdiction 
        ? { jurisdiction: forcedJurisdiction }
        : this.jurisdictionService.detectJurisdiction(phone);
      
      if (jurisdiction.jurisdiction === 'BR') {
        // Mensagem espec√≠fica para usu√°rios brasileiros
        const response = `üö´ **Limite de mensagens atingido!**\n\n` +
          `Voc√™ utilizou todas as suas mensagens dispon√≠veis.\n\n` +
          `üí° **Op√ß√µes dispon√≠veis:**\n` +
          `‚Ä¢ Entre em contato com seu administrador para aumentar o limite\n` +
          `‚Ä¢ Aguarde o pr√≥ximo per√≠odo de renova√ß√£o\n\n` +
          `üìû **Suporte:** Entre em contato conosco para mais informa√ß√µes.`;
        
        await this.sendMessage(phone, response);
      } else {
        // Para PT/ES - usar mensagem localizada com IA
        try {
          // Extrair informa√ß√µes do erro para personalizar a mensagem
          const usageMatch = errorMessage.match(/(\d+) de (\d+)/);
          const currentUsage = usageMatch ? parseInt(usageMatch[1]) : 0;
          const limit = usageMatch ? parseInt(usageMatch[2]) : 0;
          
          const localizedMessage = await this.generateLimitExceededMessage(
            jurisdiction.jurisdiction, 
            currentUsage, 
            limit
          );
          
          await this.sendMessage(phone, localizedMessage);
        } catch (aiError) {
          this.logger.error('Erro ao gerar mensagem localizada:', aiError);
          
          // Fallback para mensagem est√°tica
          const response = `üö´ **Limite de mensagens atingido!**\n\n` +
            `Voc√™ utilizou todas as suas mensagens dispon√≠veis.\n\n` +
            `üí° **Que tal fazer um upgrade?**\n` +
            `‚Ä¢ Acesse planos premium com mensagens ilimitadas\n` +
            `‚Ä¢ Recursos avan√ßados de an√°lise jur√≠dica\n` +
            `‚Ä¢ Suporte priorit√°rio\n\n` +
            `üîÑ Digite "UPGRADE" para ver os planos dispon√≠veis ou "MENU" para outras op√ß√µes.`;
          
          await this.sendMessage(phone, response);
        }
      }
      
    } catch (error) {
      this.logger.error('Erro ao processar mensagem de limite:', error);
      await this.sendMessage(phone, '‚ùå Limite atingido. Entre em contato para mais informa√ß√µes.');
    }
  }

  /**
   * Mostra menu jur√≠dico localizado
   */
  private async showLegalMenu(phone: string, jurisdiction: string): Promise<void> {
    try {
      // ‚úÖ NOVO: Gerar menu localizado com IA
      const menuPrompt = `Gere uma mensagem de menu jur√≠dico para o Chat LawX, um assistente jur√≠dico especializado.

Jurisdi√ß√£o: ${jurisdiction === 'ES' ? 'Espanha' : jurisdiction === 'PT' ? 'Portugal' : 'Brasil'}
Idioma: ${jurisdiction === 'ES' ? 'Espanhol' : jurisdiction === 'PT' ? 'Portugu√™s europeu' : 'Portugu√™s brasileiro'}

Use obrigatoriamente no idioma ${jurisdiction === 'ES' ? 'Espanhol' : jurisdiction === 'PT' ? 'Portugu√™s europeu' : 'Portugu√™s brasileiro'} para responder.

Requisitos:
- Deve mencionar obrigatoriamente "Chat LawX"
- Deve especificar que √© um assistente jur√≠dico
- Tom profissional e √∫til
- M√°ximo 8 linhas
- Use emojis apropriados apenas na primeira linha
- Funcionalidades: Enviar documentos jur√≠dicos, Fazer consultas jur√≠dicas por texto ou audio.
- Incluir instru√ß√µes de uso: Digite pergunta jur√≠dica, Envie foto/documento para an√°lise
- Aviso: Este √© um Assistente informativo, caso precise de uma consulta jur√≠dica espec√≠fica, consulte um advogado.

Estrutura:
[Emoji] *[Chat LawX - Menu Jur√≠dico]*
*Funcionalidades Dispon√≠veis:*
[Lista de funcionalidades]
*Como usar:*
‚Ä¢ [Instru√ß√µes]
*Aviso sobre consulta a advogado*`;

      const localizedMenu = await this.aiService.executeCustomPrompt(
        menuPrompt,
        'gpt-3.5-turbo',
        'Voc√™ √© um especialista em criar menus jur√≠dicos localizados para assistentes jur√≠dicos. Seja profissional e √∫til.',
        0.7
      );
      
      await this.sendMessageWithTyping(phone, localizedMenu, 1500);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao gerar menu localizado:`, error);
      
      // Fallback para menu padr√£o em portugu√™s brasileiro
      const fallbackMenu = `‚öñÔ∏è **Chat LawX - Menu Jur√≠dico**\n\n` +
        `üìã **Funcionalidades Dispon√≠veis:**\n` +
        `‚Ä¢ Envie documentos jur√≠dicos (contratos, peti√ß√µes, etc.)\n` +
        `‚Ä¢ Fa√ßa consultas jur√≠dicas por texto\n` +
        `‚Ä¢ An√°lise de riscos em documentos\n` +
        `‚Ä¢ Sugest√µes de cl√°usulas contratuais\n` +
        `üí° **Como usar:**\n` +
        `‚Ä¢ Digite sua pergunta jur√≠dica\n` +
        `‚Ä¢ Envie foto de documento para an√°lise\n` +
        `‚ö†Ô∏è *Lembre-se: Este √© um assistente informativo. Para casos espec√≠ficos, consulte um advogado.*`;
      
      await this.sendMessageWithTyping(phone, fallbackMenu, 1500);
    }
  }

  private async detectUpgradeIntent(text: string, userId: string): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      this.logger.log('üîÑ Detectando intent de upgrade com IA:', text);
      
      // Verificar se h√° sess√£o ativa primeiro
      const activeSession = await this.upgradeSessionsService.getActiveSession(userId);
      const state = this.getConversationState(userId.replace('@s.whatsapp.net', ''));
      
      // Se h√° sess√£o ativa ou estado de upgrade, analisar no contexto
      if (activeSession || state.isInUpgradeFlow) {
        this.logger.log('üîÑ Sess√£o ativa encontrada, analisando contexto...');
        return await this.analyzeUpgradeContext(text, activeSession, state);
      }
      
      // Se n√£o h√° sess√£o, verificar se √© um novo intent de upgrade
      const newUpgradeIntent = await this.detectNewUpgradeIntent(text);
      if (newUpgradeIntent.isUpgradeIntent) {
        this.logger.log('üÜï Novo intent de upgrade detectado:', newUpgradeIntent);
        return newUpgradeIntent;
      }
      
      return {
        isUpgradeIntent: false,
        confidence: 0,
        intent: 'new_upgrade'
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar intent de upgrade:', error);
      return {
        isUpgradeIntent: false,
        confidence: 0,
        intent: 'new_upgrade'
      };
    }
  }

  private async analyzeUpgradeContext(text: string, session: any, state: any): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      this.logger.log('üß† Analisando contexto de upgrade com IA...');
      
      const context = {
        currentStep: session?.current_step || state.upgradeStep,
        selectedPlan: session?.plan_name || state.selectedPlan,
        selectedFrequency: session?.billing_cycle || state.selectedFrequency,
        amount: session?.amount || 0,
        sessionId: session?.id
      };
      
      this.logger.log('üìã Contexto atual:', context);
      
      // Usar IA para analisar a inten√ß√£o no contexto
      const aiAnalysis = await this.aiService.analyzePlanUpgradeIntent(text, context);
      
      this.logger.log('ü§ñ An√°lise da IA:', aiAnalysis);
      
      return {
        isUpgradeIntent: true,
        confidence: aiAnalysis.confidence,
        intent: aiAnalysis.intent,
        context: context
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao analisar contexto:', error);
      // Fallback para detec√ß√£o manual
      return await this.fallbackUpgradeIntentDetection(text, session, state, 'BR'); // Default para BR
    }
  }

  private async detectNewUpgradeIntent(text: string): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      this.logger.log('üÜï Detectando novo intent de upgrade...');
      
      const newUpgradeIntent = await this.aiService.detectNewPlanUpgradeIntent(text);
      
      this.logger.log('ü§ñ Novo intent detectado:', newUpgradeIntent);
      
      return {
        isUpgradeIntent: newUpgradeIntent.isUpgradeIntent,
        confidence: newUpgradeIntent.confidence,
        intent: 'new_upgrade',
        context: { isNewIntent: true }
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar novo intent:', error);
      return {
        isUpgradeIntent: false,
        confidence: 0,
        intent: 'new_upgrade'
      };
    }
  }

  private async fallbackUpgradeIntentDetection(text: string, session: any, state: any, jurisdiction: string): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      // Usar IA para detectar confirma√ß√£o/nega√ß√£o
      const detection = await this.aiService.detectConfirmationOrDenial(text, jurisdiction);
      
      // Detec√ß√£o de cancelamento
      if (detection.isDenial && detection.confidence > 0.7) {
        return {
          isUpgradeIntent: true,
          confidence: detection.confidence,
          intent: 'cancel_upgrade',
          context: { session, state }
        };
      }
      
      // Detec√ß√£o de confirma√ß√£o de pagamento
      if (detection.isConfirmation && detection.confidence > 0.7) {
        return {
          isUpgradeIntent: true,
          confidence: detection.confidence,
          intent: 'payment_confirmation',
          context: { session, state }
        };
      }
    } catch (error) {
      this.logger.error('‚ùå Erro ao usar IA para detec√ß√£o de upgrade, usando fallback:', error);
    }
    
    // Fallback para detec√ß√£o simples
    const lowerText = text.toLowerCase();
    
    // Detec√ß√£o de cancelamento
    if (lowerText.includes('cancelar') || lowerText.includes('cancel') || 
        lowerText.includes('n√£o') || lowerText.includes('nao') || 
        lowerText.includes('desistir') || lowerText.includes('parar')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.8,
        intent: 'cancel_upgrade',
        context: { session, state }
      };
    }
    
    // Detec√ß√£o de confirma√ß√£o de pagamento
    if (lowerText.includes('sim') || lowerText.includes('ok') || 
        lowerText.includes('pode ser') || lowerText.includes('vamos') ||
        lowerText.includes('pagar') || lowerText.includes('prosseguir')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.7,
        intent: 'payment_confirmation',
        context: { session, state }
      };
    }
    
    // Detec√ß√£o de sele√ß√£o de frequ√™ncia
    if (lowerText.includes('mensal') || lowerText.includes('anual') || 
        lowerText.includes('monthly') || lowerText.includes('yearly') ||
        lowerText.includes('m√™s') || lowerText.includes('ano')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.8,
        intent: 'frequency_selection',
        context: { session, state }
      };
    }
    
    // Detec√ß√£o de sele√ß√£o de plano
    if (lowerText.includes('pro') || lowerText.includes('premium') || 
        lowerText.includes('b√°sico') || lowerText.includes('basico')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.8,
        intent: 'plan_selection',
        context: { session, state }
      };
    }
    
    return {
      isUpgradeIntent: false,
      confidence: 0,
      intent: 'new_upgrade'
    };
  }

  private async downloadImage(messageData: any): Promise<Buffer> {
    try {
      const imageUrl = messageData.message?.imageMessage?.url;
      
      // Primeira tentativa: usar a API de m√≠dia do WhatsApp (base64)
      try {
        return await this.downloadFromWhatsAppMedia(messageData);
      } catch (mediaError) {
        console.log('üì• Falha na API de m√≠dia (base64), tentando fallback:', mediaError.message);
      }

      // Segunda tentativa: usar o mesmo endpoint como fallback
      try {
        return await this.downloadFromMessagesAPI(messageData);
      } catch (fallbackError) {
        console.log('üì• Falha no fallback (base64), tentando download direto:', fallbackError.message);
      }

      // Terceira tentativa: download direto com headers espec√≠ficos (se tiver URL)
      if (!imageUrl) {
        throw new Error('URL da imagem n√£o encontrada para download direto');
      }

      const headers = {
        'User-Agent': 'WhatsApp/2.23.24.78 A',
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'image',
        'Sec-Fetch-Mode': 'no-cors',
        'Sec-Fetch-Site': 'cross-site',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Referer': 'https://web.whatsapp.com/',
      };
      
      // Primeira tentativa: seguir redirecionamentos
      let response;
      try {
        response = await axios.get(imageUrl, { 
          responseType: 'arraybuffer',
          headers,
          timeout: 30000,
          maxRedirects: 10,
          validateStatus: (status) => status < 400,
        });
      } catch (redirectError) {
        // Segunda tentativa: sem seguir redirecionamentos
        response = await axios.get(imageUrl, { 
          responseType: 'arraybuffer',
          headers,
          timeout: 30000,
          maxRedirects: 0,
          validateStatus: (status) => status < 400,
        });
      }

      const buffer = Buffer.from(response.data);

      // Verificar se o buffer tem conte√∫do
      if (buffer.length === 0) {
        throw new Error('Buffer vazio recebido');
      }

      // Verificar se √© realmente uma imagem
      const contentType = response.headers['content-type'];
      if (!contentType || !contentType.startsWith('image/')) {
        console.warn('‚ö†Ô∏è Content-Type n√£o √© uma imagem:', contentType);
        
        // Tentar detectar formato pelos primeiros bytes
        const firstBytes = buffer.slice(0, 8);
        console.log('üì• Primeiros bytes:', firstBytes.toString('hex'));
        
        // Verificar se √© um arquivo JPEG v√°lido
        const isJPEG = firstBytes[0] === 0xFF && firstBytes[1] === 0xD8 && firstBytes[2] === 0xFF;
        const isPNG = firstBytes[0] === 0x89 && firstBytes[1] === 0x50 && firstBytes[2] === 0x4E && firstBytes[3] === 0x47;
        const isWEBP = firstBytes.slice(0, 4).toString() === 'RIFF' && firstBytes.slice(8, 12).toString() === 'WEBP';
        
        console.log('üì• √â JPEG:', isJPEG);
        console.log('üì• √â PNG:', isPNG);
        console.log('üì• √â WEBP:', isWEBP);
        
        if (!isJPEG && !isPNG && !isWEBP) {
          console.warn('‚ö†Ô∏è Formato de imagem n√£o reconhecido pelos primeiros bytes');
          
          // Tentar converter se parecer ser uma imagem corrompida
          if (buffer.length > 1000) { // Arquivo grande o suficiente para ser uma imagem
            console.log('üì• Tentando processar como imagem potencialmente corrompida...');
          }
        }
      }

      return buffer;
    } catch (error) {
      console.error('‚ùå Erro ao baixar imagem:', error);
      
      if (error.response) {
        console.error('‚ùå Status da resposta:', error.response.status);
        console.error('‚ùå Headers da resposta:', error.response.headers);
        console.error('‚ùå URL final:', error.response.request?.res?.responseUrl);
      }
      
      throw new Error(`Falha ao baixar imagem: ${error.message}`);
    }
  }

  private async downloadFromWhatsAppMedia(messageData: any): Promise<Buffer> {
    try {
      // Usar o key.id da mensagem em vez de extrair da URL
      const messageId = messageData.key?.id;
      
      if (!messageId) {
        throw new Error('ID da mensagem n√£o encontrado');
      }
      
      console.log('üì• Message ID da mensagem:', messageId);
      
      // Construir URL da API de m√≠dia correta usando getBase64FromMediaMessage
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');
      
      // Usar o endpoint correto para obter m√≠dia em base64
      const mediaUrl = `${evolutionApiUrl}/chat/getBase64FromMediaMessage/${instanceName}`;
      
      console.log('üì• URL da API de m√≠dia (base64):', mediaUrl);
      
      // Payload correto conforme documenta√ß√£o
      const payload = {
        message: {
          key: {
            id: messageId
          }
        },
        convertToMp4: false
      };
      
      console.log('üì• Payload enviado:', JSON.stringify(payload, null, 2));
      
      const response = await axios.post(
        mediaUrl,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
          timeout: 30000,
        }
      );

      console.log('üì• Resposta da API de m√≠dia (base64), status:', response.status);
      
      if (response.data && response.data.base64) {
        console.log('üì• Base64 recebido, tamanho:', response.data.base64.length, 'caracteres');
        console.log('üì• Tipo de m√≠dia:', response.data.mediaType);
        console.log('üì• Nome do arquivo:', response.data.fileName);
        console.log('üì• Tamanho:', response.data.size);
        
        // Converter base64 para buffer
        const buffer = Buffer.from(response.data.base64, 'base64');
        console.log('üì• Buffer convertido do base64, tamanho:', buffer.length, 'bytes');
        
        return buffer;
      } else {
        console.error('‚ùå Resposta inesperada:', response.data);
        throw new Error('Base64 n√£o encontrado na resposta');
      }
    } catch (error) {
      console.error('‚ùå Erro na API de m√≠dia (base64):', error);
      
      if (error.response) {
        console.error('‚ùå Status da resposta:', error.response.status);
        console.error('‚ùå Dados da resposta:', error.response.data);
      }
      
      throw error;
    }
  }

  private async downloadFromMessagesAPI(messageData: any): Promise<Buffer> {
    try {
      // Usar o key.id da mensagem em vez de extrair da URL
      const messageId = messageData.key?.id;
      
      if (!messageId) {
        throw new Error('ID da mensagem n√£o encontrado (fallback)');
      }
      
      console.log('üì• Message ID extra√≠do (fallback):', messageId);
      
      // Construir URL da API de m√≠dia usando getBase64FromMediaMessage
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');
      
      // Usar o mesmo endpoint base64 como fallback
      const mediaUrl = `${evolutionApiUrl}/chat/getBase64FromMediaMessage/${instanceName}`;
      
      console.log('üì• URL da API de m√≠dia (fallback base64):', mediaUrl);
      
      // Payload correto conforme documenta√ß√£o
      const payload = {
        message: {
          key: {
            id: messageId
          }
        },
        convertToMp4: false
      };
      
      console.log('üì• Payload enviado (fallback):', JSON.stringify(payload, null, 2));
      
      const response = await axios.post(
        mediaUrl,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
          timeout: 30000,
        }
      );

      console.log('üì• Resposta da API de m√≠dia (fallback), status:', response.status);
      
      if (response.data && response.data.base64) {
        console.log('üì• Base64 recebido (fallback), tamanho:', response.data.base64.length, 'caracteres');
        console.log('üì• Tipo de m√≠dia (fallback):', response.data.mediaType);
        console.log('üì• Nome do arquivo (fallback):', response.data.fileName);
        
        // Converter base64 para buffer
        const buffer = Buffer.from(response.data.base64, 'base64');
        console.log('üì• Buffer convertido do base64 (fallback), tamanho:', buffer.length, 'bytes');
        
        return buffer;
      } else {
        console.error('‚ùå Resposta inesperada (fallback):', response.data);
        throw new Error('Base64 n√£o encontrado na resposta (fallback)');
      }
    } catch (error) {
      console.error('‚ùå Erro na API de m√≠dia (fallback):', error);
      
      if (error.response) {
        console.error('‚ùå Status da resposta (fallback):', error.response.status);
        console.error('‚ùå Dados da resposta (fallback):', error.response.data);
      }
      
      throw error;
    }
  }

  private async downloadDirectFromUrl(url: string): Promise<Buffer> {
    try {
      console.log('üì• Baixando diretamente da URL:', url);
      
      const headers = {
        'User-Agent': 'WhatsApp/2.23.24.78 A',
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'image',
        'Sec-Fetch-Mode': 'no-cors',
        'Sec-Fetch-Site': 'cross-site',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Referer': 'https://web.whatsapp.com/',
      };

      const response = await axios.get(url, { 
        responseType: 'arraybuffer',
        headers,
        timeout: 30000,
        maxRedirects: 5,
        validateStatus: (status) => status < 400,
      });

      console.log('üì• Download direto, status:', response.status);
      console.log('üì• Content-Type:', response.headers['content-type']);

      const buffer = Buffer.from(response.data);
      console.log('üì• Buffer direto criado, tamanho:', buffer.length, 'bytes');

      return buffer;
    } catch (error) {
      console.error('‚ùå Erro no download direto:', error);
      throw error;
    }
  }

  /**
   * Envia mensagem de texto via WhatsApp com typing presence integrado
   * @param phone - N√∫mero do destinat√°rio
   * @param message - Texto da mensagem
   * @param typingDelay - Tempo em milissegundos para typing presence (padr√£o: 1500ms, undefined para usar padr√£o, 0 para desabilitar)
   */
  async sendMessage(phone: string, message: string, typingDelay?: number): Promise<void> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');

      console.log('üì§ Enviando mensagem para:', phone);
      console.log('üì§ URL da API:', `${evolutionApiUrl}/message/sendText/${instanceName}`);
      console.log('üì§ Mensagem:', message);
      console.log('‚å®Ô∏è Typing delay:', typingDelay || 'padr√£o (1500ms)');

      // ‚úÖ NOVO: Enviar typing presence antes da mensagem (se delay especificado ou usar padr√£o)
      if (typingDelay !== 0) {
        const delay = typingDelay || 1500; // Delay padr√£o de 1.5 segundos
        await this.sendTypingPresence(phone, delay);
        
        // Aguardar o delay antes de enviar a mensagem
        await new Promise(resolve => setTimeout(resolve, delay));
      }

      const response = await axios.post(
        `${evolutionApiUrl}/message/sendText/${instanceName}`,
        {
          number: phone,
          text: message,
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
        }
      );

      console.log('‚úÖ Mensagem enviada com sucesso:', response.data);
      this.logger.log(`Mensagem enviada para ${phone}${typingDelay !== undefined ? ` (delay: ${typingDelay || 1500}ms)` : ''}`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error);
      console.error('‚ùå Detalhes do erro:', error.response?.data);
      this.logger.error('Erro ao enviar mensagem:', error);
    }
  }

  /**
   * Envia mensagem com typing presence integrado
   * @param phone - N√∫mero do destinat√°rio
   * @param message - Texto da mensagem
   * @param typingDelay - Tempo em milissegundos para typing presence (padr√£o: 1500ms, 0 para desabilitar)
   */
  async sendMessageWithTyping(phone: string, message: string, typingDelay: number = 1500): Promise<void> {
    await this.sendMessage(phone, message, typingDelay);
  }

  /**
   * Envia mensagem sem typing presence (para casos especiais)
   * @param phone - N√∫mero do destinat√°rio
   * @param message - Texto da mensagem
   */
  async sendMessageInstant(phone: string, message: string): Promise<void> {
    await this.sendMessage(phone, message, 0);
  }

  /**
   * Simula a√ß√£o "Digitando..." no WhatsApp
   * @param phone - N√∫mero do destinat√°rio
   * @param delay - Tempo em milissegundos para manter o status (padr√£o: 1200ms)
   */
  async sendTypingPresence(phone: string, delay: number = 1200): Promise<void> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');

      console.log('‚å®Ô∏è Enviando status "Digitando..." para:', phone);
      console.log('‚å®Ô∏è Delay:', delay, 'ms');

      const response = await axios.post(
        `${evolutionApiUrl}/chat/sendPresence/${instanceName}`,
        {
          number: phone,
          delay: delay,
          presence: 'composing'
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
        }
      );

      console.log('‚úÖ Status "Digitando..." enviado com sucesso:', response.data);
      this.logger.log(`Status "Digitando..." enviado para ${phone}`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar status "Digitando...":', error);
      console.error('‚ùå Detalhes do erro:', error.response?.data);
      this.logger.error('Erro ao enviar status "Digitando...":', error);
      // N√£o lan√ßar erro para n√£o interromper o fluxo principal
    }
  }

  /**
   * Gera mensagem de limite excedido localizada usando IA
   */
  async generateLimitExceededMessage(jurisdiction: string, currentUsage: number, limit: number): Promise<string> {
    try {
      const prompt = `Gere uma mensagem de limite excedido para o Chat LawX, um assistente jur√≠dico especializado.

Jurisdi√ß√£o: ${jurisdiction === 'ES' ? 'Espanha' : 'Portugal'}
Idioma: ${jurisdiction === 'ES' ? 'Espanhol' : 'Portugu√™s europeu'}
Uso atual: ${currentUsage} mensagens
Limite: ${limit} mensagens

Requisitos:
- Deve mencionar obrigatoriamente "Chat LawX"
- Deve informar que o limite de mensagens foi atingido
- Deve mostrar o uso atual e o limite (${currentUsage}/${limit})
- Deve sugerir op√ß√µes para o usu√°rio
- Tom profissional e √∫til
- M√°ximo 6 linhas
- Use emojis apropriados
- Inclua informa√ß√µes sobre upgrade de plano

Exemplo de estrutura:
[Emoji] [Aviso sobre limite atingido]
[Emoji] [Informa√ß√£o sobre uso atual]
[Emoji] [Op√ß√µes dispon√≠veis]
[Emoji] [Informa√ß√£o sobre upgrade]`;

      const message = await this.aiService.executeCustomPrompt(
        prompt,
        'gpt-3.5-turbo',
        'Voc√™ √© um especialista em criar mensagens de limite excedido para assistentes jur√≠dicos. Seja claro e ofere√ßa solu√ß√µes.',
        0.7,
        400
      );

      this.logger.log(`‚úÖ Mensagem de limite excedido gerada para ${jurisdiction}`);
      return message;
    } catch (error) {
      this.logger.error(`‚ùå Erro ao gerar mensagem de limite excedido:`, error);
      
      // Fallback para mensagem est√°tica
      if (jurisdiction === 'ES') {
        return `üö´ **¬°L√≠mite de mensajes alcanzado!**

Has utilizado todas tus mensajes disponibles (${currentUsage}/${limit}).

üí° **Opciones disponibles:**
‚Ä¢ Actualiza tu plan para obtener m√°s mensajes
‚Ä¢ Espera al pr√≥ximo per√≠odo de renovaci√≥n

üìû **Soporte:** Cont√°ctanos para m√°s informaci√≥n.`;
      } else {
        return `üö´ **Limite de mensagens atingido!**

Utilizou todas as suas mensagens dispon√≠veis (${currentUsage}/${limit}).

üí° **Op√ß√µes dispon√≠veis:**
‚Ä¢ Atualize o seu plano para obter mais mensagens
‚Ä¢ Aguarde o pr√≥ximo per√≠odo de renova√ß√£o

üìû **Suporte:** Entre em contacto connosco para mais informa√ß√µes.`;
      }
    }
  }

  async sendImage(phone: string, base64Image: string, caption?: string): Promise<void> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');

      console.log('üì§ Enviando imagem para:', phone);
      console.log('üì§ URL da API:', `${evolutionApiUrl}/message/sendMedia/${instanceName}`);

      const response = await axios.post(
        `${evolutionApiUrl}/message/sendMedia/${instanceName}`,
        {
          number: phone,
          mediatype: 'image',
          mimetype: 'image/png',
          media: base64Image,
          caption: caption || '',
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
        }
      );

      console.log('‚úÖ Imagem enviada com sucesso:', response.data);
      this.logger.log(`Imagem enviada para ${phone}`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar imagem:', error);
      console.error('‚ùå Detalhes do erro:', error.response?.data);
      this.logger.error('Erro ao enviar imagem:', error);
    }
  }

  private getConversationState(phone: string): ConversationState {
    const state = this.conversationStates.get(phone);
    return state || {
      isWaitingForName: false,
      isWaitingForEmail: false,
      isWaitingForConfirmation: false,
      isWaitingForBrazilianName: false,
      isWaitingForWhatsAppName: false, // NOVO: Para controle de nome em ES/PT
      isInUpgradeFlow: false,
      isInRegistrationFlow: false,
      upgradeStep: 'introduction',
      registrationStep: 'introduction',
      isInAnalysis: false,
      analysisStartTime: undefined,
    };
  }

  private setConversationState(phone: string, state: Partial<ConversationState>): void {
    const currentState = this.conversationStates.get(phone) || {
      isWaitingForName: false,
      isWaitingForEmail: false,
      isWaitingForConfirmation: false,
      isWaitingForBrazilianName: false,
      isWaitingForWhatsAppName: false, // NOVO: Para controle de nome em ES/PT
      isInUpgradeFlow: false,
      isInRegistrationFlow: false,
      registrationStep: 'introduction',
      upgradeStep: 'introduction',
      isInAnalysis: false,
      analysisStartTime: undefined
    };
    
    this.conversationStates.set(phone, { ...currentState, ...state });
  }

  private clearConversationState(phone: string): void {
    this.conversationStates.delete(phone);
  }

  /**
   * Retorna usu√°rios que est√£o em an√°lise de documento
   * M√©todo p√∫blico para ser usado pelo AnalysisTimeoutService
   */
  public getUsersInAnalysis(): Array<{
    phone: string;
    jurisdiction: string;
    analysisStartTime: number;
  }> {
    const usersInAnalysis: Array<{
      phone: string;
      jurisdiction: string;
      analysisStartTime: number;
    }> = [];

    for (const [phone, state] of this.conversationStates.entries()) {
      if (state.isInAnalysis && state.analysisStartTime) {
        // ‚úÖ NOVO: Usar jurisdi√ß√£o armazenada no estado (para casos for√ßados) ou detectar
        const jurisdiction = state.jurisdiction || this.jurisdictionService.detectJurisdiction(phone).jurisdiction;
        
        usersInAnalysis.push({
          phone,
          jurisdiction,
          analysisStartTime: state.analysisStartTime,
        });
      }
    }

    return usersInAnalysis;
  }

  /**
   * Limpa o estado de an√°lise para um usu√°rio espec√≠fico
   * M√©todo p√∫blico para ser usado pelo AnalysisTimeoutService
   */
  public clearAnalysisState(phone: string): void {
    const currentState = this.getConversationState(phone);
    if (currentState.isInAnalysis) {
      this.setConversationState(phone, {
        isInAnalysis: false,
        analysisStartTime: undefined,
      });
      this.logger.log(`üßπ Estado de an√°lise limpo para ${phone}`);
    }
  }

  private async handleUpgradeFlow(phone: string, userId: string, userMessage: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando fluxo de upgrade com contexto...');
      
      // Verificar se h√° sess√£o ativa
      const activeSession = await this.upgradeSessionsService.getActiveSession(userId);
      
      if (activeSession) {
        this.logger.log('üîÑ Sess√£o ativa encontrada, continuando...');
        await this.continueUpgradeFlowWithContext(phone, userId, userMessage, activeSession);
      } else {
        this.logger.log('üÜï Nova sess√£o de upgrade iniciada');
        await this.startNewUpgradeFlow(phone, userId, userMessage);
      }
    } catch (error) {
      this.logger.error('‚ùå Erro no fluxo de upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo de upgrade. Tente novamente.');
    }
  }

  private async startNewUpgradeFlow(phone: string, userId: string, userMessage: string): Promise<void> {
    try {
      this.logger.log('üÜï Iniciando novo fluxo de upgrade...');
      
      // Verificar se a mensagem j√° especifica um plano
      const selectedPlanName = await this.detectPlanFromMessage(userMessage);
      
      if (selectedPlanName) {
        // Usu√°rio j√° especificou o plano
        this.logger.log('üìã Plano especificado na mensagem, processando...');
        await this.processPlanSelection(phone, userId, userMessage);
      } else {
        // Perguntar sobre o plano
        this.logger.log('‚ùì Perguntando sobre plano...');
        const plans = await this.getUpgradePlans();
        
        const planOptions = plans.map(plan => {
          const discount = plan.yearly_price < (plan.monthly_price * 12) 
            ? ` (${Math.round(((plan.monthly_price * 12 - plan.yearly_price) / (plan.monthly_price * 12)) * 100)}% de desconto)`
            : '';
          
          return `${plan.name === 'Pro' ? 'üü¢' : 'üü°'} **PLANO ${plan.name.toUpperCase()} - R$ ${plan.monthly_price.toFixed(2)}/m√™s**\n‚Ä¢ ${plan.description}${discount}`;
        }).join('\n\n');

        const upgradeMessage = `üöÄ **Vamos fazer upgrade de plano!**

Escolha o plano que melhor atende suas necessidades:

${planOptions}

üí° **Recomendamos o plano anual** - Voc√™ economiza mais!

üí¨ **Digite:** "${plans.map(p => p.name).join('" ou "')}" para escolher seu plano`;

        await this.sendMessage(phone, upgradeMessage);
        
        // Criar sess√£o inicial (apenas para usu√°rios n√£o brasileiros)
        const user = await this.usersService.getOrCreateUser(phone);
        if (user) {
        await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: '',
          billing_cycle: 'monthly',
          amount: 0,
          current_step: 'plan_selection'
        });
        }
      }
    } catch (error) {
      this.logger.error('‚ùå Erro ao iniciar fluxo de upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo de upgrade. Tente novamente.');
    }
  }

  private async continueUpgradeFlowWithContext(phone: string, userId: string, userMessage: string, session: any): Promise<void> {
    try {
      const lowerMessage = userMessage.toLowerCase();
      
      // Verificar se √© um retry
      if (lowerMessage.includes('tente novamente') || lowerMessage.includes('tentar novamente')) {
        this.logger.log('üîÑ Retry detectado, continuando com sess√£o existente...');
        await this.handleRetry(phone, userId, session);
        return;
      }
      
      // Verificar se quer cancelar
      if (lowerMessage.includes('cancelar') || lowerMessage.includes('cancel')) {
        this.logger.log('‚ùå Cancelamento detectado...');
        await this.upgradeSessionsService.cancelSession(session.id);
        await this.sendMessage(phone, '‚ùå Upgrade cancelado. Voc√™ pode iniciar novamente quando quiser.');
        this.clearConversationState(phone);
        return;
      }
      
      // Verificar se quer mudar de plano
      if (lowerMessage.includes('pro') || lowerMessage.includes('premium')) {
        this.logger.log('üîÑ Mudan√ßa de plano detectada...');
        await this.processPlanSelection(phone, userId, userMessage, session);
        return;
      }
      
      // Verificar se quer confirmar pagamento (PRIORIDADE M√ÅXIMA)
      if (lowerMessage.includes('sim') || lowerMessage.includes('quero') || 
          lowerMessage.includes('prosseguir') || lowerMessage.includes('pagar')) {
        this.logger.log('üí≥ Confirma√ß√£o de pagamento detectada...');
        const state = this.getConversationState(phone);
        if (state.selectedPlan && state.selectedFrequency) {
          await this.finalizeUpgrade(phone, userId, state);
        } else {
          await this.sendMessage(phone, '‚ùå Informa√ß√µes do plano incompletas. Digite "quero assinar" para come√ßar novamente.');
        }
        return;
      }
      
      // Verificar se est√° escolhendo frequ√™ncia
      if (lowerMessage.includes('mensal') || lowerMessage.includes('anual') || 
          lowerMessage.includes('monthly') || lowerMessage.includes('yearly') ||
          lowerMessage.includes('m√™s') || lowerMessage.includes('ano')) {
        this.logger.log('üìÖ Sele√ß√£o de frequ√™ncia detectada...');
        await this.processFrequencySelection(phone, userId, userMessage);
        return;
      }
      
      // Se chegou aqui, n√£o entendeu o comando
      await this.sendMessage(phone, '‚ùì N√£o entendi. Voc√™ pode:\n‚Ä¢ Digite "Pro" ou "Premium" para escolher plano\n‚Ä¢ Digite "mensal" ou "anual" para escolher frequ√™ncia\n‚Ä¢ Digite "cancelar" para cancelar');
      
    } catch (error) {
      console.error('‚ùå Erro ao continuar fluxo com contexto:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo. Tente novamente.');
    }
  }

  private async handleRetry(phone: string, userId: string, session: any): Promise<void> {
    try {
      const retryMessage = await this.upgradeSessionsService.getRetryMessage(session);
      await this.sendMessage(phone, retryMessage);
      
      // Atualizar passo para pix_generation
      await this.upgradeSessionsService.updateStep(session.id, 'pix_generation');
      
      // Gerar PIX novamente
      const upgradeRequest = {
        user_id: userId,
        plan_name: session.plan_name,
        billing_cycle: session.billing_cycle,
        amount: session.amount,
        payment_method: 'pix' as const,
        status: 'pending' as const
      };
      
      try {
        // TODO: Implementar pagamento via Stripe para Chat LawX
        // const pixData = await this.mercadoPagoService.createPixPayment(upgradeRequest);
        // const pixMessages = await this.mercadoPagoService.sendPixQRCode(phone, pixData, upgradeRequest);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // TODO: Implementar envio de mensagens PIX para Chat LawX
        // await this.sendMessage(phone, pixMessages.mainMessage);
        // await this.sendImage(phone, pixMessages.qrCodeImage, `QR Code PIX - R$ ${upgradeRequest.amount.toFixed(2)}`);
        // await this.sendMessage(phone, pixMessages.copyPasteCode);
        // await this.sendMessage(phone, pixMessages.copyPasteInstructions);
        
        await this.sendMessage(phone, 'üí≥ Redirecionando para pagamento via Stripe...');
        
        // Atualizar passo
        await this.upgradeSessionsService.updateStep(session.id, 'payment_pending');
        
      } catch (pixError) {
        console.error('‚ùå Erro ao gerar PIX no retry:', pixError);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // Enviar mensagem de erro com op√ß√µes de recupera√ß√£o
        const errorMessage = await this.upgradeSessionsService.getErrorRecoveryMessage(session);
        await this.sendMessage(phone, errorMessage);
      }
      
    } catch (error) {
      console.error('‚ùå Erro no retry:', error);
      await this.sendMessage(phone, '‚ùå Erro ao tentar novamente. Tente iniciar o processo novamente.');
    }
  }

  private async processPlanSelection(phone: string, userId: string, userMessage: string, existingSession?: any): Promise<void> {
    try {
      const selectedPlanName = await this.detectPlanFromMessage(userMessage);
      
      if (!selectedPlanName) {
        const plans = await this.getUpgradePlans();
        const planNames = plans.map(p => p.name).join(' ou ');
        await this.sendMessage(phone, `‚ùì Qual plano voc√™ gostaria? ${planNames}?`);
        return;
      }
      
      // Buscar dados do plano selecionado
      const selectedPlan = await this.getPlanByName(selectedPlanName);
      
      // Perguntar sobre frequ√™ncia de pagamento
      const discount = selectedPlan.yearly_price < (selectedPlan.monthly_price * 12) 
        ? ` (${Math.round(((selectedPlan.monthly_price * 12 - selectedPlan.yearly_price) / (selectedPlan.monthly_price * 12)) * 100)}% de desconto)`
        : '';
      
      const frequencyMessage = `‚úÖ **Plano selecionado: ${selectedPlan.name}**

Agora escolha a frequ√™ncia de pagamento:

üü¢ **Mensal:** R$ ${selectedPlan.monthly_price.toFixed(2)}/m√™s
üü¢ **Anual:** R$ ${selectedPlan.yearly_price.toFixed(2)}/ano${discount}

üí° **Recomendamos o plano anual** - Voc√™ economiza mais!`;

      await this.sendMessage(phone, frequencyMessage);
      await this.sendMessage(phone, 'Qual a frequ√™ncia de pagamento ideal para voc√™?');
      
      // Criar ou atualizar sess√£o com apenas o plano selecionado
      let session;
      if (existingSession) {
        session = await this.upgradeSessionsService.updateSession(existingSession.id, {
          plan_name: selectedPlan.name,
          current_step: 'plan_selection'
        });
      } else {
        const user = await this.usersService.getOrCreateUser(phone);
        if (user) {
        session = await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: selectedPlan.name,
          billing_cycle: 'monthly', // Tempor√°rio, ser√° atualizado
          amount: 0, // Ser√° calculado quando escolher frequ√™ncia
          current_step: 'plan_selection'
        });
        }
      }
      
      // Atualizar estado da conversa
      const state = this.getConversationState(phone);
      state.isInUpgradeFlow = true;
      state.upgradeStep = 'plan_selection';
      state.selectedPlan = selectedPlan.name;
      // N√£o definir selectedFrequency ainda
      this.setConversationState(phone, state);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar sele√ß√£o de plano:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async processFrequencySelection(phone: string, userId: string, userMessage: string): Promise<void> {
    try {
      const user = await this.usersService.findByPhone(phone);
      if (!user) {
        await this.sendMessage(phone, '‚ùå Usu√°rio n√£o encontrado.');
        return;
      }

      const lowerMessage = userMessage.toLowerCase();
      let billingCycle: 'monthly' | 'yearly' = 'monthly';
      
      // Detectar frequ√™ncia
      if (lowerMessage.includes('anual') || lowerMessage.includes('yearly') || lowerMessage.includes('ano')) {
        billingCycle = 'yearly';
      } else if (lowerMessage.includes('mensal') || lowerMessage.includes('monthly') || lowerMessage.includes('m√™s')) {
        billingCycle = 'monthly';
      } else {
        await this.sendMessage(phone, '‚ùì Escolha a frequ√™ncia: "mensal" ou "anual"?');
        return;
      }
      
      // Buscar sess√£o ativa
      const session = await this.upgradeSessionsService.getActiveSession(userId);
      if (!session) {
        await this.sendMessage(phone, '‚ùå Sess√£o n√£o encontrada. Digite "quero assinar" para come√ßar novamente.');
        return;
      }
      
      // Buscar dados do plano para calcular pre√ßo
      const plan = await this.getPlanByName(session.plan_name);
      const planPrice = billingCycle === 'monthly' ? plan.monthly_price : plan.yearly_price;
      
      // Atualizar sess√£o com frequ√™ncia e pre√ßo
      const updatedSession = await this.upgradeSessionsService.updateSession(session.id, {
        billing_cycle: billingCycle,
        amount: planPrice,
        current_step: 'payment_info'
      });
      
      // Buscar limites do plano
      const planLimits = await this.getPlanLimits(plan.name, user.jurisdiction);
      
      // Enviar confirma√ß√£o
      const confirmationMessage = `‚úÖ **Confirma√ß√£o do Pedido:**

üìã **Plano:** ${plan.name}
üí∞ **Frequ√™ncia:** ${billingCycle === 'monthly' ? 'Mensal' : 'Anual'}
üíµ **Valor:** R$ ${planPrice.toFixed(2)}

üöÄ **O que voc√™ ter√°:**
${planLimits}

üí≥ **Acima est√° todas as informa√ß√µes do seu plano**`;

      await this.sendMessage(phone, confirmationMessage);
      await this.sendMessage(phone, 'Posso gerar seu pagamento? Ah! no momento n√£o temos suporte a cart√£o de cr√©dito, mas aceitamos PIX.');
      
      // Atualizar estado da conversa
      const state = this.getConversationState(phone);
      state.isInUpgradeFlow = true;
      state.upgradeStep = 'payment_info';
      state.selectedPlan = session.plan_name;
      state.selectedFrequency = billingCycle;
      this.setConversationState(phone, state);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar sele√ß√£o de frequ√™ncia:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async finalizeUpgrade(phone: string, userId: string, state: ConversationState): Promise<void> {
    try {
      // Buscar dados do plano para calcular pre√ßo
      const plan = await this.getPlanByName(state.selectedPlan);
      const planPrice = state.selectedFrequency === 'monthly' ? plan.monthly_price : plan.yearly_price;
      
      const response = `üéâ **Excelente decis√£o! Vamos te ajudar na sua organiza√ß√£o financeira!**

‚úÖ **Resumo do Pedido:**
‚Ä¢ Plano: ${state.selectedPlan}
‚Ä¢ Frequ√™ncia: ${state.selectedFrequency === 'monthly' ? 'Mensal' : 'Anual'}
‚Ä¢ Valor: R$ ${planPrice.toFixed(2)}

‚è≥ **Gerando PIX...**
Aguarde um momento enquanto preparamos seu pagamento... ‚è≥`;
      
      await this.sendMessage(phone, response);
      
      // Buscar ou criar sess√£o
      let session = await this.upgradeSessionsService.getActiveSession(userId);
      
      if (!session) {
        // Criar nova sess√£o
        session = await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: state.selectedPlan,
          billing_cycle: state.selectedFrequency,
          amount: planPrice,
          current_step: 'payment_processing'
        });
      } else {
        // Atualizar sess√£o existente
        session = await this.upgradeSessionsService.updateSession(session.id, {
          plan_name: state.selectedPlan,
          billing_cycle: state.selectedFrequency,
          amount: planPrice,
          current_step: 'payment_processing'
        });
      }
      
      // Gerar JSON para requisi√ß√£o
      const upgradeRequest = {
        user_id: userId,
        plan_name: state.selectedPlan,
        billing_cycle: state.selectedFrequency,
        amount: planPrice,
        payment_method: 'pix' as const,
        status: 'pending' as const
      };
      
      console.log('üìã JSON para requisi√ß√£o:', JSON.stringify(upgradeRequest, null, 2));
      
      // Gerar PIX via Mercado Pago
      try {
        // TODO: Implementar pagamento via Stripe para Chat LawX
        // const pixData = await this.mercadoPagoService.createPixPayment(upgradeRequest);
        // const pixMessages = await this.mercadoPagoService.sendPixQRCode(phone, pixData, upgradeRequest);
        
        // TODO: Implementar envio de mensagens PIX para Chat LawX
        // await this.sendMessage(phone, pixMessages.mainMessage);
        // await this.sendImage(phone, pixMessages.qrCodeImage, `QR Code PIX - R$ ${upgradeRequest.amount.toFixed(2)}`);
        // await this.sendMessage(phone, pixMessages.copyPasteCode);
        // await this.sendMessage(phone, pixMessages.copyPasteInstructions);
        
        await this.sendMessage(phone, 'üí≥ Redirecionando para pagamento via Stripe...');
        
        // Atualizar sess√£o para payment_pending
        await this.upgradeSessionsService.updateStep(session.id, 'payment_pending');
        
      } catch (pixError) {
        console.error('‚ùå Erro ao gerar PIX:', pixError);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // Enviar mensagem de erro com op√ß√µes de recupera√ß√£o
        const errorMessage = await this.upgradeSessionsService.getErrorRecoveryMessage(session);
        await this.sendMessage(phone, errorMessage);
      }
      
      // Limpar estado da conversa
      this.clearConversationState(phone);
      
    } catch (error) {
      console.error('‚ùå Erro ao finalizar upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar upgrade. Tente novamente.');
    }
  }


  private async processAudioViaEvolutionAPI(message: any): Promise<Buffer | null> {
    try {
      this.logger.log('üéµ Processando √°udio via Evolution API...');
      
      // Log da estrutura completa da mensagem para debug
      this.logger.log('üîç Estrutura da mensagem:', JSON.stringify(message, null, 2));
      
      // Usar Evolution API para baixar o √°udio
      this.logger.log('üéµ Tentando download via Evolution API...');
      const audioBuffer = await this.downloadFromEvolutionMediaAPI(message);
      
      if (!audioBuffer) {
        this.logger.error('‚ùå Falha ao baixar √°udio via Evolution API');
        return null;
      }

      this.logger.log('‚úÖ √Åudio baixado com sucesso via Evolution API:', audioBuffer.length, 'bytes');
      
      // Verificar os primeiros bytes para debug
      const firstBytes = audioBuffer.slice(0, 16);
      this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
      
      // Converter para MP3 para melhor compatibilidade
      try {
        const mp3Buffer = await this.uploadService.convertAudioToMp3(audioBuffer);
        this.logger.log('‚úÖ √Åudio convertido para MP3:', mp3Buffer.length, 'bytes');
        return mp3Buffer;
      } catch (conversionError) {
        this.logger.warn('‚ö†Ô∏è Falha na convers√£o para MP3, tentando convers√£o simples:', conversionError.message);
        try {
          const simpleBuffer = await this.uploadService.convertAudioSimple(audioBuffer);
          this.logger.log('‚úÖ Convers√£o simples conclu√≠da:', simpleBuffer.length, 'bytes');
          return simpleBuffer;
        } catch (simpleError) {
          this.logger.warn('‚ö†Ô∏è Falha na convers√£o simples, usando buffer original:', simpleError.message);
          return audioBuffer;
        }
      }

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar √°udio via Evolution API:', error);
      return null;
    }
  }

  private async processAudioBase64(message: any): Promise<Buffer | null> {
    try {
      this.logger.log('üéµ Processando √°udio base64...');
      
      // Log da estrutura completa da mensagem para debug
      this.logger.log('üîç Estrutura da mensagem:', JSON.stringify(message, null, 2));

      // Verificar se temos base64 na mensagem (n√≠vel da mensagem, n√£o dentro de audioMessage)
      if (message.message?.base64) {
        this.logger.log('‚úÖ Base64 encontrado na mensagem');
        const buffer = Buffer.from(message.message?.base64, 'base64');
        
        if (buffer.length === 0) {
          this.logger.error('‚ùå Buffer vazio ap√≥s convers√£o base64');
          return null;
        }

        this.logger.log('‚úÖ √Åudio convertido de base64:', buffer.length, 'bytes');
        
        // Verificar os primeiros bytes para debug
        const firstBytes = buffer.slice(0, 16);
        this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
        
        // Converter para MP3 para melhor compatibilidade
        try {
          const mp3Buffer = await this.uploadService.convertAudioToMp3(buffer);
          this.logger.log('‚úÖ √Åudio convertido para MP3:', mp3Buffer.length, 'bytes');
          return mp3Buffer;
        } catch (conversionError) {
          this.logger.warn('‚ö†Ô∏è Falha na convers√£o para MP3, tentando convers√£o simples:', conversionError.message);
          try {
            const simpleBuffer = await this.uploadService.convertAudioSimple(buffer);
            this.logger.log('‚úÖ Convers√£o simples conclu√≠da:', simpleBuffer.length, 'bytes');
            return simpleBuffer;
          } catch (simpleError) {
            this.logger.warn('‚ö†Ô∏è Falha na convers√£o simples, usando buffer original:', simpleError.message);
            return buffer;
          }
        }
      } else {
        this.logger.log('‚ö†Ô∏è Base64 n√£o encontrado no n√≠vel da mensagem');
        this.logger.log('üîç Verificando se base64 est√° em message.base64...');
        
        // Verificar se base64 est√° em message.message.base64
        if (message.message?.base64) {
          this.logger.log('‚úÖ Base64 encontrado em message.message.base64');
          const buffer = Buffer.from(message.message.base64, 'base64');
          
          if (buffer.length === 0) {
            this.logger.error('‚ùå Buffer vazio ap√≥s convers√£o base64');
            return null;
          }

          this.logger.log('‚úÖ √Åudio convertido de base64:', buffer.length, 'bytes');
          
          // Verificar os primeiros bytes para debug
          const firstBytes = buffer.slice(0, 16);
          this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
          
          // Converter para MP3 para melhor compatibilidade
          try {
            const mp3Buffer = await this.uploadService.convertAudioToMp3(buffer);
            this.logger.log('‚úÖ √Åudio convertido para MP3:', mp3Buffer.length, 'bytes');
            return mp3Buffer;
          } catch (conversionError) {
            this.logger.warn('‚ö†Ô∏è Falha na convers√£o para MP3, tentando convers√£o simples:', conversionError.message);
            try {
              const simpleBuffer = await this.uploadService.convertAudioSimple(buffer);
              this.logger.log('‚úÖ Convers√£o simples conclu√≠da:', simpleBuffer.length, 'bytes');
              return simpleBuffer;
            } catch (simpleError) {
              this.logger.warn('‚ö†Ô∏è Falha na convers√£o simples, usando buffer original:', simpleError.message);
              return buffer;
            }
          }
        }
      }

      // Fallback: tentar download se n√£o houver base64
      this.logger.log('‚ö†Ô∏è Base64 n√£o encontrado, tentando download...');
      return await this.downloadAudio(message);

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar √°udio base64:', error);
      return null;
    }
  }

  private async downloadAudio(messageData: any): Promise<Buffer> {
    try {
      this.logger.log('üéµ Iniciando download de √°udio...');
      
      const audioMessage = messageData.message?.audioMessage;
      if (!audioMessage) {
        throw new Error('Mensagem de √°udio n√£o encontrada');
      }

      this.logger.log('üéµ Dados do √°udio:', JSON.stringify(audioMessage, null, 2));

      // M√©todo 1: Download via Evolution API Media Download (RECOMENDADO)
      if (audioMessage.url) {
        this.logger.log('üéµ Tentando download via Evolution API Media Download...');
        const audioBuffer = await this.downloadFromEvolutionMediaAPI(audioMessage);
        if (audioBuffer) {
          return audioBuffer;
        }
      }

      // M√©todo 2: Download via URL direta (fallback)
      if (audioMessage.url) {
        this.logger.log('üéµ Tentando download direto da URL...');
        const audioBuffer = await this.downloadDirectFromUrl(audioMessage.url);
        if (audioBuffer) {
          return audioBuffer;
        }
      }

      throw new Error('N√£o foi poss√≠vel baixar o √°udio');

    } catch (error) {
      this.logger.error('‚ùå Erro ao baixar √°udio:', error);
      throw error;
    }
  }

  private async downloadFromEvolutionMediaAPI(audioMessage: any): Promise<Buffer | null> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const evolutionApiKey = this.configService.get('EVOLUTION_API_KEY');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');

      const messageId = audioMessage.message.key.id;
      this.logger.log('üéµ ID da mensagem extra√≠do:', messageId);

      // M√©todo 1: Tentar usar a API de download de m√≠dia do Evolution API
      try {
        const response = await fetch(`${evolutionApiUrl}/chat/getBase64FromMediaMessage/${instanceName}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': evolutionApiKey,
          },
          body: JSON.stringify({
            message: {
              key: {
                id: messageId
              }
            },
            convertToMp4: true
          }),
        });

        if (response.ok) {
          const result = await response.json();
          
          if (result.base64) {
            this.logger.log('‚úÖ √Åudio baixado via Evolution API Media Download');
            const buffer = Buffer.from(result.base64, 'base64');
            
            // Verificar se o buffer √© v√°lido
            if (buffer.length === 0) {
              throw new Error('Arquivo de √°udio vazio');
            }

            this.logger.log('‚úÖ √Åudio baixado com sucesso:', buffer.length, 'bytes');
            
            // Verificar os primeiros bytes para debug
            const firstBytes = buffer.slice(0, 16);
            this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
            
            return buffer;
          }
        }
      } catch (apiError) {
        this.logger.warn('‚ö†Ô∏è API getBase64FromMediaMessage n√£o dispon√≠vel, tentando m√©todo alternativo...');
      }

      // M√©todo 2: Tentar usar a API de download direto
      try {
        const response = await fetch(`${evolutionApiUrl}/chat/downloadMedia/${instanceName}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': evolutionApiKey,
          },
          body: JSON.stringify({
            url: audioMessage.url,
            mimetype: audioMessage.mimetype,
            mediaKey: audioMessage.mediaKey,
            fileEncSha256: audioMessage.fileEncSha256,
            fileSha256: audioMessage.fileSha256,
            fileLength: audioMessage.fileLength,
            seconds: audioMessage.seconds,
            ptt: audioMessage.ptt,
            directPath: audioMessage.directPath,
            mediaKeyTimestamp: audioMessage.mediaKeyTimestamp,
            streamingSidecar: audioMessage.streamingSidecar,
            waveform: audioMessage.waveform
          }),
        });

        if (response.ok) {
          const buffer = await response.arrayBuffer();
          const nodeBuffer = Buffer.from(buffer);
          
          if (nodeBuffer.length > 0) {
            this.logger.log('‚úÖ √Åudio baixado via Evolution API Download Media');
            this.logger.log('‚úÖ √Åudio baixado com sucesso:', nodeBuffer.length, 'bytes');
            
            // Verificar os primeiros bytes para debug
            const firstBytes = nodeBuffer.slice(0, 16);
            this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
            
            return nodeBuffer;
          }
        }
      } catch (downloadError) {
        this.logger.warn('‚ö†Ô∏è API downloadMedia n√£o dispon√≠vel:', downloadError.message);
      }

      return null;

    } catch (error) {
      this.logger.error('‚ùå Erro no download via Evolution API Media Download:', error);
      return null;
    }
  }

  private async processUpgradeFlowWithAI(phone: string, userId: string, userMessage: string, session: any, state: ConversationState): Promise<void> {
    try {
      this.logger.log('üß† Processando fluxo de upgrade com IA...');
      this.logger.log('üìã Sess√£o:', session);
      this.logger.log('üìã Estado:', state);

      // Construir contexto para an√°lise
      const context = {
        currentStep: session?.current_step || state.upgradeStep,
        selectedPlan: session?.plan_name || state.selectedPlan,
        selectedFrequency: session?.billing_cycle || state.selectedFrequency,
        amount: session?.amount || 0,
        sessionId: session?.id
      };

      // Usar IA para analisar a inten√ß√£o no contexto
      const aiAnalysis = await this.aiService.analyzePlanUpgradeIntent(userMessage, context);
      
      this.logger.log('ü§ñ An√°lise da IA:', aiAnalysis);

      // Processar baseado na inten√ß√£o detectada
      switch (aiAnalysis.intent) {
        case 'payment_confirmation':
          await this.handlePaymentConfirmation(phone, userId, context);
          break;
          
        case 'frequency_selection':
          await this.handleFrequencySelectionWithAI(phone, userId, userMessage, context);
          break;
          
        case 'plan_selection':
          await this.handlePlanSelectionWithAI(phone, userId, userMessage, context);
          break;
          
        case 'cancel_upgrade':
          await this.handleCancelUpgrade(phone, userId, session);
          break;
          
        case 'continue_upgrade':
          await this.handleContinueUpgrade(phone, userId, userMessage, context);
          break;
          
        default:
          await this.handleContinueUpgrade(phone, userId, userMessage, context);
          break;
      }

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar fluxo de upgrade com IA:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo. Tente novamente.');
    }
  }

  private async handlePaymentConfirmation(phone: string, userId: string, context: any): Promise<void> {
    try {
      this.logger.log('üí≥ Processando confirma√ß√£o de pagamento...');
      
      // Verificar se temos todas as informa√ß√µes necess√°rias
      if (!context.selectedPlan || !context.selectedFrequency) {
        await this.sendMessage(phone, '‚ùå Informa√ß√µes do plano incompletas. Digite "quero assinar" para come√ßar novamente.');
        return;
      }

      // Buscar dados do plano para calcular pre√ßo
      const plan = await this.getPlanByName(context.selectedPlan);
      const planPrice = context.selectedFrequency === 'monthly' ? plan.monthly_price : plan.yearly_price;
      
      const response = `üéâ **Excelente decis√£o! Vamos te ajudar na sua organiza√ß√£o financeira!**

‚úÖ **Resumo do Pedido:**
‚Ä¢ Plano: ${context.selectedPlan}
‚Ä¢ Frequ√™ncia: ${context.selectedFrequency === 'monthly' ? 'Mensal' : 'Anual'}
‚Ä¢ Valor: R$ ${planPrice.toFixed(2)}

‚è≥ **Gerando PIX...**
Aguarde um momento enquanto preparamos seu pagamento... ‚è≥`;
      
      await this.sendMessage(phone, response);
      
      // Buscar ou criar sess√£o
      let session = await this.upgradeSessionsService.getActiveSession(userId);
      
      if (!session) {
        // Criar nova sess√£o
        session = await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: context.selectedPlan,
          billing_cycle: context.selectedFrequency as 'monthly' | 'yearly',
          amount: planPrice,
          current_step: 'payment_processing'
        });
      } else {
        // Atualizar sess√£o existente
        session = await this.upgradeSessionsService.updateSession(session.id, {
          plan_name: context.selectedPlan,
          billing_cycle: context.selectedFrequency as 'monthly' | 'yearly',
          amount: planPrice,
          current_step: 'payment_processing'
        });
      }
      
      // Gerar PIX
      await this.generatePixPayment(phone, userId, context.selectedPlan, context.selectedFrequency, planPrice, session);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar confirma√ß√£o de pagamento:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar pagamento. Tente novamente.');
    }
  }

  private async handleFrequencySelectionWithAI(phone: string, userId: string, userMessage: string, context: any): Promise<void> {
    try {
      this.logger.log('üìÖ Processando sele√ß√£o de frequ√™ncia com IA...');
      
      // Usar IA para detectar frequ√™ncia
      const frequencyAnalysis = await this.aiService.detectPlanFrequencySelection(userMessage);
      
      if (frequencyAnalysis.frequency) {
        await this.processFrequencySelection(phone, userId, userMessage);
      } else {
        await this.sendMessage(phone, '‚ùì Escolha a frequ√™ncia: "mensal" ou "anual"?');
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar sele√ß√£o de frequ√™ncia:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async handlePlanSelectionWithAI(phone: string, userId: string, userMessage: string, context: any): Promise<void> {
    try {
      this.logger.log('üìã Processando sele√ß√£o de plano com IA...');
      
      // Usar IA para detectar plano
      const planAnalysis = await this.aiService.detectPlanFromMessage(userMessage);
      
      if (planAnalysis.planName) {
        await this.processPlanSelection(phone, userId, userMessage);
      } else {
        const plans = await this.getUpgradePlans();
        const planNames = plans.map(p => p.name).join(' ou ');
        await this.sendMessage(phone, `‚ùì Qual plano voc√™ gostaria? ${planNames}?`);
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar sele√ß√£o de plano:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async handleCancelUpgrade(phone: string, userId: string, session: any): Promise<void> {
    try {
      this.logger.log('‚ùå Processando cancelamento de upgrade...');
      
      if (session) {
        await this.upgradeSessionsService.cancelSession(session.id);
      }
      
      this.clearConversationState(phone);
      await this.sendMessage(phone, '‚ùå Upgrade cancelado. Voc√™ pode iniciar novamente quando quiser.');
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar cancelamento:', error);
      await this.sendMessage(phone, '‚ùå Erro ao cancelar. Tente novamente.');
    }
  }

  private async handleContinueUpgrade(phone: string, userId: string, userMessage: string, context: any): Promise<void> {
    try {
      this.logger.log('üîÑ Continuando fluxo de upgrade...');
      
      // Gerar resposta contextual baseada no estado atual
      const response = await this.aiService.generatePlanUpgradeResponse(userMessage, context);
      await this.sendMessage(phone, response);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao continuar upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo. Tente novamente.');
    }
  }

  private async generatePixPayment(phone: string, userId: string, planName: string, frequency: string, amount: number, session: any): Promise<void> {
    try {
      // Gerar JSON para requisi√ß√£o
      const upgradeRequest = {
        user_id: userId,
        plan_name: planName,
        billing_cycle: frequency as 'monthly' | 'yearly',
        amount: amount,
        payment_method: 'pix' as const,
        status: 'pending' as const
      };
      
      this.logger.log('üìã JSON para requisi√ß√£o:', JSON.stringify(upgradeRequest, null, 2));
      
      // Gerar PIX via Mercado Pago
      try {
        // TODO: Implementar pagamento via Stripe para Chat LawX
        // const pixData = await this.mercadoPagoService.createPixPayment(upgradeRequest);
        // const pixMessages = await this.mercadoPagoService.sendPixQRCode(phone, pixData, upgradeRequest);
        
        // TODO: Implementar envio de mensagens PIX para Chat LawX
        // await this.sendMessage(phone, pixMessages.mainMessage);
        // await this.sendImage(phone, pixMessages.qrCodeImage, `QR Code PIX - R$ ${upgradeRequest.amount.toFixed(2)}`);
        // await this.sendMessage(phone, pixMessages.copyPasteCode);
        // await this.sendMessage(phone, pixMessages.copyPasteInstructions);
        
        await this.sendMessage(phone, 'üí≥ Redirecionando para pagamento via Stripe...');
        
        // Atualizar sess√£o para payment_pending
        await this.upgradeSessionsService.updateStep(session.id, 'payment_pending');
        
      } catch (pixError) {
        this.logger.error('‚ùå Erro ao gerar PIX:', pixError);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // Enviar mensagem de erro com op√ß√µes de recupera√ß√£o
        const errorMessage = await this.upgradeSessionsService.getErrorRecoveryMessage(session);
        await this.sendMessage(phone, errorMessage);
      }
      
      // Limpar estado da conversa
      this.clearConversationState(phone);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao gerar PIX:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar pagamento. Tente novamente.');
    }
  }

  // ===== FUN√á√ïES AUXILIARES PARA PROCESSAMENTO DE DOCUMENTOS =====

  private extractBase64FromDocumentMessage(messageData: any): string | null {
    try {
      this.logger.log('üìÑ Extraindo base64 da mensagem de documento...');
      
      const documentMessage = messageData.message?.documentMessage;
      if (!documentMessage) {
        this.logger.warn('‚ö†Ô∏è Mensagem de documento n√£o encontrada');
        return null;
      }

      this.logger.log('üìÑ Dados do documento:', JSON.stringify(documentMessage, null, 2));

      // Verificar se h√° base64 na mensagem
      if (messageData.message?.base64) {
        this.logger.log('‚úÖ Base64 encontrado na mensagem');
        return messageData.message.base64;
      }

      // Verificar se h√° base64 no documentMessage
      if (documentMessage.base64) {
        this.logger.log('‚úÖ Base64 encontrado no documentMessage');
        return documentMessage.base64;
      }

      this.logger.warn('‚ö†Ô∏è Base64 n√£o encontrado na mensagem de documento');
      return null;
    } catch (error) {
      this.logger.error('‚ùå Erro ao extrair base64:', error);
      return null;
    }
  }

  private detectDocumentType(buffer: Buffer): string {
    const header = buffer.slice(0, 8);
    const headerHex = header.toString('hex').toLowerCase();
    
    this.logger.log('üìÑ Header do documento:', headerHex);
    
    // PDF: %PDF
    if (headerHex.startsWith('25504446')) {
      this.logger.log('üìÑ Tipo detectado: PDF');
      return 'application/pdf';
    }
    
    // DOCX: PK (ZIP-based)
    if (headerHex.startsWith('504b0304') || headerHex.startsWith('504b0506')) {
      this.logger.log('üìÑ Tipo detectado: DOCX');
      return 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    }
    
    // DOC: D0CF11E0 (OLE2)
    if (headerHex.startsWith('d0cf11e0')) {
      this.logger.log('üìÑ Tipo detectado: DOC');
      return 'application/msword';
    }
    
    this.logger.warn('‚ö†Ô∏è Tipo de documento n√£o reconhecido:', headerHex);
    return 'unknown';
  }

  private isSupportedDocumentType(mimeType: string): boolean {
    const supportedTypes = [
      'application/pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    ];
    
    return supportedTypes.includes(mimeType);
  }

  private generateDocumentFileName(mimeType: string): string {
    const timestamp = Date.now();
    const extension = this.getFileExtensionFromMimeType(mimeType);
    return `document-${timestamp}.${extension}`;
  }

  private getFileExtensionFromMimeType(mimeType: string): string {
    const extensions: { [key: string]: string } = {
      'application/pdf': 'pdf',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'docx',
      'application/msword': 'doc'
    };
    return extensions[mimeType] || 'bin';
  }

  private async convertBase64ToFile(base64Data: string, mimeType: string): Promise<Buffer> {
    try {
      // Remover prefixo data: se existir
      const base64 = base64Data.replace(/^data:[^;]+;base64,/, '');
      const buffer = Buffer.from(base64, 'base64');
      
      this.logger.log(`üìÑ Arquivo convertido: ${buffer.length} bytes, tipo: ${mimeType}`);
      return buffer;
    } catch (error) {
      this.logger.error('‚ùå Erro ao converter base64:', error);
      throw new Error('Falha na convers√£o do documento');
    }
  }

  private async analyzeDocumentWithExternalAPI(fileUrl: string, jurisdiction?: string): Promise<any> {
    try {
      this.logger.log('üîç Enviando documento para an√°lise externa...');
      
      // ‚úÖ NOVO: Gerar prompt localizado baseado na jurisdi√ß√£o
      const promptText = this.generateLocalizedAnalysisPrompt(jurisdiction);
      
      const response = await axios.post(
        'https://us-central1-gleaming-nomad-443014-u2.cloudfunctions.net/vertex-LawX-personalizada',
        {
          prompt_text: promptText,
          file_url: fileUrl
        },
        {
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );

      this.logger.log('‚úÖ An√°lise externa conclu√≠da');

      // Verificar se a resposta √© um JSON v√°lido
      let analysisData;
      try {
        analysisData = typeof response.data === 'string' ? JSON.parse(response.data) : response.data;
      } catch (parseError) {
        this.logger.error('‚ùå Erro ao fazer parse do JSON:', parseError);
        throw new Error('Resposta inv√°lida do servi√ßo de an√°lise');
      }

      // Retornar dados JSON para formata√ß√£o posterior
      return analysisData;
    } catch (error) {
      this.logger.error('‚ùå Erro na an√°lise externa:', error);
      
      if (error.response) {
        this.logger.error('‚ùå Status da resposta:', error.response.status);
        this.logger.error('‚ùå Dados da resposta:', error.response.data);
      }
      
      throw new Error('Falha na an√°lise do documento. Tente novamente.');
    }
  }

  private checkAnalysisTimeout(conversationState: ConversationState): boolean {
    if (!conversationState.analysisStartTime) {
      return false;
    }
    
    const currentTime = Date.now();
    const timeElapsed = currentTime - conversationState.analysisStartTime;
    const timeoutMs = 10 * 60 * 1000; // 10 minutos em milissegundos
    
    return timeElapsed > timeoutMs;
  }

  /**
   * Processa confirma√ß√£o de an√°lise de documento
   */
  private async handleAnalysisConfirmation(message: any, phone: string, user: User | null, jurisdiction: string): Promise<void> {
    try {
      const text = message.message?.conversation || '';
      
      // Usar IA para detectar confirma√ß√£o/nega√ß√£o
      const detection = await this.aiService.detectConfirmationOrDenial(text, jurisdiction);
      
      if (detection.isConfirmation && detection.confidence > 0.7) {
        // Usu√°rio quer analisar outro documento
        await this.sendMessage(phone, this.getAnalysisConfirmationMessage(jurisdiction));
        // Manter isInAnalysis = true (j√° est√° definido)
        
      } else if (detection.isDenial && detection.confidence > 0.7) {
        // Usu√°rio n√£o quer analisar outro documento
        const conversationState = this.getConversationState(phone);
        this.setConversationState(phone, {
          ...conversationState,
          isInAnalysis: false,
          analysisStartTime: undefined
        });
        
        // Mostrar menu legal
        await this.showLegalMenu(phone, jurisdiction);
        
      } else {
        // Resposta n√£o reconhecida ou confian√ßa baixa
        await this.sendMessage(phone, this.getUnrecognizedResponseMessage(jurisdiction));
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar confirma√ß√£o de an√°lise:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sua resposta. Tente novamente.');
    }
  }

  /**
   * Avisa sobre aceita√ß√£o apenas de PDF/DOCX durante an√°lise
   */
  private async handleTextDuringAnalysis(phone: string, jurisdiction: string): Promise<void> {
    await this.sendMessage(phone, this.getTextDuringAnalysisMessage(jurisdiction));
  }

  /**
   * Verifica se a mensagem √© uma confirma√ß√£o (sim/n√£o) usando IA
   */
  private async isConfirmationMessage(message: any, jurisdiction: string): Promise<boolean> {
    try {
      const text = message.message?.conversation || '';
      
      // Usar IA para detectar confirma√ß√£o/nega√ß√£o
      const detection = await this.aiService.detectConfirmationOrDenial(text, jurisdiction);
      
      // Retorna true se for confirma√ß√£o ou nega√ß√£o com confian√ßa alta
      return (detection.isConfirmation || detection.isDenial) && detection.confidence > 0.7;
    } catch (error) {
      this.logger.error('‚ùå Erro ao verificar confirma√ß√£o com IA:', error);
      
      // Fallback para verifica√ß√£o simples
      const text = message.message?.conversation?.toLowerCase() || '';
      return text.includes('sim') || text.includes('yes') || text.includes('s') ||
             text.includes('n√£o') || text.includes('nao') || text.includes('no') || text.includes('n') ||
             text.includes('s√≠') || text.includes('si');
    }
  }

  /**
   * Mensagens de timeout de an√°lise por jurisdi√ß√£o
   */
  private getAnalysisTimeoutMessage(jurisdiction: string): string {
    switch (jurisdiction) {
      case 'BR':
        return '‚è∞ Acho que n√£o deseja enviar documento. Estou saindo do modo de espera.';
      case 'PT':
        return '‚è∞ Parece que n√£o deseja enviar documento. Estou a sair do modo de espera.';
      case 'ES':
        return '‚è∞ Parece que no desea enviar documento. Estoy saliendo del modo de espera.';
      default:
        return '‚è∞ Timeout reached. Exiting analysis mode.';
    }
  }

  /**
   * Mensagens de confirma√ß√£o de an√°lise por jurisdi√ß√£o
   */
  private getAnalysisConfirmationMessage(jurisdiction: string): string {
    switch (jurisdiction) {
      case 'BR':
        return '‚úÖ Ok, pode enviar outro documento para ser analisado.';
      case 'PT':
        return '‚úÖ Ok, pode enviar outro documento para ser analisado.';
      case 'ES':
        return '‚úÖ Ok, puede enviar otro documento para ser analizado.';
      default:
        return '‚úÖ Ok, you can send another document to be analyzed.';
    }
  }

  /**
   * Mensagens de aviso sobre PDF/DOCX por jurisdi√ß√£o
   */
  private getTextDuringAnalysisMessage(jurisdiction: string): string {
    switch (jurisdiction) {
      case 'BR':
        return '‚ö†Ô∏è Durante a an√°lise de documentos, s√≥ aceito arquivos PDF ou DOCX. Envie um documento v√°lido ou responda "sim" ou "n√£o" para continuar.';
      case 'PT':
        return '‚ö†Ô∏è Durante a an√°lise de documentos, s√≥ aceito ficheiros PDF ou DOCX. Envie um documento v√°lido ou responda "sim" ou "n√£o" para continuar.';
      case 'ES':
        return '‚ö†Ô∏è Durante el an√°lisis de documentos, solo acepto archivos PDF o DOCX. Env√≠e un documento v√°lido o responda "s√≠" o "no" para continuar.';
      default:
        return '‚ö†Ô∏è During document analysis, I only accept PDF or DOCX files. Send a valid document or answer "yes" or "no" to continue.';
    }
  }

  /**
   * Mensagens de resposta n√£o reconhecida por jurisdi√ß√£o
   */
  private getUnrecognizedResponseMessage(jurisdiction: string): string {
    switch (jurisdiction) {
      case 'BR':
        return '‚ùì Por favor, responda "sim" ou "n√£o" se deseja analisar outro documento.';
      case 'PT':
        return '‚ùì Por favor, responda "sim" ou "n√£o" se deseja analisar outro documento.';
      case 'ES':
        return '‚ùì Por favor, responda "s√≠" o "no" si desea analizar otro documento.';
      default:
        return '‚ùì Please answer "yes" or "no" if you want to analyze another document.';
    }
  }

  /**
   * Gera prompt localizado para an√°lise de documento baseado na jurisdi√ß√£o
   */
  private generateLocalizedAnalysisPrompt(jurisdiction?: string): string {
    const isSpanish = jurisdiction === 'ES';
    const isPortuguese = jurisdiction === 'PT';
    
    if (isSpanish) {
      return `Analiza este documento jur√≠dico y proporciona un resumen completo y detallado.

IMPORTANTE: Devuelve la respuesta EXACTAMENTE en el formato JSON siguiente, sin texto adicional:

{
  "documentType": "tipo de documento (contrato, petici√≥n, dictamen, sentencia, etc.)",
  "parties": ["lista de las partes involucradas"],
  "mainObjective": "objetivo principal del documento",
  "importantPoints": ["lista de los puntos m√°s relevantes"],
  "relevantClauses": ["cl√°usulas o art√≠culos m√°s importantes"],
  "deadlinesAndValues": "plazos, valores y fechas importantes",
  "identifiedRisks": ["riesgos o problemas identificados"],
  "recommendations": ["sugerencias pr√°cticas"],
  "executiveSummary": "resumen conciso de los puntos principales"
}

S√© espec√≠fico, pr√°ctico y proporciona un an√°lisis jur√≠dico completo y √∫til.`;
    }
    
    if (isPortuguese) {
      return `Analisa este documento jur√≠dico e fornece um resumo completo e detalhado.

IMPORTANTE: Retorna a resposta EXATAMENTE no formato JSON abaixo, sem texto adicional:

{
  "documentType": "tipo do documento (contrato, peti√ß√£o, parecer, senten√ßa, etc.)",
  "parties": ["lista das partes envolvidas"],
  "mainObjective": "objetivo principal do documento",
  "importantPoints": ["lista dos pontos mais relevantes"],
  "relevantClauses": ["cl√°usulas ou artigos mais importantes"],
  "deadlinesAndValues": "prazos, valores e datas importantes",
  "identifiedRisks": ["riscos ou problemas identificados"],
  "recommendations": ["sugest√µes pr√°ticas"],
  "executiveSummary": "resumo conciso dos pontos principais"
}

Seja espec√≠fico, pr√°tico e forne√ßa uma an√°lise jur√≠dica completa e √∫til.`;
    }
    
    // Default para Brasil (portugu√™s brasileiro)
    return `Analise este documento jur√≠dico e forne√ßa um resumo completo e detalhado. 

IMPORTANTE: Retorne a resposta EXATAMENTE no formato JSON abaixo, sem texto adicional:

{
  "documentType": "tipo do documento (contrato, peti√ß√£o, parecer, senten√ßa, etc.)",
  "parties": ["lista das partes envolvidas"],
  "mainObjective": "objetivo principal do documento",
  "importantPoints": ["lista dos pontos mais relevantes"],
  "relevantClauses": ["cl√°usulas ou artigos mais importantes"],
  "deadlinesAndValues": "prazos, valores e datas importantes",
  "identifiedRisks": ["riscos ou problemas identificados"],
  "recommendations": ["sugest√µes pr√°ticas"],
  "executiveSummary": "resumo conciso dos pontos principais"
}

Seja espec√≠fico, pr√°tico e forne√ßa uma an√°lise jur√≠dica completa e √∫til.`;
  }

  /**
   * Formata an√°lise do documento em texto leg√≠vel para o usu√°rio (localizado)
   */
  private formatDocumentAnalysisForUser(analysisData: any, jurisdiction?: string): string {
    try {
      const isSpanish = jurisdiction === 'ES';
      const isPortuguese = jurisdiction === 'PT';
      
      let formattedText: string;
      let labels: any;
      
      if (isSpanish) {
        formattedText = 'üìÑ **AN√ÅLISIS JUR√çDICO DEL DOCUMENTO**\n\n';
        labels = {
          documentType: 'üìã **Tipo de Documento:**',
          parties: 'üë• **Partes Involucradas:**',
          mainObjective: 'üéØ **Objetivo Principal:**',
          importantPoints: '‚≠ê **Puntos Importantes:**',
          relevantClauses: 'üìú **Cl√°usulas/Art√≠culos Relevantes:**',
          deadlinesAndValues: '‚è∞ **Plazos y Valores:**',
          identifiedRisks: '‚ö†Ô∏è **Riesgos Identificados:**',
          recommendations: 'üí° **Recomendaciones:**',
          executiveSummary: 'üìù **Resumen Ejecutivo:**',
          completed: '‚úÖ *¬°An√°lisis completado con √©xito!*'
        };
      } else if (isPortuguese) {
        formattedText = 'üìÑ **AN√ÅLISE JUR√çDICA DO DOCUMENTO**\n\n';
        labels = {
          documentType: 'üìã **Tipo de Documento:**',
          parties: 'üë• **Partes Envolvidas:**',
          mainObjective: 'üéØ **Objetivo Principal:**',
          importantPoints: '‚≠ê **Pontos Importantes:**',
          relevantClauses: 'üìú **Cl√°usulas/Artigos Relevantes:**',
          deadlinesAndValues: '‚è∞ **Prazos e Valores:**',
          identifiedRisks: '‚ö†Ô∏è **Riscos Identificados:**',
          recommendations: 'üí° **Recomenda√ß√µes:**',
          executiveSummary: 'üìù **Resumo Executivo:**',
          completed: '‚úÖ *An√°lise conclu√≠da com sucesso!*'
        };
      } else {
        // Default para Brasil
        formattedText = 'üìÑ **AN√ÅLISE JUR√çDICA DO DOCUMENTO**\n\n';
        labels = {
          documentType: 'üìã **Tipo de Documento:**',
          parties: 'üë• **Partes Envolvidas:**',
          mainObjective: 'üéØ **Objetivo Principal:**',
          importantPoints: '‚≠ê **Pontos Importantes:**',
          relevantClauses: 'üìú **Cl√°usulas/Artigos Relevantes:**',
          deadlinesAndValues: '‚è∞ **Prazos e Valores:**',
          identifiedRisks: '‚ö†Ô∏è **Riscos Identificados:**',
          recommendations: 'üí° **Recomenda√ß√µes:**',
          executiveSummary: 'üìù **Resumo Executivo:**',
          completed: '‚úÖ *An√°lise conclu√≠da com sucesso!*'
        };
      }

      // Tipo de Documento
      if (analysisData.documentType) {
        formattedText += `${labels.documentType} ${analysisData.documentType}\n\n`;
      }

      // Partes Envolvidas
      if (analysisData.parties && Array.isArray(analysisData.parties) && analysisData.parties.length > 0) {
        formattedText += `${labels.parties}\n`;
        analysisData.parties.forEach((party: string, index: number) => {
          formattedText += `‚Ä¢ ${party}\n`;
        });
        formattedText += '\n';
      }

      // Objetivo Principal
      if (analysisData.mainObjective) {
        formattedText += `${labels.mainObjective}\n${analysisData.mainObjective}\n\n`;
      }

      // Pontos Importantes
      if (analysisData.importantPoints && Array.isArray(analysisData.importantPoints) && analysisData.importantPoints.length > 0) {
        formattedText += `${labels.importantPoints}\n`;
        analysisData.importantPoints.forEach((point: string, index: number) => {
          formattedText += `‚Ä¢ ${point}\n`;
        });
        formattedText += '\n';
      }

      // Cl√°usulas Relevantes
      if (analysisData.relevantClauses && Array.isArray(analysisData.relevantClauses) && analysisData.relevantClauses.length > 0) {
        formattedText += `${labels.relevantClauses}\n`;
        analysisData.relevantClauses.forEach((clause: string, index: number) => {
          formattedText += `‚Ä¢ ${clause}\n`;
        });
        formattedText += '\n';
      }

      // Prazos e Valores
      if (analysisData.deadlinesAndValues) {
        formattedText += `${labels.deadlinesAndValues}\n${analysisData.deadlinesAndValues}\n\n`;
      }

      // Riscos Identificados
      if (analysisData.identifiedRisks && Array.isArray(analysisData.identifiedRisks) && analysisData.identifiedRisks.length > 0) {
        formattedText += `${labels.identifiedRisks}\n`;
        analysisData.identifiedRisks.forEach((risk: string, index: number) => {
          formattedText += `‚Ä¢ ${risk}\n`;
        });
        formattedText += '\n';
      }

      // Recomenda√ß√µes
      if (analysisData.recommendations && Array.isArray(analysisData.recommendations) && analysisData.recommendations.length > 0) {
        formattedText += `${labels.recommendations}\n`;
        analysisData.recommendations.forEach((recommendation: string, index: number) => {
          formattedText += `‚Ä¢ ${recommendation}\n`;
        });
        formattedText += '\n';
      }

      // Resumo Executivo
      if (analysisData.executiveSummary) {
        formattedText += `${labels.executiveSummary}\n${analysisData.executiveSummary}\n\n`;
      }

      formattedText += '---\n';
      formattedText += labels.completed;

      return formattedText;
    } catch (error) {
      this.logger.error('‚ùå Erro ao formatar an√°lise:', error);
      return '‚ùå Erro ao processar a an√°lise do documento.';
    }
  }

  /**
   * Obt√©m mensagem localizada baseada na jurisdi√ß√£o
   */
  private getLocalizedMessage(key: string, jurisdiction?: string): string {
    const isSpanish = jurisdiction === 'ES';
    const isPortuguese = jurisdiction === 'PT';
    
    const messages = {
      analyzing_document: {
        ES: 'üîç Estoy analizando el documento jur√≠dico...',
        PT: 'üîç Estou a analisar o documento jur√≠dico...',
        BR: 'üîç Estou analisando o documento jur√≠dico...'
      },
      analyze_another_document: {
        ES: '\n\nü§î ¬øDeseas analizar otro documento? Responde "s√≠" o "no".',
        PT: '\n\nü§î Desejas analisar outro documento? Responde "sim" ou "n√£o".',
        BR: '\n\nü§î Deseja analisar outro documento? Responda "sim" ou "n√£o".'
      }
    };
    
    if (isSpanish) return messages[key]?.ES || messages[key]?.BR;
    if (isPortuguese) return messages[key]?.PT || messages[key]?.BR;
    return messages[key]?.BR || messages[key]?.ES;
  }

  /**
   * Obt√©m mensagem de erro localizada baseada na jurisdi√ß√£o
   */
  private getLocalizedErrorMessage(key: string, jurisdiction?: string): string {
    const isSpanish = jurisdiction === 'ES';
    const isPortuguese = jurisdiction === 'PT';
    
    const errorMessages = {
      extract_document_failed: {
        ES: '‚ùå No pude extraer el documento del mensaje. Int√©ntalo de nuevo.',
        PT: '‚ùå N√£o consegui extrair o documento da mensagem. Tenta novamente.',
        BR: '‚ùå N√£o consegui extrair o documento da mensagem. Tente novamente.'
      },
      file_too_large: {
        ES: '‚ùå Archivo muy grande. El l√≠mite es de 20MB. Env√≠a un archivo m√°s peque√±o.',
        PT: '‚ùå Ficheiro muito grande. O limite √© de 20MB. Envia um ficheiro mais pequeno.',
        BR: '‚ùå Arquivo muito grande. O limite √© de 20MB. Envie um arquivo menor.'
      },
      unsupported_file_type: {
        ES: '‚ùå Tipo de documento no soportado. Env√≠a solo PDF o DOCX.',
        PT: '‚ùå Tipo de documento n√£o suportado. Envia apenas PDF ou DOCX.',
        BR: '‚ùå Tipo de documento n√£o suportado. Envie apenas PDF ou DOCX.'
      },
      document_analysis_failed: {
        ES: '‚ùå Error al analizar el documento. Env√≠a el documento de nuevo.',
        PT: '‚ùå Erro ao analisar o documento. Envia o documento novamente.',
        BR: '‚ùå Erro ao analisar o documento. Envie o documento novamente.'
      }
    };
    
    if (isSpanish) return errorMessages[key]?.ES || errorMessages[key]?.BR;
    if (isPortuguese) return errorMessages[key]?.PT || errorMessages[key]?.BR;
    return errorMessages[key]?.BR || errorMessages[key]?.ES;
  }
} 