import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import axios from 'axios';
import { UsersService, User } from '../users/users.service';
import { AiService } from '../ai/ai.service';
import { UsageService } from '../usage/usage.service';
import { UploadService } from '../upload/upload.service';
import { StripeService } from '../stripe/stripe.service';
import { UpgradeSessionsService } from '../upgrade-sessions/upgrade-sessions.service';
import { PlansService } from '../plans/plans.service';
import { SubscriptionsService } from '../subscriptions/subscriptions.service';
import { JurisdictionService } from '../jurisdiction/jurisdiction.service';
import { TeamsService } from '../teams/teams.service';
import { PrismaService } from '../prisma/prisma.service';
import { WebhookDto } from './dto/webhook.dto';

interface ConversationState {
  isWaitingForName: boolean;
  isWaitingForEmail: boolean;
  isWaitingForConfirmation: boolean;
  isInUpgradeFlow: boolean;
  isInRegistrationFlow: boolean;
  registrationStep: 'introduction' | 'name' | 'email' | 'confirmation' | 'completed';
  upgradeStep: 'introduction' | 'plan_selection' | 'frequency_selection' | 'payment_info' | 'confirmation';
  selectedPlan?: string;
  selectedFrequency?: 'monthly' | 'yearly';
  pendingDocument?: any;
  jurisdiction?: string;
  ddi?: string;
  pendingName?: string;
  pendingEmail?: string;
}

interface LegalDocument {
  id: string;
  user_id: string;
  type: string;
  content: string;
  analysis?: string;
  jurisdiction: string;
  created_at: string;
}

@Injectable()
export class WhatsAppService {
  private readonly logger = new Logger(WhatsAppService.name);
  private conversationStates = new Map<string, ConversationState>();

  constructor(
    private configService: ConfigService,
    private aiService: AiService,
    private usageService: UsageService,
    private uploadService: UploadService,
    private usersService: UsersService,
    private upgradeSessionsService: UpgradeSessionsService,
    private plansService: PlansService,
    private subscriptionsService: SubscriptionsService,
    private stripeService: StripeService,
    private jurisdictionService: JurisdictionService,
    private teamsService: TeamsService,
    private prismaService: PrismaService,
  ) {}

  // M√©todos auxiliares para buscar planos dinamicamente
  private async getAllActivePlans() {
    try {
      return await this.plansService.getAllPlans();
    } catch (error) {
      this.logger.error('Erro ao buscar planos ativos:', error);
      throw error;
    }
  }

  private async getUpgradePlans() {
    try {
      return await this.plansService.getUpgradePlans();
    } catch (error) {
      this.logger.error('Erro ao buscar planos de upgrade:', error);
      throw error;
    }
  }

  private async getPlanByName(planName: string) {
    try {
      return await this.plansService.getPlanByName(planName);
    } catch (error) {
      this.logger.error(`Erro ao buscar plano ${planName}:`, error);
      throw error;
    }
  }

  private async getPlanPrice(planName: string, billingCycle: 'monthly' | 'yearly'): Promise<number> {
    try {
      const plan = await this.plansService.getPlanByName(planName);
      return billingCycle === 'monthly' ? plan.monthly_price : plan.yearly_price;
    } catch (error) {
      this.logger.error(`Erro ao buscar pre√ßo do plano ${planName}:`, error);
      throw error;
    }
  }

  private async getPlanLimits(planName: string, jurisdiction: string): Promise<string> {
    try {
      const plan = await this.plansService.getPlanByName(planName);
      
      if (plan.is_unlimited) {
        return '‚Ä¢ Consultas jur√≠dicas ilimitadas\n‚Ä¢ An√°lise de documentos ilimitada\n‚Ä¢ Mensagens ilimitadas';
      } else {
        const limitControlType = this.jurisdictionService.getLimitControlType(jurisdiction);
        
        if (limitControlType === 'teams') {
          // Para Brasil - limites controlados via Supabase teams
          return `‚Ä¢ Consultas jur√≠dicas controladas via sistema\n‚Ä¢ An√°lise de documentos controlada via sistema\n‚Ä¢ Mensagens controladas via sistema`;
        } else {
          // Para Portugal/Espanha - limites locais
          return `‚Ä¢ ${plan.consultation_limit} consultas por m√™s\n‚Ä¢ An√°lise de documentos inclu√≠da\n‚Ä¢ Mensagens ilimitadas`;
        }
      }
    } catch (error) {
      this.logger.error(`Erro ao buscar limites do plano ${planName}:`, error);
      throw error;
    }
  }

  private async detectPlanFromMessage(userMessage: string): Promise<string | null> {
    try {
      this.logger.log('üìã Detectando plano da mensagem com IA:', userMessage);
      
      // Usar IA para detectar plano
      const planAnalysis = await this.aiService.detectPlanFromMessage(userMessage);
      
      if (planAnalysis.planName && planAnalysis.confidence > 0.6) {
        this.logger.log('ü§ñ Plano detectado pela IA:', planAnalysis);
        return planAnalysis.planName;
      }
      
      // Fallback para detec√ß√£o manual
      const plans = await this.getUpgradePlans();
      const lowerMessage = userMessage.toLowerCase();
      
      const selectedPlan = plans.find(plan => 
        lowerMessage.includes(plan.name.toLowerCase())
      );
      
      return selectedPlan ? selectedPlan.name : null;
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar plano da mensagem:', error);
      return null;
    }
  }

  async handleWebhook(webhookData: any): Promise<void> {
    try {

      if (webhookData.event === 'messages.upsert') {
        // Verificar se data √© array ou objeto √∫nico
        const messages = Array.isArray(webhookData.data) ? webhookData.data : [webhookData.data];
        this.logger.log('üì® Processando mensagens:', messages.length);
        
        for (const message of messages) {
          if (message) {
            console.log('üì® Processando mensagem:', JSON.stringify(message, null, 2));
            await this.processMessage(message);
          }
        }
      } else {
        this.logger.warn('‚ö†Ô∏è Evento n√£o suportado:', webhookData.event);
      }
    } catch (error) {
      this.logger.error('Erro ao processar webhook:', error);
      throw error;
    }
  }

  /**
   * Gerencia o fluxo de cadastro para usu√°rios n√£o registrados
   */
  private async handleUnregisteredUser(
    phone: string, 
    text: string, 
    state: ConversationState, 
    jurisdiction: any, 
    isBrazilianUser: boolean
  ): Promise<void> {
    try {
      // Se √© usu√°rio brasileiro, enviar link para cadastro no site
      if (isBrazilianUser) {
        const response = `üáßüá∑ Ol√°! Seja bem-vindo ao Chat LawX!\n\nPara usu√°rios brasileiros, voc√™ precisa se cadastrar em nossa plataforma web.\n\nüîó Acesse: https://plataforma.lawx.ai/cadastro\n\nAp√≥s o cadastro, voc√™ poder√° usar nosso assistente jur√≠dico via WhatsApp.\n\nSe j√° possui cadastro, verifique se seu n√∫mero est√° vinculado √† sua conta.`;
        await this.sendMessage(phone, response);
        return;
      }

      // Para PT/ES, fluxo de cadastro via WhatsApp
      if (!state.isInRegistrationFlow) {
        // Iniciar fluxo de cadastro
        const response = `üåç Ol√°! Seja bem-vindo ao Chat LawX!\n\nSou seu assistente jur√≠dico e estou aqui para ajud√°-lo com consultas legais.\n\nPara come√ßar, preciso de algumas informa√ß√µes:\n\nüìù Qual √© o seu nome completo?`;
        await this.sendMessage(phone, response);
        this.setConversationState(phone, {
          isInRegistrationFlow: true,
          registrationStep: 'name',
          isWaitingForName: true,
          isWaitingForEmail: false,
          isWaitingForConfirmation: false,
          isInUpgradeFlow: false,
          upgradeStep: 'introduction',
          jurisdiction: jurisdiction.jurisdiction,
          ddi: jurisdiction.ddi
        });
        return;
      }

      // Processar etapas do cadastro
      if (state.registrationStep === 'name' && state.isWaitingForName) {
        // Validar nome
        if (text.length < 2) {
          await this.sendMessage(phone, '‚ùå Por favor, informe um nome v√°lido com pelo menos 2 caracteres.');
          return;
        }

        // Solicitar email
        const response = `‚úÖ Obrigado, ${text}!\n\nüìß Agora preciso do seu e-mail para completar o cadastro:`;
        await this.sendMessage(phone, response);
        this.setConversationState(phone, {
          ...state,
          registrationStep: 'email',
          isWaitingForName: false,
          isWaitingForEmail: true,
          pendingName: text
        });
        return;
      }

      if (state.registrationStep === 'email' && state.isWaitingForEmail) {
        // Validar email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(text)) {
          await this.sendMessage(phone, '‚ùå Por favor, informe um e-mail v√°lido.');
          return;
        }

        // Confirmar dados
        const response = `‚úÖ Perfeito!\n\nüìã Confirme seus dados:\n\nüë§ Nome: ${state.pendingName}\nüìß E-mail: ${text}\nüì± Telefone: ${phone}\nüåç Pa√≠s: ${jurisdiction.country}\n\nDigite "CONFIRMAR" para finalizar o cadastro ou "CANCELAR" para recome√ßar.`;
        await this.sendMessage(phone, response);
        this.setConversationState(phone, {
          ...state,
          registrationStep: 'confirmation',
          isWaitingForEmail: false,
          isWaitingForConfirmation: true,
          pendingEmail: text
        });
        return;
      }

      if (state.registrationStep === 'confirmation' && state.isWaitingForConfirmation) {
        if (text.toUpperCase() === 'CONFIRMAR') {
          // Finalizar cadastro
          await this.finalizeUserRegistration(phone, state, jurisdiction);
        } else if (text.toUpperCase() === 'CANCELAR') {
          // Recome√ßar cadastro
          const response = 'üîÑ Cadastro cancelado. Vamos recome√ßar!\n\nüìù Qual √© o seu nome completo?';
          await this.sendMessage(phone, response);
          this.setConversationState(phone, {
            isInRegistrationFlow: true,
            registrationStep: 'name',
            isWaitingForName: true,
            isWaitingForEmail: false,
            isWaitingForConfirmation: false,
            isInUpgradeFlow: false,
            upgradeStep: 'introduction',
            jurisdiction: jurisdiction.jurisdiction,
            ddi: jurisdiction.ddi
          });
        } else {
          await this.sendMessage(phone, '‚ùå Por favor, digite "CONFIRMAR" para finalizar ou "CANCELAR" para recome√ßar.');
        }
        return;
      }

    } catch (error) {
      this.logger.error('Erro no fluxo de cadastro:', error);
      await this.sendMessage(phone, '‚ùå Ocorreu um erro durante o cadastro. Tente novamente mais tarde.');
    }
  }

  /**
   * Finaliza o cadastro do usu√°rio e cria assinatura Fremium
   */
  private async finalizeUserRegistration(
    phone: string, 
    state: ConversationState, 
    jurisdiction: any
  ): Promise<void> {
    try {
      // Criar usu√°rio
      const user = await this.usersService.registerUserWithLegalInfo(
        phone,
        state.pendingName!,
        state.pendingEmail!,
        jurisdiction.jurisdiction,
        jurisdiction.ddi
      );

      // Criar assinatura Fremium automaticamente
      await this.subscriptionsService.createFremiumSubscription(user.id);

      // Mensagem de boas-vindas
      const response = `üéâ Parab√©ns, ${state.pendingName}!\n\n‚úÖ Seu cadastro foi realizado com sucesso!\n\nüéÅ Voc√™ recebeu automaticamente o plano *Fremium* com:\n‚Ä¢ 2 consultas jur√≠dicas gratuitas\n‚Ä¢ An√°lise de documentos b√°sica\n\nüí¨ Agora voc√™ pode:\n‚Ä¢ Fazer perguntas sobre direito\n‚Ä¢ Enviar documentos para an√°lise\n‚Ä¢ Solicitar orienta√ß√µes jur√≠dicas\n\nDigite "MENU" para ver todas as op√ß√µes dispon√≠veis.`;
      
      await this.sendMessage(phone, response);
      
      // Limpar estado da conversa
      this.clearConversationState(phone);
      
      this.logger.log(`‚úÖ Usu√°rio ${phone} cadastrado com sucesso com plano Fremium`);

    } catch (error) {
      this.logger.error('Erro ao finalizar cadastro:', error);
      await this.sendMessage(phone, '‚ùå Erro ao finalizar cadastro. Tente novamente mais tarde.');
    }
  }

  private async processMessage(message: any): Promise<void> {
    try {
      if (!message.key?.remoteJid) {
        return;
      }
      
      const phone = message.key.remoteJid.replace('@s.whatsapp.net', '');
      const isFromMe = message.key.fromMe;
      
      if (isFromMe) {
        return;
      }

      // Detectar jurisdi√ß√£o baseada no n√∫mero de telefone
      const jurisdiction = this.jurisdictionService.detectJurisdiction(phone);
      this.logger.log(`Jurisdi√ß√£o detectada: ${jurisdiction.jurisdiction} para ${phone}`);

      // Verificar se √© usu√°rio brasileiro (j√° cadastrado no Supabase)
      const isBrazilianUser = jurisdiction.jurisdiction === 'BR';
      
      let user: User | null = null;
      if (!isBrazilianUser) {
        // Para Portugal/Espanha, criar ou buscar usu√°rio local
        user = await this.usersService.getOrCreateUser(phone);
      }
      
      const state = this.getConversationState(phone);
      this.logger.log('üí¨ Estado da conversa:', JSON.stringify(state, null, 2));

      // Extrair texto da mensagem
      const text = message.message?.conversation || '';

      // Verificar se usu√°rio n√£o est√° registrado
      if (!user || !user.is_registered) {
        await this.handleUnregisteredUser(phone, text, state, jurisdiction, isBrazilianUser);
        return;
      }

      // Processar imagem se presente
      if (message.message?.imageMessage) {
        console.log('üñºÔ∏è Processando imagem');
        await this.handleImageMessage(message, user, phone);
        return;
      }

      // Processar √°udio se presente
      if (message.message?.audioMessage) {
        console.log('üéµ Processando √°udio');
        await this.handleAudioMessage(message, user, phone);
        return;
      }

      // Processar texto
      await this.handleTextMessage(text, user, phone, state);
    } catch (error) {
      this.logger.error('Erro ao processar mensagem:', error);
    }
  }

  private async handleImageMessage(message: any, user: User | null, phone: string): Promise<void> {
    try {
      this.logger.log('üì∏ Processando mensagem de imagem jur√≠dica...');
      
      // Download da imagem
      const imageBuffer = await this.downloadImage(message);
      if (!imageBuffer) {
        await this.sendMessage(phone, '‚ùå N√£o consegui baixar a imagem. Tente novamente.');
        return;
      }

      await this.sendMessage(phone, 'üîç Estou analisando o documento jur√≠dico...');
      
      // Detectar jurisdi√ß√£o
      const jurisdiction = this.jurisdictionService.detectJurisdiction(phone);
      
      // Analisar documento jur√≠dico
      const analysis = await this.aiService.analyzeLegalDocument(
        imageBuffer,
        jurisdiction.jurisdiction,
        user?.id
      );
      
      // Salvar documento no banco de dados apropriado
      await this.saveLegalDocument(analysis, jurisdiction.jurisdiction, user?.id);
      
      // Enviar resposta com an√°lise
      const response = `üìã **An√°lise do Documento Jur√≠dico**\n\n` +
        `**Tipo:** ${analysis.type}\n\n` +
        `**An√°lise:**\n${analysis.analysis}\n\n` +
        `**Riscos Identificados:**\n${analysis.risks.map(risk => `‚Ä¢ ${risk}`).join('\n')}\n\n` +
        `**Sugest√µes:**\n${analysis.suggestions.map(suggestion => `‚Ä¢ ${suggestion}`).join('\n')}\n\n` +
        `‚ö†Ô∏è *Esta an√°lise √© informativa. Para casos espec√≠ficos, consulte um advogado.*`;
      
      await this.sendMessage(phone, response);
      
    } catch (error) {
      this.logger.error('Erro ao processar imagem jur√≠dica:', error);
      await this.sendMessage(phone, '‚ùå Erro ao analisar o documento. Tente novamente ou envie uma imagem mais clara.');
    }
  }

  /**
   * Salva documento jur√≠dico no banco de dados apropriado
   */
  private async saveLegalDocument(
    analysis: any,
    jurisdiction: string,
    userId?: string
  ): Promise<void> {
    try {
      if (jurisdiction === 'BR') {
        // Para Brasil - salvar no Supabase (via teams service)
        // TODO: Implementar salvamento de documento jur√≠dico no Supabase
        // await this.teamsService.saveLegalDocument({
        //   userId: userId || '',
        //   type: analysis.type,
        //   content: analysis.analysis,
        //   analysis: analysis.analysis,
        //   jurisdiction,
        // });
      } else {
        // Para Portugal/Espanha - salvar no MySQL local
        // TODO: Implementar salvamento de documento jur√≠dico no MySQL
        // await this.prismaService.createLegalDocument({
        //   userId: userId || '',
        //   type: analysis.type,
        //   content: analysis.analysis,
        //   analysis: analysis.analysis,
        //   jurisdiction,
        // });
      }
    } catch (error) {
      this.logger.error('Erro ao salvar documento jur√≠dico:', error);
      // N√£o lan√ßar erro para n√£o interromper o fluxo
    }
  }

  private async handleRevenueImage(extractedData: any, user: User, phone: string, imageBuffer: Buffer): Promise<void> {
    try {
      // Upload da imagem
      const imageUrl = await this.uploadService.uploadReceiptImage(imageBuffer, 'revenue.jpg');
      
      // Criar receita
      const revenueData = {
        user_id: user.id,
        amount: extractedData.amount,
        original_amount: extractedData.original_amount,
        discount_amount: extractedData.discount_amount,
        category: extractedData.category,
        date: extractedData.date,
        image_url: imageUrl,
        description: extractedData.description,
        payment_method: extractedData.payment_method,
        payer_name: extractedData.payer_name,
        payer_cnpj: extractedData.payer_cnpj,
        payer_address: extractedData.payer_address,
        document_type: extractedData.document_type,
        document_number: extractedData.document_number,
        revenue_type: extractedData.revenue_type,
        source: extractedData.source,
      };

      // TODO: Implementar cria√ß√£o de receita para Chat LawX
      // const revenue = await this.revenuesService.create(revenueData);
      
      // Incrementar contador de uso
      await this.usageService.incrementUsage(user.id, 'consultation');
      
      // Enviar confirma√ß√£o
      // TODO: Implementar confirma√ß√£o de receita para Chat LawX
      // const confirmationMessage = this.formatRevenueConfirmation(revenue);
      const confirmationMessage = '‚úÖ Consulta jur√≠dica registrada com sucesso!';
      await this.sendMessage(phone, confirmationMessage);
      
      this.logger.log(`‚úÖ Receita criada com sucesso para usu√°rio ${user.id}`);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar receita:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar a receita. Tente novamente.');
    }
  }

  private async handleExpenseImage(extractedData: any, user: User, phone: string, imageBuffer: Buffer): Promise<void> {
    try {
      // Upload da imagem
      const imageUrl = await this.uploadService.uploadReceiptImage(imageBuffer, 'expense.jpg');
      
      // Criar despesa
      const expenseData = {
        user_id: user.id,
        amount: extractedData.amount,
        original_amount: extractedData.original_amount,
        discount_amount: extractedData.discount_amount,
        category: extractedData.category,
        date: extractedData.date,
        image_url: imageUrl,
        description: extractedData.description,
        payment_method: extractedData.payment_method,
        store_name: extractedData.store_name,
        store_cnpj: extractedData.store_cnpj,
        store_address: extractedData.store_address,
        document_type: extractedData.document_type,
        document_number: extractedData.document_number,
      };

      // TODO: Implementar cria√ß√£o de despesa para Chat LawX
      // const expense = await this.expensesService.create(expenseData);
      
      // Incrementar contador de uso
      await this.usageService.incrementUsage(user.id, 'consultation');
      
      // Enviar confirma√ß√£o
      // TODO: Implementar confirma√ß√£o de despesa para Chat LawX
      // const confirmationMessage = this.formatExpenseConfirmation(expense);
      const confirmationMessage = '‚úÖ Consulta jur√≠dica registrada com sucesso!';
      await this.sendMessage(phone, confirmationMessage);
      
      this.logger.log(`‚úÖ Despesa criada com sucesso para usu√°rio ${user.id}`);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar despesa:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar a despesa. Tente novamente.');
    }
  }

  private async handleTextMessage(text: string, user: User | null, phone: string, state: ConversationState): Promise<void> {
    try {
      this.logger.log('üìù Processando mensagem de texto jur√≠dica:', text);

      // 0. Verificar se √© comando "menu"
      if (text.toLowerCase().trim() === 'menu') {
        await this.showLegalMenu(phone);
        return;
      }

      // 1. Verificar se h√° sess√£o de upgrade ativa ou estado de upgrade
      if (user) {
      const activeSession = await this.upgradeSessionsService.getActiveSession(user.id);
      if (activeSession || state.isInUpgradeFlow) {
        this.logger.log('üîÑ Sess√£o de upgrade ativa, processando com IA...');
        await this.processUpgradeFlowWithAI(phone, user.id, text, activeSession, state);
        return;
      }

      // 2. Verificar se √© uma nova inten√ß√£o de upgrade
      const upgradeIntent = await this.detectUpgradeIntent(text, user.id);
      if (upgradeIntent.isUpgradeIntent) {
        this.logger.log('üÜï Nova inten√ß√£o de upgrade detectada:', upgradeIntent);
        await this.handleUpgradeFlow(phone, user.id, text);
        return;
      }
      }

      // 3. Processar consulta jur√≠dica
      await this.handleLegalConsultation(text, phone, user);

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar mensagem de texto:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sua mensagem. Tente novamente.');
    }
  }

  /**
   * Processa consulta jur√≠dica
   */
  private async handleLegalConsultation(text: string, phone: string, user: User | null): Promise<void> {
    try {
      // Detectar jurisdi√ß√£o
      const jurisdiction = this.jurisdictionService.detectJurisdiction(phone);
      
      // Gerar resposta jur√≠dica
      const response = await this.aiService.generateLegalResponse(
        text,
        phone,
        user?.id,
        undefined // Sem conte√∫do de documento
      );
      
      await this.sendMessage(phone, response);

    } catch (error) {
      this.logger.error('Erro ao processar consulta jur√≠dica:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sua consulta jur√≠dica. Tente novamente.');
    }
  }

  /**
   * Mostra menu jur√≠dico
   */
  private async showLegalMenu(phone: string): Promise<void> {
    const menu = `‚öñÔ∏è **Chat LawX - Menu Jur√≠dico**\n\n` +
      `üìã **Funcionalidades Dispon√≠veis:**\n` +
      `‚Ä¢ Envie documentos jur√≠dicos (contratos, peti√ß√µes, etc.)\n` +
      `‚Ä¢ Fa√ßa consultas jur√≠dicas por texto\n` +
      `‚Ä¢ An√°lise de riscos em documentos\n` +
      `‚Ä¢ Sugest√µes de cl√°usulas contratuais\n` +
      `‚Ä¢ Pesquisa de jurisprud√™ncia\n\n` +
      `üí° **Como usar:**\n` +
      `‚Ä¢ Digite sua pergunta jur√≠dica\n` +
      `‚Ä¢ Envie foto de documento para an√°lise\n` +
      `‚Ä¢ Use "upgrade" para ver planos premium\n\n` +
      `‚ö†Ô∏è *Lembre-se: Este √© um assistente informativo. Para casos espec√≠ficos, consulte um advogado.*`;
    
    await this.sendMessage(phone, menu);
  }

  private async handleFinancialEntry(text: string, user: User, phone: string, financialEntry: any): Promise<void> {
    try {
      this.logger.log('üí∞ Processando lan√ßamento financeiro:', financialEntry);

      // Extrair dados do texto
      const extractedData = await this.aiService.extractDataFromText(text);
      
      // Verificar se a classifica√ß√£o da IA coincide com a detec√ß√£o
      if (extractedData.document_classification !== financialEntry.type) {
        this.logger.warn('‚ö†Ô∏è Classifica√ß√£o divergente, usando detec√ß√£o inicial');
        extractedData.document_classification = financialEntry.type;
      }

      // Processar baseado no tipo
      if (extractedData.document_classification === 'revenue') {
        await this.handleRevenueText(extractedData, user, phone);
      } else {
        await this.handleExpenseText(extractedData, user, phone);
      }

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar lan√ßamento financeiro:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar o lan√ßamento. Tente novamente.');
    }
  }

  private async handleRevenueText(extractedData: any, user: User, phone: string): Promise<void> {
    try {
      // Verificar limites de receitas
      const limits = await this.usageService.checkLimits(user.id, 'consultation');
      if (!limits.allowed) {
        await this.sendMessage(phone, limits.message);
        return;
      }

      // Criar receita
      const revenueData = {
        user_id: user.id,
        amount: extractedData.amount,
        original_amount: extractedData.original_amount,
        discount_amount: extractedData.discount_amount,
        category: extractedData.category,
        date: extractedData.date,
        image_url: '', // N√£o h√° imagem para lan√ßamento via texto
        description: extractedData.description,
        payment_method: extractedData.payment_method,
        payer_name: extractedData.payer_name,
        payer_cnpj: extractedData.payer_cnpj,
        payer_address: extractedData.payer_address,
        document_type: extractedData.document_type,
        document_number: extractedData.document_number,
        revenue_type: extractedData.revenue_type,
        source: extractedData.source,
      };

      // TODO: Implementar cria√ß√£o de receita para Chat LawX
      // const revenue = await this.revenuesService.create(revenueData);
      
      // Incrementar contador de uso
      await this.usageService.incrementUsage(user.id, 'consultation');
      
      // Enviar confirma√ß√£o
      // TODO: Implementar confirma√ß√£o de receita para Chat LawX
      // const confirmationMessage = this.formatRevenueConfirmation(revenue);
      const confirmationMessage = '‚úÖ Consulta jur√≠dica registrada com sucesso!';
      await this.sendMessage(phone, confirmationMessage);
      
      this.logger.log(`‚úÖ Receita criada via texto para usu√°rio ${user.id}`);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar receita via texto:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar a receita. Tente novamente.');
    }
  }

  private async handleExpenseText(extractedData: any, user: User, phone: string): Promise<void> {
    try {
      // Verificar limites de despesas
      const limits = await this.usageService.checkLimits(user.id, 'consultation');
      if (!limits.allowed) {
        await this.sendMessage(phone, limits.message);
        await this.sendMessage(phone, 'Qual o plano atenderia suas necessidades nesse momento?');
        return;
      }

      // Criar despesa
      const expenseData = {
        user_id: user.id,
        amount: extractedData.amount,
        original_amount: extractedData.original_amount,
        discount_amount: extractedData.discount_amount,
        category: extractedData.category,
        date: extractedData.date,
        image_url: '', // N√£o h√° imagem para lan√ßamento via texto
        description: extractedData.description,
        payment_method: extractedData.payment_method,
        store_name: extractedData.store_name,
        store_cnpj: extractedData.store_cnpj,
        store_address: extractedData.store_address,
        document_type: extractedData.document_type,
        document_number: extractedData.document_number,
      };

      // TODO: Implementar cria√ß√£o de despesa para Chat LawX
      // const expense = await this.expensesService.create(expenseData);
      
      // Incrementar contador de uso
      await this.usageService.incrementUsage(user.id, 'consultation');
      
      // Enviar confirma√ß√£o
      // TODO: Implementar confirma√ß√£o de despesa para Chat LawX
      // const confirmationMessage = this.formatExpenseConfirmation(expense);
      const confirmationMessage = '‚úÖ Consulta jur√≠dica registrada com sucesso!';
      await this.sendMessage(phone, confirmationMessage);
      
      this.logger.log(`‚úÖ Despesa criada via texto para usu√°rio ${user.id}`);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar despesa via texto:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar a despesa. Tente novamente.');
    }
  }

  private async detectReportIntent(text: string): Promise<{ isReportRequest: boolean; confidence: number; intent: string } | null> {
    try {
      this.logger.log('üìä Detectando intent de relat√≥rio:', text);
      
      // Usar IA para detectar se √© uma solicita√ß√£o de relat√≥rio financeiro
      const reportDetection = await this.aiService.detectReportIntent(text);
      
      if (reportDetection.isReportRequest && reportDetection.confidence > 0.6) {
        this.logger.log('üìä Intent de relat√≥rio detectado:', reportDetection);
        return reportDetection;
      }
      
      return null;
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar intent de relat√≥rio:', error);
      return null;
    }
  }

  private async detectUpgradeIntent(text: string, userId: string): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      this.logger.log('üîÑ Detectando intent de upgrade com IA:', text);
      
      // Verificar se h√° sess√£o ativa primeiro
      const activeSession = await this.upgradeSessionsService.getActiveSession(userId);
      const state = this.getConversationState(userId.replace('@s.whatsapp.net', ''));
      
      // Se h√° sess√£o ativa ou estado de upgrade, analisar no contexto
      if (activeSession || state.isInUpgradeFlow) {
        this.logger.log('üîÑ Sess√£o ativa encontrada, analisando contexto...');
        return await this.analyzeUpgradeContext(text, activeSession, state);
      }
      
      // Se n√£o h√° sess√£o, verificar se √© um novo intent de upgrade
      const newUpgradeIntent = await this.detectNewUpgradeIntent(text);
      if (newUpgradeIntent.isUpgradeIntent) {
        this.logger.log('üÜï Novo intent de upgrade detectado:', newUpgradeIntent);
        return newUpgradeIntent;
      }
      
      return {
        isUpgradeIntent: false,
        confidence: 0,
        intent: 'new_upgrade'
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar intent de upgrade:', error);
      return {
        isUpgradeIntent: false,
        confidence: 0,
        intent: 'new_upgrade'
      };
    }
  }

  private async analyzeUpgradeContext(text: string, session: any, state: any): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      this.logger.log('üß† Analisando contexto de upgrade com IA...');
      
      const context = {
        currentStep: session?.current_step || state.upgradeStep,
        selectedPlan: session?.plan_name || state.selectedPlan,
        selectedFrequency: session?.billing_cycle || state.selectedFrequency,
        amount: session?.amount || 0,
        sessionId: session?.id
      };
      
      this.logger.log('üìã Contexto atual:', context);
      
      // Usar IA para analisar a inten√ß√£o no contexto
      const aiAnalysis = await this.aiService.analyzeUpgradeIntent(text, context);
      
      this.logger.log('ü§ñ An√°lise da IA:', aiAnalysis);
      
      return {
        isUpgradeIntent: true,
        confidence: aiAnalysis.confidence,
        intent: aiAnalysis.intent,
        context: context
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao analisar contexto:', error);
      // Fallback para detec√ß√£o manual
      return this.fallbackUpgradeIntentDetection(text, session, state);
    }
  }

  private async detectNewUpgradeIntent(text: string): Promise<{
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  }> {
    try {
      this.logger.log('üÜï Detectando novo intent de upgrade...');
      
      const newUpgradeIntent = await this.aiService.detectNewUpgradeIntent(text);
      
      this.logger.log('ü§ñ Novo intent detectado:', newUpgradeIntent);
      
      return {
        isUpgradeIntent: newUpgradeIntent.isUpgradeIntent,
        confidence: newUpgradeIntent.confidence,
        intent: 'new_upgrade',
        context: { isNewIntent: true }
      };
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao detectar novo intent:', error);
      return {
        isUpgradeIntent: false,
        confidence: 0,
        intent: 'new_upgrade'
      };
    }
  }

  private fallbackUpgradeIntentDetection(text: string, session: any, state: any): {
    isUpgradeIntent: boolean;
    confidence: number;
    intent: 'new_upgrade' | 'continue_upgrade' | 'payment_confirmation' | 'frequency_selection' | 'plan_selection' | 'cancel_upgrade';
    context?: any;
  } {
    const lowerText = text.toLowerCase();
    
    // Detec√ß√£o de cancelamento
    if (lowerText.includes('cancelar') || lowerText.includes('cancel') || 
        lowerText.includes('n√£o') || lowerText.includes('nao') || 
        lowerText.includes('desistir') || lowerText.includes('parar')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.8,
        intent: 'cancel_upgrade',
        context: { session, state }
      };
    }
    
    // Detec√ß√£o de confirma√ß√£o de pagamento
    if (lowerText.includes('sim') || lowerText.includes('ok') || 
        lowerText.includes('pode ser') || lowerText.includes('vamos') ||
        lowerText.includes('pagar') || lowerText.includes('prosseguir')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.7,
        intent: 'payment_confirmation',
        context: { session, state }
      };
    }
    
    // Detec√ß√£o de sele√ß√£o de frequ√™ncia
    if (lowerText.includes('mensal') || lowerText.includes('anual') || 
        lowerText.includes('monthly') || lowerText.includes('yearly') ||
        lowerText.includes('m√™s') || lowerText.includes('ano')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.8,
        intent: 'frequency_selection',
        context: { session, state }
      };
    }
    
    // Detec√ß√£o de sele√ß√£o de plano
    if (lowerText.includes('pro') || lowerText.includes('premium') || 
        lowerText.includes('b√°sico') || lowerText.includes('basico')) {
      return {
        isUpgradeIntent: true,
        confidence: 0.8,
        intent: 'plan_selection',
        context: { session, state }
      };
    }
    
    return {
      isUpgradeIntent: false,
      confidence: 0,
      intent: 'new_upgrade'
    };
  }

  private async handleReportRedirect(phone: string, reportIntent: { isReportRequest: boolean; confidence: number; intent: string }): Promise<void> {
    try {
      this.logger.log('üìä Redirecionando para app:', reportIntent);
      
      const appMessage = `üì± **Relat√≥rios e Dashboard Completo!**

üéØ **Para acessar seus relat√≥rios financeiros completos, baixe nosso app:**

üçé **App Store (iOS):**
https://apps.apple.com/app/mepoupebot

ü§ñ **Google Play (Android):**
https://play.google.com/store/apps/details?id=com.mepoupebot.app

üìä **No app voc√™ ter√° acesso a:**
‚Ä¢ Relat√≥rios detalhados de receitas e despesas
‚Ä¢ Gr√°ficos e an√°lises visuais
‚Ä¢ Filtros por per√≠odo e categoria
‚Ä¢ Exporta√ß√£o de dados
‚Ä¢ Dashboard completo em tempo real
‚Ä¢ Notifica√ß√µes e alertas

üí° **Dica:** O app √© gratuito e sincroniza automaticamente com suas mensagens do WhatsApp!`;

      await this.sendMessage(phone, appMessage);
      this.logger.log(`‚úÖ Redirecionamento para app enviado para ${phone}`);

    } catch (error) {
      this.logger.error('‚ùå Erro ao redirecionar para app:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar solicita√ß√£o. Tente novamente.');
    }
  }

  private async showMenu(phone: string): Promise<void> {
    const menuMessage = `ü§ñ *MENU DO MEPOUPEBOT* ü§ñ

*FUNCIONALIDADES DISPON√çVEIS:*

üì∏ *REGISTRAR DESPESAS/RECEITAS:*
‚Ä¢ Envie fotos de comprovantes, recibos, notas fiscais
‚Ä¢ Envie √°udios descrevendo suas despesas ou receitas  
‚Ä¢ Digite mensagens como "Compra no mercado R$ 150" ou "Sal√°rio R$ 3000"

üìä *RELAT√ìRIOS E CONSULTAS:*
‚Ä¢ "hoje" ou "gastos de hoje" - Ver despesas de hoje
‚Ä¢ "ontem" ou "gastos de ontem" - Ver despesas de ontem
‚Ä¢ "semana" ou "gastos da semana" - Relat√≥rio semanal
‚Ä¢ "m√™s" ou "gastos do m√™s" - Relat√≥rio mensal
‚Ä¢ "22/07/2025" - Data espec√≠fica
‚Ä¢ "receitas" - Ver suas receitas
‚Ä¢ "balan√ßo" - Resumo geral

üí° *DICAS E AJUDA:*
‚Ä¢ "dicas" - Dicas de economia
‚Ä¢ "como economizar" - Sugest√µes pr√°ticas
‚Ä¢ "or√ßamento" - Ajuda com planejamento

üöÄ *UPGRADE E PLANOS:*
‚Ä¢ "upgrade" ou "planos" - Conhecer planos premium
‚Ä¢ "limites" - Ver seus limites atuais

*Como usar:* Basta digitar qualquer comando acima ou conversar naturalmente comigo! üòä

*Exemplo:* "Quanto gastei hoje?" ou "Preciso de dicas para economizar"`;

    await this.sendMessage(phone, menuMessage);
  }

  private async handleReportRequest(phone: string, userId: string, reportRequest: { type: 'today' | 'week' | 'month' | 'custom' | 'status'; date?: string }, originalMessage: string): Promise<void> {
    try {
      // Verificar limites de relat√≥rios
      const limits = await this.usageService.checkLimits(userId, 'consultation');
      if (!limits.allowed) {
        await this.sendMessage(phone, limits.message);
        return;
      }

      // Incrementar contador de uso
      await this.usageService.incrementUsage(userId, 'consultation');

      let reportData: any;
      let reportMessage: string;

      if (reportRequest.type === 'status') {
        // Relat√≥rio de status/uso
        const usageSummary = await this.usageService.getUsageSummary(userId);
        reportMessage = await this.aiService.generateResponse(originalMessage, usageSummary);
      } else {
        // Relat√≥rio financeiro completo (receitas + despesas)
        // TODO: Implementar relat√≥rios para Chat LawX
        // const [expenseReport, revenueReport] = await Promise.all([
        //   this.expensesService.generateExpenseReport(userId, reportRequest.type, reportRequest.date),
        //   this.revenuesService.generateRevenueReport(userId, reportRequest.type, reportRequest.date)
        // ]);

        // TODO: Implementar relat√≥rio financeiro para Chat LawX
        // const financialReportData = {
        //   period: expenseReport.period,
        //   total_revenue: revenueReport.total || 0,
        //   total_expenses: expenseReport.total || 0,
        //   net_income: (revenueReport.total || 0) - (expenseReport.total || 0),
        //   revenue_by_category: revenueReport.byCategory || {},
        //   expense_by_category: expenseReport.byCategory || {},
        //   revenue_count: revenueReport.count || 0,
        //   expense_count: expenseReport.count || 0,
        //   top_revenues: revenueReport.topRevenues || [],
        //   top_expenses: expenseReport.topExpenses || [],
        //   revenue_by_payment_method: revenueReport.byPaymentMethod || {},
        //   expense_by_payment_method: expenseReport.byPaymentMethod || {},
        // };

        // reportMessage = await this.aiService.generateFinancialReportResponse(financialReportData, originalMessage);
        reportMessage = 'üìä Relat√≥rio de uso do Chat LawX:\n\n' + await this.aiService.generateResponse(originalMessage, 'Relat√≥rio de uso do sistema');
      }

      await this.sendMessage(phone, reportMessage);
      this.logger.log(`‚úÖ Relat√≥rio enviado para usu√°rio ${userId}`);

    } catch (error) {
      this.logger.error('‚ùå Erro ao gerar relat√≥rio:', error);
      await this.sendMessage(phone, '‚ùå Erro ao gerar o relat√≥rio. Tente novamente.');
    }
  }

  /**
   * Formata data preservando o dia original (resolve problema de timezone)
   */
  private formatDatePreservingDay(dateInput: string | Date): string {
    try {
      if (typeof dateInput === 'string') {
        // Se √© string, converter para Date preservando a data original
        this.logger.log('üîç Data original:', dateInput);
        
        // Extrair componentes da data (YYYY-MM-DD)
        const [year, month, day] = dateInput.split('-').map(Number);
        
        // Criar Date com componentes locais (n√£o UTC)
        const dataObj = new Date(year, month - 1, day); // month - 1 porque getMonth() retorna 0-11
        this.logger.log('üîç Data convertida:', dataObj.toISOString());
        
        if (isNaN(dataObj.getTime())) {
          throw new Error('Data inv√°lida');
        }
        
        const formatador = new Intl.DateTimeFormat("pt-BR");
        const dataFormatada = formatador.format(dataObj);
        this.logger.log('üîç Data formatada:', dataFormatada);
        return dataFormatada;
      } else {
        // Se j√° √© Date, formatar diretamente
        const formatador = new Intl.DateTimeFormat("pt-BR");
        const dataFormatada = formatador.format(dateInput);
        this.logger.log('üîç Data formatada:', dataFormatada);
        return dataFormatada;
      }
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è Erro ao formatar data, usando data atual:', error);
      const formatador = new Intl.DateTimeFormat("pt-BR");
      return formatador.format(new Date());
    }
  }

  private formatExpenseConfirmation(data: any): string {
    // Formata√ß√£o monet√°ria profissional
    const amount = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(data.amount);

    const originalAmount = data.original_amount && data.original_amount > data.amount
      ? new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(data.original_amount)
      : null;

    const discountAmount = data.discount_amount && data.discount_amount > 0
      ? new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(data.discount_amount)
      : data.original_amount && data.original_amount > data.amount
        ? new Intl.NumberFormat('pt-BR', {
            style: 'currency',
            currency: 'BRL'
          }).format(data.original_amount - data.amount)
        : null;

    let message = `‚úÖ *DESPESA REGISTRADA COM SUCESSO!*\n\n`;
    
    // Usar m√©todo auxiliar para formata√ß√£o de data
    const dataFormatada = this.formatDatePreservingDay(data.date);
    
    // Informa√ß√µes b√°sicas
    message += `üí∞ *Valor:* ${amount}\n`;
    
    // Informa√ß√µes de desconto se houver
    if (originalAmount && discountAmount) {
      message += `üí≥ *Valor original:* ${originalAmount}\n`;
      message += `üéØ *Desconto:* ${discountAmount}\n`;
    }
    
    // Informa√ß√µes da loja
    if (data.store_name) {
      message += `üè™ *Loja:* ${data.store_name}\n`;
    }
    
    // Categoria e data
    message += `üìÇ *Categoria:* ${data.category}\n`;
    message += `üìÖ *Data:* ${dataFormatada}\n`;
    
    // Forma de pagamento
    if (data.payment_method) {
      message += `üí≥ *Pagamento:* ${data.payment_method}\n`;
    }
    
    // Descri√ß√£o
    message += `üìù *Descri√ß√£o:* ${data.description}\n\n`;
    
    // Documento fiscal se dispon√≠vel
    if (data.document_type && data.document_number) {
      message += `üìÑ ${data.document_type}: ${data.document_number}\n\n`;
    }
    
    message += `*Parab√©ns! Sua despesa foi salva automaticamente!* Envie mais comprovantes quando quiser.`;
    
    return message;
  }

  private formatRevenueConfirmation(data: any): string {
    const amount = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(data.amount);

    const originalAmount = data.original_amount && data.original_amount !== data.amount
      ? new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(data.original_amount)
      : null;

    const discountAmount = data.discount_amount && data.discount_amount > 0
      ? new Intl.NumberFormat('pt-BR', {
          style: 'currency',
          currency: 'BRL'
        }).format(data.discount_amount)
      : null;

      // Usar m√©todo auxiliar para formata√ß√£o de data
      const dataFormatada = this.formatDatePreservingDay(data.date);

    let message = `‚úÖ *RECEITA REGISTRADA COM SUCESSO!*\n\n`;
    message += `üí∞ *Valor:* ${amount}\n`;
    
    if (originalAmount && discountAmount) {
      message += `üìä *Valor Original:* ${originalAmount}\n`;
      message += `üéØ *Desconto:* ${discountAmount}\n`;
    }
    
    message += `üìÖ *Data:* ${dataFormatada}\n`;
    message += `üìÇ *Categoria:* ${data.category}\n`;
    message += `üìù *Descri√ß√£o:* ${data.description}\n`;
    
    if (data.payment_method) {
      message += `üí≥ *Forma de Recebimento:* ${data.payment_method}\n`;
    }
    
    if (data.payer_name) {
      message += `üè¢ *Pagador:* ${data.payer_name}\n`;
    }
    
    if (data.revenue_type) {
      const revenueTypeLabels = {
        'salary': 'Sal√°rio',
        'freelance': 'Freelance',
        'sale': 'Venda',
        'investment': 'Investimento',
        'refund': 'Reembolso',
        'transfer': 'Transfer√™ncia',
        'rent': 'Aluguel',
        'commission': 'Comiss√£o',
        'other': 'Outro'
      };
      message += `üéØ *Tipo:* ${revenueTypeLabels[data.revenue_type] || data.revenue_type}\n`;
    }
    
    if (data.source) {
      message += `üìå *Origem:* ${data.source}\n`;
    }

    message += `\nüéâ *Parab√©ns! Sua receita foi registrada automaticamente.*\n`;

    return message;
  }

  private async downloadImage(messageData: any): Promise<Buffer> {
    try {
      const imageUrl = messageData.message?.imageMessage?.url;
      
      // Primeira tentativa: usar a API de m√≠dia do WhatsApp (base64)
      try {
        return await this.downloadFromWhatsAppMedia(messageData);
      } catch (mediaError) {
        console.log('üì• Falha na API de m√≠dia (base64), tentando fallback:', mediaError.message);
      }

      // Segunda tentativa: usar o mesmo endpoint como fallback
      try {
        return await this.downloadFromMessagesAPI(messageData);
      } catch (fallbackError) {
        console.log('üì• Falha no fallback (base64), tentando download direto:', fallbackError.message);
      }

      // Terceira tentativa: download direto com headers espec√≠ficos (se tiver URL)
      if (!imageUrl) {
        throw new Error('URL da imagem n√£o encontrada para download direto');
      }

      const headers = {
        'User-Agent': 'WhatsApp/2.23.24.78 A',
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'image',
        'Sec-Fetch-Mode': 'no-cors',
        'Sec-Fetch-Site': 'cross-site',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Referer': 'https://web.whatsapp.com/',
      };
      
      // Primeira tentativa: seguir redirecionamentos
      let response;
      try {
        response = await axios.get(imageUrl, { 
          responseType: 'arraybuffer',
          headers,
          timeout: 30000,
          maxRedirects: 10,
          validateStatus: (status) => status < 400,
        });
      } catch (redirectError) {
        // Segunda tentativa: sem seguir redirecionamentos
        response = await axios.get(imageUrl, { 
          responseType: 'arraybuffer',
          headers,
          timeout: 30000,
          maxRedirects: 0,
          validateStatus: (status) => status < 400,
        });
      }

      const buffer = Buffer.from(response.data);

      // Verificar se o buffer tem conte√∫do
      if (buffer.length === 0) {
        throw new Error('Buffer vazio recebido');
      }

      // Verificar se √© realmente uma imagem
      const contentType = response.headers['content-type'];
      if (!contentType || !contentType.startsWith('image/')) {
        console.warn('‚ö†Ô∏è Content-Type n√£o √© uma imagem:', contentType);
        
        // Tentar detectar formato pelos primeiros bytes
        const firstBytes = buffer.slice(0, 8);
        console.log('üì• Primeiros bytes:', firstBytes.toString('hex'));
        
        // Verificar se √© um arquivo JPEG v√°lido
        const isJPEG = firstBytes[0] === 0xFF && firstBytes[1] === 0xD8 && firstBytes[2] === 0xFF;
        const isPNG = firstBytes[0] === 0x89 && firstBytes[1] === 0x50 && firstBytes[2] === 0x4E && firstBytes[3] === 0x47;
        const isWEBP = firstBytes.slice(0, 4).toString() === 'RIFF' && firstBytes.slice(8, 12).toString() === 'WEBP';
        
        console.log('üì• √â JPEG:', isJPEG);
        console.log('üì• √â PNG:', isPNG);
        console.log('üì• √â WEBP:', isWEBP);
        
        if (!isJPEG && !isPNG && !isWEBP) {
          console.warn('‚ö†Ô∏è Formato de imagem n√£o reconhecido pelos primeiros bytes');
          
          // Tentar converter se parecer ser uma imagem corrompida
          if (buffer.length > 1000) { // Arquivo grande o suficiente para ser uma imagem
            console.log('üì• Tentando processar como imagem potencialmente corrompida...');
          }
        }
      }

      return buffer;
    } catch (error) {
      console.error('‚ùå Erro ao baixar imagem:', error);
      
      if (error.response) {
        console.error('‚ùå Status da resposta:', error.response.status);
        console.error('‚ùå Headers da resposta:', error.response.headers);
        console.error('‚ùå URL final:', error.response.request?.res?.responseUrl);
      }
      
      throw new Error(`Falha ao baixar imagem: ${error.message}`);
    }
  }

  private async downloadFromWhatsAppMedia(messageData: any): Promise<Buffer> {
    try {
      // Usar o key.id da mensagem em vez de extrair da URL
      const messageId = messageData.key?.id;
      
      if (!messageId) {
        throw new Error('ID da mensagem n√£o encontrado');
      }
      
      console.log('üì• Message ID da mensagem:', messageId);
      
      // Construir URL da API de m√≠dia correta usando getBase64FromMediaMessage
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');
      
      // Usar o endpoint correto para obter m√≠dia em base64
      const mediaUrl = `${evolutionApiUrl}/chat/getBase64FromMediaMessage/${instanceName}`;
      
      console.log('üì• URL da API de m√≠dia (base64):', mediaUrl);
      
      // Payload correto conforme documenta√ß√£o
      const payload = {
        message: {
          key: {
            id: messageId
          }
        },
        convertToMp4: false
      };
      
      console.log('üì• Payload enviado:', JSON.stringify(payload, null, 2));
      
      const response = await axios.post(
        mediaUrl,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
          timeout: 30000,
        }
      );

      console.log('üì• Resposta da API de m√≠dia (base64), status:', response.status);
      
      if (response.data && response.data.base64) {
        console.log('üì• Base64 recebido, tamanho:', response.data.base64.length, 'caracteres');
        console.log('üì• Tipo de m√≠dia:', response.data.mediaType);
        console.log('üì• Nome do arquivo:', response.data.fileName);
        console.log('üì• Tamanho:', response.data.size);
        
        // Converter base64 para buffer
        const buffer = Buffer.from(response.data.base64, 'base64');
        console.log('üì• Buffer convertido do base64, tamanho:', buffer.length, 'bytes');
        
        return buffer;
      } else {
        console.error('‚ùå Resposta inesperada:', response.data);
        throw new Error('Base64 n√£o encontrado na resposta');
      }
    } catch (error) {
      console.error('‚ùå Erro na API de m√≠dia (base64):', error);
      
      if (error.response) {
        console.error('‚ùå Status da resposta:', error.response.status);
        console.error('‚ùå Dados da resposta:', error.response.data);
      }
      
      throw error;
    }
  }

  private async downloadFromMessagesAPI(messageData: any): Promise<Buffer> {
    try {
      // Usar o key.id da mensagem em vez de extrair da URL
      const messageId = messageData.key?.id;
      
      if (!messageId) {
        throw new Error('ID da mensagem n√£o encontrado (fallback)');
      }
      
      console.log('üì• Message ID extra√≠do (fallback):', messageId);
      
      // Construir URL da API de m√≠dia usando getBase64FromMediaMessage
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');
      
      // Usar o mesmo endpoint base64 como fallback
      const mediaUrl = `${evolutionApiUrl}/chat/getBase64FromMediaMessage/${instanceName}`;
      
      console.log('üì• URL da API de m√≠dia (fallback base64):', mediaUrl);
      
      // Payload correto conforme documenta√ß√£o
      const payload = {
        message: {
          key: {
            id: messageId
          }
        },
        convertToMp4: false
      };
      
      console.log('üì• Payload enviado (fallback):', JSON.stringify(payload, null, 2));
      
      const response = await axios.post(
        mediaUrl,
        payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
          timeout: 30000,
        }
      );

      console.log('üì• Resposta da API de m√≠dia (fallback), status:', response.status);
      
      if (response.data && response.data.base64) {
        console.log('üì• Base64 recebido (fallback), tamanho:', response.data.base64.length, 'caracteres');
        console.log('üì• Tipo de m√≠dia (fallback):', response.data.mediaType);
        console.log('üì• Nome do arquivo (fallback):', response.data.fileName);
        
        // Converter base64 para buffer
        const buffer = Buffer.from(response.data.base64, 'base64');
        console.log('üì• Buffer convertido do base64 (fallback), tamanho:', buffer.length, 'bytes');
        
        return buffer;
      } else {
        console.error('‚ùå Resposta inesperada (fallback):', response.data);
        throw new Error('Base64 n√£o encontrado na resposta (fallback)');
      }
    } catch (error) {
      console.error('‚ùå Erro na API de m√≠dia (fallback):', error);
      
      if (error.response) {
        console.error('‚ùå Status da resposta (fallback):', error.response.status);
        console.error('‚ùå Dados da resposta (fallback):', error.response.data);
      }
      
      throw error;
    }
  }

  private async downloadDirectFromUrl(url: string): Promise<Buffer> {
    try {
      console.log('üì• Baixando diretamente da URL:', url);
      
      const headers = {
        'User-Agent': 'WhatsApp/2.23.24.78 A',
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Sec-Fetch-Dest': 'image',
        'Sec-Fetch-Mode': 'no-cors',
        'Sec-Fetch-Site': 'cross-site',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache',
        'Referer': 'https://web.whatsapp.com/',
      };

      const response = await axios.get(url, { 
        responseType: 'arraybuffer',
        headers,
        timeout: 30000,
        maxRedirects: 5,
        validateStatus: (status) => status < 400,
      });

      console.log('üì• Download direto, status:', response.status);
      console.log('üì• Content-Type:', response.headers['content-type']);

      const buffer = Buffer.from(response.data);
      console.log('üì• Buffer direto criado, tamanho:', buffer.length, 'bytes');

      return buffer;
    } catch (error) {
      console.error('‚ùå Erro no download direto:', error);
      throw error;
    }
  }

  async sendMessage(phone: string, message: string): Promise<void> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');

      console.log('üì§ Enviando mensagem para:', phone);
      console.log('üì§ URL da API:', `${evolutionApiUrl}/message/sendText/${instanceName}`);
      console.log('üì§ Mensagem:', message);

      const response = await axios.post(
        `${evolutionApiUrl}/message/sendText/${instanceName}`,
        {
          number: phone,
          text: message,
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
        }
      );

      console.log('‚úÖ Mensagem enviada com sucesso:', response.data);
      this.logger.log(`Mensagem enviada para ${phone}`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar mensagem:', error);
      console.error('‚ùå Detalhes do erro:', error.response?.data);
      this.logger.error('Erro ao enviar mensagem:', error);
    }
  }

  async sendImage(phone: string, base64Image: string, caption?: string): Promise<void> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');
      const apiKey = this.configService.get('EVOLUTION_API_KEY');

      console.log('üì§ Enviando imagem para:', phone);
      console.log('üì§ URL da API:', `${evolutionApiUrl}/message/sendMedia/${instanceName}`);

      const response = await axios.post(
        `${evolutionApiUrl}/message/sendMedia/${instanceName}`,
        {
          number: phone,
          mediatype: 'image',
          mimetype: 'image/png',
          media: base64Image,
          caption: caption || '',
        },
        {
          headers: {
            'Content-Type': 'application/json',
            'apikey': apiKey,
          },
        }
      );

      console.log('‚úÖ Imagem enviada com sucesso:', response.data);
      this.logger.log(`Imagem enviada para ${phone}`);
    } catch (error) {
      console.error('‚ùå Erro ao enviar imagem:', error);
      console.error('‚ùå Detalhes do erro:', error.response?.data);
      this.logger.error('Erro ao enviar imagem:', error);
    }
  }

  private getConversationState(phone: string): ConversationState {
    const state = this.conversationStates.get(phone);
    return state || {
      isWaitingForName: false,
      isWaitingForEmail: false,
      isWaitingForConfirmation: false,
      isInUpgradeFlow: false,
      isInRegistrationFlow: false,
      upgradeStep: 'introduction',
      registrationStep: 'introduction',
    };
  }

  private setConversationState(phone: string, state: Partial<ConversationState>): void {
    const currentState = this.conversationStates.get(phone) || {
      isWaitingForName: false,
      isWaitingForEmail: false,
      isWaitingForConfirmation: false,
      isInUpgradeFlow: false,
      isInRegistrationFlow: false,
      registrationStep: 'introduction',
      upgradeStep: 'introduction'
    };
    
    this.conversationStates.set(phone, { ...currentState, ...state });
  }

  private clearConversationState(phone: string): void {
    this.conversationStates.delete(phone);
  }

  private async handleUpgradeFlow(phone: string, userId: string, userMessage: string): Promise<void> {
    try {
      console.log('üîÑ Iniciando fluxo de upgrade com contexto...');
      
      // Verificar se h√° sess√£o ativa
      const activeSession = await this.upgradeSessionsService.getActiveSession(userId);
      
      if (activeSession) {
        this.logger.log('üîÑ Sess√£o ativa encontrada, continuando...');
        await this.continueUpgradeFlowWithContext(phone, userId, userMessage, activeSession);
      } else {
        this.logger.log('üÜï Nova sess√£o de upgrade iniciada');
        await this.startNewUpgradeFlow(phone, userId, userMessage);
      }
    } catch (error) {
      this.logger.error('‚ùå Erro no fluxo de upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo de upgrade. Tente novamente.');
    }
  }

  private async startNewUpgradeFlow(phone: string, userId: string, userMessage: string): Promise<void> {
    try {
      this.logger.log('üÜï Iniciando novo fluxo de upgrade...');
      
      // Verificar se a mensagem j√° especifica um plano
      const selectedPlanName = await this.detectPlanFromMessage(userMessage);
      
      if (selectedPlanName) {
        // Usu√°rio j√° especificou o plano
        this.logger.log('üìã Plano especificado na mensagem, processando...');
        await this.processPlanSelection(phone, userId, userMessage);
      } else {
        // Perguntar sobre o plano
        this.logger.log('‚ùì Perguntando sobre plano...');
        const plans = await this.getUpgradePlans();
        
        const planOptions = plans.map(plan => {
          const discount = plan.yearly_price < (plan.monthly_price * 12) 
            ? ` (${Math.round(((plan.monthly_price * 12 - plan.yearly_price) / (plan.monthly_price * 12)) * 100)}% de desconto)`
            : '';
          
          return `${plan.name === 'Pro' ? 'üü¢' : 'üü°'} **PLANO ${plan.name.toUpperCase()} - R$ ${plan.monthly_price.toFixed(2)}/m√™s**\n‚Ä¢ ${plan.description}${discount}`;
        }).join('\n\n');

        const upgradeMessage = `üöÄ **Vamos fazer upgrade de plano!**

Escolha o plano que melhor atende suas necessidades:

${planOptions}

üí° **Recomendamos o plano anual** - Voc√™ economiza mais!

üí¨ **Digite:** "${plans.map(p => p.name).join('" ou "')}" para escolher seu plano`;

        await this.sendMessage(phone, upgradeMessage);
        
        // Criar sess√£o inicial
        const user = await this.usersService.getOrCreateUser(phone);
        await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: '',
          billing_cycle: 'monthly',
          amount: 0,
          current_step: 'plan_selection'
        });
      }
    } catch (error) {
      this.logger.error('‚ùå Erro ao iniciar fluxo de upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo de upgrade. Tente novamente.');
    }
  }

  private async continueUpgradeFlowWithContext(phone: string, userId: string, userMessage: string, session: any): Promise<void> {
    try {
      const lowerMessage = userMessage.toLowerCase();
      
      // Verificar se √© um retry
      if (lowerMessage.includes('tente novamente') || lowerMessage.includes('tentar novamente')) {
        this.logger.log('üîÑ Retry detectado, continuando com sess√£o existente...');
        await this.handleRetry(phone, userId, session);
        return;
      }
      
      // Verificar se quer cancelar
      if (lowerMessage.includes('cancelar') || lowerMessage.includes('cancel')) {
        this.logger.log('‚ùå Cancelamento detectado...');
        await this.upgradeSessionsService.cancelSession(session.id);
        await this.sendMessage(phone, '‚ùå Upgrade cancelado. Voc√™ pode iniciar novamente quando quiser.');
        this.clearConversationState(phone);
        return;
      }
      
      // Verificar se quer mudar de plano
      if (lowerMessage.includes('pro') || lowerMessage.includes('premium')) {
        this.logger.log('üîÑ Mudan√ßa de plano detectada...');
        await this.processPlanSelection(phone, userId, userMessage, session);
        return;
      }
      
      // Verificar se quer confirmar pagamento (PRIORIDADE M√ÅXIMA)
      if (lowerMessage.includes('sim') || lowerMessage.includes('quero') || 
          lowerMessage.includes('prosseguir') || lowerMessage.includes('pagar')) {
        this.logger.log('üí≥ Confirma√ß√£o de pagamento detectada...');
        const state = this.getConversationState(phone);
        if (state.selectedPlan && state.selectedFrequency) {
          await this.finalizeUpgrade(phone, userId, state);
        } else {
          await this.sendMessage(phone, '‚ùå Informa√ß√µes do plano incompletas. Digite "quero assinar" para come√ßar novamente.');
        }
        return;
      }
      
      // Verificar se est√° escolhendo frequ√™ncia
      if (lowerMessage.includes('mensal') || lowerMessage.includes('anual') || 
          lowerMessage.includes('monthly') || lowerMessage.includes('yearly') ||
          lowerMessage.includes('m√™s') || lowerMessage.includes('ano')) {
        this.logger.log('üìÖ Sele√ß√£o de frequ√™ncia detectada...');
        await this.processFrequencySelection(phone, userId, userMessage);
        return;
      }
      
      // Se chegou aqui, n√£o entendeu o comando
      await this.sendMessage(phone, '‚ùì N√£o entendi. Voc√™ pode:\n‚Ä¢ Digite "Pro" ou "Premium" para escolher plano\n‚Ä¢ Digite "mensal" ou "anual" para escolher frequ√™ncia\n‚Ä¢ Digite "cancelar" para cancelar');
      
    } catch (error) {
      console.error('‚ùå Erro ao continuar fluxo com contexto:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo. Tente novamente.');
    }
  }

  private async handleRetry(phone: string, userId: string, session: any): Promise<void> {
    try {
      const retryMessage = await this.upgradeSessionsService.getRetryMessage(session);
      await this.sendMessage(phone, retryMessage);
      
      // Atualizar passo para pix_generation
      await this.upgradeSessionsService.updateStep(session.id, 'pix_generation');
      
      // Gerar PIX novamente
      const upgradeRequest = {
        user_id: userId,
        plan_name: session.plan_name,
        billing_cycle: session.billing_cycle,
        amount: session.amount,
        payment_method: 'pix' as const,
        status: 'pending' as const
      };
      
      try {
        // TODO: Implementar pagamento via Stripe para Chat LawX
        // const pixData = await this.mercadoPagoService.createPixPayment(upgradeRequest);
        // const pixMessages = await this.mercadoPagoService.sendPixQRCode(phone, pixData, upgradeRequest);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // TODO: Implementar envio de mensagens PIX para Chat LawX
        // await this.sendMessage(phone, pixMessages.mainMessage);
        // await this.sendImage(phone, pixMessages.qrCodeImage, `QR Code PIX - R$ ${upgradeRequest.amount.toFixed(2)}`);
        // await this.sendMessage(phone, pixMessages.copyPasteCode);
        // await this.sendMessage(phone, pixMessages.copyPasteInstructions);
        
        await this.sendMessage(phone, 'üí≥ Redirecionando para pagamento via Stripe...');
        
        // Atualizar passo
        await this.upgradeSessionsService.updateStep(session.id, 'payment_pending');
        
      } catch (pixError) {
        console.error('‚ùå Erro ao gerar PIX no retry:', pixError);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // Enviar mensagem de erro com op√ß√µes de recupera√ß√£o
        const errorMessage = await this.upgradeSessionsService.getErrorRecoveryMessage(session);
        await this.sendMessage(phone, errorMessage);
      }
      
    } catch (error) {
      console.error('‚ùå Erro no retry:', error);
      await this.sendMessage(phone, '‚ùå Erro ao tentar novamente. Tente iniciar o processo novamente.');
    }
  }

  private async processPlanSelection(phone: string, userId: string, userMessage: string, existingSession?: any): Promise<void> {
    try {
      const selectedPlanName = await this.detectPlanFromMessage(userMessage);
      
      if (!selectedPlanName) {
        const plans = await this.getUpgradePlans();
        const planNames = plans.map(p => p.name).join(' ou ');
        await this.sendMessage(phone, `‚ùì Qual plano voc√™ gostaria? ${planNames}?`);
        return;
      }
      
      // Buscar dados do plano selecionado
      const selectedPlan = await this.getPlanByName(selectedPlanName);
      
      // Perguntar sobre frequ√™ncia de pagamento
      const discount = selectedPlan.yearly_price < (selectedPlan.monthly_price * 12) 
        ? ` (${Math.round(((selectedPlan.monthly_price * 12 - selectedPlan.yearly_price) / (selectedPlan.monthly_price * 12)) * 100)}% de desconto)`
        : '';
      
      const frequencyMessage = `‚úÖ **Plano selecionado: ${selectedPlan.name}**

Agora escolha a frequ√™ncia de pagamento:

üü¢ **Mensal:** R$ ${selectedPlan.monthly_price.toFixed(2)}/m√™s
üü¢ **Anual:** R$ ${selectedPlan.yearly_price.toFixed(2)}/ano${discount}

üí° **Recomendamos o plano anual** - Voc√™ economiza mais!`;

      await this.sendMessage(phone, frequencyMessage);
      await this.sendMessage(phone, 'Qual a frequ√™ncia de pagamento ideal para voc√™?');
      
      // Criar ou atualizar sess√£o com apenas o plano selecionado
      let session;
      if (existingSession) {
        session = await this.upgradeSessionsService.updateSession(existingSession.id, {
          plan_name: selectedPlan.name,
          current_step: 'plan_selection'
        });
      } else {
        const user = await this.usersService.getOrCreateUser(phone);
        session = await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: selectedPlan.name,
          billing_cycle: 'monthly', // Tempor√°rio, ser√° atualizado
          amount: 0, // Ser√° calculado quando escolher frequ√™ncia
          current_step: 'plan_selection'
        });
      }
      
      // Atualizar estado da conversa
      const state = this.getConversationState(phone);
      state.isInUpgradeFlow = true;
      state.upgradeStep = 'plan_selection';
      state.selectedPlan = selectedPlan.name;
      // N√£o definir selectedFrequency ainda
      this.setConversationState(phone, state);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar sele√ß√£o de plano:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async processFrequencySelection(phone: string, userId: string, userMessage: string): Promise<void> {
    try {
      const user = await this.usersService.findByPhone(phone);
      if (!user) {
        await this.sendMessage(phone, '‚ùå Usu√°rio n√£o encontrado.');
        return;
      }

      const lowerMessage = userMessage.toLowerCase();
      let billingCycle: 'monthly' | 'yearly' = 'monthly';
      
      // Detectar frequ√™ncia
      if (lowerMessage.includes('anual') || lowerMessage.includes('yearly') || lowerMessage.includes('ano')) {
        billingCycle = 'yearly';
      } else if (lowerMessage.includes('mensal') || lowerMessage.includes('monthly') || lowerMessage.includes('m√™s')) {
        billingCycle = 'monthly';
      } else {
        await this.sendMessage(phone, '‚ùì Escolha a frequ√™ncia: "mensal" ou "anual"?');
        return;
      }
      
      // Buscar sess√£o ativa
      const session = await this.upgradeSessionsService.getActiveSession(userId);
      if (!session) {
        await this.sendMessage(phone, '‚ùå Sess√£o n√£o encontrada. Digite "quero assinar" para come√ßar novamente.');
        return;
      }
      
      // Buscar dados do plano para calcular pre√ßo
      const plan = await this.getPlanByName(session.plan_name);
      const planPrice = billingCycle === 'monthly' ? plan.monthly_price : plan.yearly_price;
      
      // Atualizar sess√£o com frequ√™ncia e pre√ßo
      const updatedSession = await this.upgradeSessionsService.updateSession(session.id, {
        billing_cycle: billingCycle,
        amount: planPrice,
        current_step: 'payment_info'
      });
      
      // Buscar limites do plano
      const planLimits = await this.getPlanLimits(plan.name, user.jurisdiction);
      
      // Enviar confirma√ß√£o
      const confirmationMessage = `‚úÖ **Confirma√ß√£o do Pedido:**

üìã **Plano:** ${plan.name}
üí∞ **Frequ√™ncia:** ${billingCycle === 'monthly' ? 'Mensal' : 'Anual'}
üíµ **Valor:** R$ ${planPrice.toFixed(2)}

üöÄ **O que voc√™ ter√°:**
${planLimits}

üí≥ **Acima est√° todas as informa√ß√µes do seu plano**`;

      await this.sendMessage(phone, confirmationMessage);
      await this.sendMessage(phone, 'Posso gerar seu pagamento? Ah! no momento n√£o temos suporte a cart√£o de cr√©dito, mas aceitamos PIX.');
      
      // Atualizar estado da conversa
      const state = this.getConversationState(phone);
      state.isInUpgradeFlow = true;
      state.upgradeStep = 'payment_info';
      state.selectedPlan = session.plan_name;
      state.selectedFrequency = billingCycle;
      this.setConversationState(phone, state);
      
    } catch (error) {
      console.error('‚ùå Erro ao processar sele√ß√£o de frequ√™ncia:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async finalizeUpgrade(phone: string, userId: string, state: ConversationState): Promise<void> {
    try {
      // Buscar dados do plano para calcular pre√ßo
      const plan = await this.getPlanByName(state.selectedPlan);
      const planPrice = state.selectedFrequency === 'monthly' ? plan.monthly_price : plan.yearly_price;
      
      const response = `üéâ **Excelente decis√£o! Vamos te ajudar na sua organiza√ß√£o financeira!**

‚úÖ **Resumo do Pedido:**
‚Ä¢ Plano: ${state.selectedPlan}
‚Ä¢ Frequ√™ncia: ${state.selectedFrequency === 'monthly' ? 'Mensal' : 'Anual'}
‚Ä¢ Valor: R$ ${planPrice.toFixed(2)}

‚è≥ **Gerando PIX...**
Aguarde um momento enquanto preparamos seu pagamento... ‚è≥`;
      
      await this.sendMessage(phone, response);
      
      // Buscar ou criar sess√£o
      let session = await this.upgradeSessionsService.getActiveSession(userId);
      
      if (!session) {
        // Criar nova sess√£o
        session = await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: state.selectedPlan,
          billing_cycle: state.selectedFrequency,
          amount: planPrice,
          current_step: 'payment_processing'
        });
      } else {
        // Atualizar sess√£o existente
        session = await this.upgradeSessionsService.updateSession(session.id, {
          plan_name: state.selectedPlan,
          billing_cycle: state.selectedFrequency,
          amount: planPrice,
          current_step: 'payment_processing'
        });
      }
      
      // Gerar JSON para requisi√ß√£o
      const upgradeRequest = {
        user_id: userId,
        plan_name: state.selectedPlan,
        billing_cycle: state.selectedFrequency,
        amount: planPrice,
        payment_method: 'pix' as const,
        status: 'pending' as const
      };
      
      console.log('üìã JSON para requisi√ß√£o:', JSON.stringify(upgradeRequest, null, 2));
      
      // Gerar PIX via Mercado Pago
      try {
        // TODO: Implementar pagamento via Stripe para Chat LawX
        // const pixData = await this.mercadoPagoService.createPixPayment(upgradeRequest);
        // const pixMessages = await this.mercadoPagoService.sendPixQRCode(phone, pixData, upgradeRequest);
        
        // TODO: Implementar envio de mensagens PIX para Chat LawX
        // await this.sendMessage(phone, pixMessages.mainMessage);
        // await this.sendImage(phone, pixMessages.qrCodeImage, `QR Code PIX - R$ ${upgradeRequest.amount.toFixed(2)}`);
        // await this.sendMessage(phone, pixMessages.copyPasteCode);
        // await this.sendMessage(phone, pixMessages.copyPasteInstructions);
        
        await this.sendMessage(phone, 'üí≥ Redirecionando para pagamento via Stripe...');
        
        // Atualizar sess√£o para payment_pending
        await this.upgradeSessionsService.updateStep(session.id, 'payment_pending');
        
      } catch (pixError) {
        console.error('‚ùå Erro ao gerar PIX:', pixError);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // Enviar mensagem de erro com op√ß√µes de recupera√ß√£o
        const errorMessage = await this.upgradeSessionsService.getErrorRecoveryMessage(session);
        await this.sendMessage(phone, errorMessage);
      }
      
      // Limpar estado da conversa
      this.clearConversationState(phone);
      
    } catch (error) {
      console.error('‚ùå Erro ao finalizar upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar upgrade. Tente novamente.');
    }
  }

  private async handleAudioMessage(message: any, user: User, phone: string): Promise<void> {
    try {
      this.logger.log('üéµ Processando mensagem de √°udio...');

      this.logger.log('üéµ Mensagem de √°udio:', JSON.stringify(message, null, 2));
      
      // Enviar mensagem de processamento
      await this.sendMessage(phone, 'üéµ Processando seu √°udio... Aguarde um momento.');
      
      // Processar √°udio base64
      const audioBuffer = await this.processAudioBase64(message);
      if (!audioBuffer) {
        await this.sendMessage(phone, '‚ùå N√£o consegui processar o √°udio. Tente novamente.');
        return;
      }

      // Upload do √°udio para Supabase Storage
      const audioUrl = await this.uploadService.uploadAudioFile(audioBuffer, 'audio.mp3');
      
      // Processar √°udio para extrair dados financeiros
      const extractedData = await this.aiService.processAudioForFinancialEntry(audioBuffer);
      
      // Verificar limites baseado na classifica√ß√£o
      if (extractedData.document_classification === 'revenue') {
        // Verificar limite de receitas
        const revenueLimits = await this.usageService.checkLimits(user.id, 'consultation');
        if (!revenueLimits.allowed) {
          await this.sendMessage(phone, revenueLimits.message);
          return;
        }
        await this.handleRevenueAudio(extractedData, user, phone, audioUrl);
      } else {
        // Verificar limite de despesas
        const expenseLimits = await this.usageService.checkLimits(user.id, 'consultation');
        if (!expenseLimits.allowed) {
          await this.sendMessage(phone, expenseLimits.message);
          return;
        }
        await this.handleExpenseAudio(extractedData, user, phone, audioUrl);
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar √°udio:', error);
      
      // Verificar se √© erro de valida√ß√£o espec√≠fico
      if (error.message.includes('√Åudio n√£o cont√©m lan√ßamento financeiro:')) {
        await this.sendMessage(phone, `‚ùå ${error.message}\n\nüéµ **Envie um √°udio v√°lido:**\n‚Ä¢ "Aluguel 2000"\n‚Ä¢ "Supermercado 150"\n‚Ä¢ "Sal√°rio 5000"\n‚Ä¢ "Freelance 800"\n\nFale claramente o valor e a descri√ß√£o do lan√ßamento.`);
        return;
      }
      
      // Verificar se √© erro de formato de √°udio
      if (error.message.includes('Invalid file format') || error.message.includes('formato')) {
        await this.sendMessage(phone, `‚ùå **Problema com o formato do √°udio**\n\nüéµ **Solu√ß√£o:**\n‚Ä¢ Envie um √°udio mais curto (m√°ximo 30 segundos)\n‚Ä¢ Fale mais claramente\n‚Ä¢ Evite ru√≠dos de fundo\n‚Ä¢ Tente novamente em alguns segundos\n\n**Exemplo:** "Aluguel 2000"`);
        return;
      }
      
      // Verificar se √© erro de transcri√ß√£o
      if (error.message.includes('transcri√ß√£o') || error.message.includes('transcription')) {
        await this.sendMessage(phone, `‚ùå **Erro na transcri√ß√£o do √°udio**\n\nüéµ **Dicas:**\n‚Ä¢ Fale mais devagar e claramente\n‚Ä¢ Evite ru√≠dos de fundo\n‚Ä¢ Use frases simples como "Aluguel 2000"\n‚Ä¢ Tente novamente`);
        return;
      }
      
      await this.sendMessage(phone, '‚ùå Erro ao processar o √°udio. Tente novamente ou fale mais claramente.');
    }
  }

  /**
   * Processa √°udio em base64 e converte para buffer
   */
  private async processAudioBase64(message: any): Promise<Buffer | null> {
    try {
      this.logger.log('üéµ Processando √°udio base64...');
      
      // Log da estrutura completa da mensagem para debug
      this.logger.log('üîç Estrutura da mensagem:', JSON.stringify(message, null, 2));
      
      const audioMessage = message.message?.audioMessage;
      if (!audioMessage) {
        this.logger.error('‚ùå Mensagem de √°udio n√£o encontrada');
        return null;
      }

      // Verificar se temos base64 na mensagem (n√≠vel da mensagem, n√£o dentro de audioMessage)
      if (message.base64) {
        this.logger.log('‚úÖ Base64 encontrado na mensagem');
        const buffer = Buffer.from(message.base64, 'base64');
        
        if (buffer.length === 0) {
          this.logger.error('‚ùå Buffer vazio ap√≥s convers√£o base64');
          return null;
        }

        this.logger.log('‚úÖ √Åudio convertido de base64:', buffer.length, 'bytes');
        
        // Verificar os primeiros bytes para debug
        const firstBytes = buffer.slice(0, 16);
        this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
        
        // Converter para MP3 para melhor compatibilidade
        try {
          const mp3Buffer = await this.uploadService.convertAudioToMp3(buffer);
          this.logger.log('‚úÖ √Åudio convertido para MP3:', mp3Buffer.length, 'bytes');
          return mp3Buffer;
        } catch (conversionError) {
          this.logger.warn('‚ö†Ô∏è Falha na convers√£o para MP3, tentando convers√£o simples:', conversionError.message);
          try {
            const simpleBuffer = await this.uploadService.convertAudioSimple(buffer);
            this.logger.log('‚úÖ Convers√£o simples conclu√≠da:', simpleBuffer.length, 'bytes');
            return simpleBuffer;
          } catch (simpleError) {
            this.logger.warn('‚ö†Ô∏è Falha na convers√£o simples, usando buffer original:', simpleError.message);
            return buffer;
          }
        }
      } else {
        this.logger.log('‚ö†Ô∏è Base64 n√£o encontrado no n√≠vel da mensagem');
        this.logger.log('üîç Verificando se base64 est√° em message.base64...');
        
        // Verificar se base64 est√° em message.message.base64
        if (message.message?.base64) {
          this.logger.log('‚úÖ Base64 encontrado em message.message.base64');
          const buffer = Buffer.from(message.message.base64, 'base64');
          
          if (buffer.length === 0) {
            this.logger.error('‚ùå Buffer vazio ap√≥s convers√£o base64');
            return null;
          }

          this.logger.log('‚úÖ √Åudio convertido de base64:', buffer.length, 'bytes');
          
          // Verificar os primeiros bytes para debug
          const firstBytes = buffer.slice(0, 16);
          this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
          
          // Converter para MP3 para melhor compatibilidade
          try {
            const mp3Buffer = await this.uploadService.convertAudioToMp3(buffer);
            this.logger.log('‚úÖ √Åudio convertido para MP3:', mp3Buffer.length, 'bytes');
            return mp3Buffer;
          } catch (conversionError) {
            this.logger.warn('‚ö†Ô∏è Falha na convers√£o para MP3, tentando convers√£o simples:', conversionError.message);
            try {
              const simpleBuffer = await this.uploadService.convertAudioSimple(buffer);
              this.logger.log('‚úÖ Convers√£o simples conclu√≠da:', simpleBuffer.length, 'bytes');
              return simpleBuffer;
            } catch (simpleError) {
              this.logger.warn('‚ö†Ô∏è Falha na convers√£o simples, usando buffer original:', simpleError.message);
              return buffer;
            }
          }
        }
      }

      // Fallback: tentar download se n√£o houver base64
      this.logger.log('‚ö†Ô∏è Base64 n√£o encontrado, tentando download...');
      return await this.downloadAudio(message);

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar √°udio base64:', error);
      return null;
    }
  }

  private async handleRevenueAudio(extractedData: any, user: User, phone: string, audioUrl: string): Promise<void> {
    try {
      // Criar receita
      const revenueData = {
        user_id: user.id,
        amount: extractedData.amount,
        original_amount: extractedData.original_amount,
        discount_amount: extractedData.discount_amount,
        category: extractedData.category,
        date: extractedData.date,
        image_url: audioUrl, // Usar URL do √°udio
        description: extractedData.description,
        payment_method: extractedData.payment_method,
        payer_name: extractedData.payer_name,
        payer_cnpj: extractedData.payer_cnpj,
        payer_address: extractedData.payer_address,
        document_type: extractedData.document_type,
        document_number: extractedData.document_number,
        revenue_type: extractedData.revenue_type,
        source: extractedData.source,
      };

      // TODO: Implementar cria√ß√£o de receita para Chat LawX
      // const revenue = await this.revenuesService.create(revenueData);
      
      // Incrementar contador de uso
      await this.usageService.incrementUsage(user.id, 'consultation');
      
      // Enviar confirma√ß√£o
      // TODO: Implementar confirma√ß√£o de receita para Chat LawX
      // const confirmationMessage = this.formatRevenueConfirmation(revenue);
      const confirmationMessage = '‚úÖ Consulta jur√≠dica registrada com sucesso!';
      await this.sendMessage(phone, confirmationMessage);
      
      this.logger.log(`‚úÖ Receita criada via √°udio para usu√°rio ${user.id}`);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar receita via √°udio:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar a receita. Tente novamente.');
    }
  }

  private async handleExpenseAudio(extractedData: any, user: User, phone: string, audioUrl: string): Promise<void> {
    try {
      this.logger.log('üí∞ Iniciando processamento de despesa via √°udio...');
      this.logger.log('üí∞ Dados extra√≠dos:', JSON.stringify(extractedData, null, 2));
      this.logger.log('üí∞ URL do √°udio:', audioUrl);
      this.logger.log('üí∞ ID do usu√°rio:', user.id);

      // Criar despesa
      const expenseData = {
        user_id: user.id,
        amount: extractedData.amount,
        original_amount: extractedData.original_amount,
        discount_amount: extractedData.discount_amount,
        category: extractedData.category,
        date: extractedData.date,
        image_url: audioUrl, // Usar URL do √°udio
        description: extractedData.description,
        payment_method: extractedData.payment_method,
        store_name: extractedData.store_name,
        store_cnpj: extractedData.store_cnpj,
        store_address: extractedData.store_address,
        document_type: extractedData.document_type,
        document_number: extractedData.document_number,
      };

      this.logger.log('üí∞ Dados da despesa a serem criados:', JSON.stringify(expenseData, null, 2));

      // TODO: Implementar cria√ß√£o de despesa para Chat LawX
      // const expense = await this.expensesService.create(expenseData);
      this.logger.log('üí∞ Consulta jur√≠dica criada com sucesso');
      
      // Incrementar contador de uso
      await this.usageService.incrementUsage(user.id, 'consultation');
      this.logger.log('üí∞ Contador de uso incrementado');
      
      // Enviar confirma√ß√£o
      // TODO: Implementar confirma√ß√£o de despesa para Chat LawX
      // const confirmationMessage = this.formatExpenseConfirmation(expense);
      const confirmationMessage = '‚úÖ Consulta jur√≠dica registrada com sucesso!';
      await this.sendMessage(phone, confirmationMessage);
      
      this.logger.log(`‚úÖ Despesa criada via √°udio para usu√°rio ${user.id}`);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar despesa via √°udio:', error);
      this.logger.error('‚ùå Stack trace:', error.stack);
      await this.sendMessage(phone, '‚ùå Erro ao processar a despesa. Tente novamente.');
    }
  }

  private async downloadAudio(messageData: any): Promise<Buffer> {
    try {
      this.logger.log('üéµ Iniciando download de √°udio...');
      
      const audioMessage = messageData.message?.audioMessage;
      if (!audioMessage) {
        throw new Error('Mensagem de √°udio n√£o encontrada');
      }

      this.logger.log('üéµ Dados do √°udio:', JSON.stringify(audioMessage, null, 2));

      // M√©todo 1: Download via Evolution API Media Download (RECOMENDADO)
      if (audioMessage.url) {
        this.logger.log('üéµ Tentando download via Evolution API Media Download...');
        const audioBuffer = await this.downloadFromEvolutionMediaAPI(audioMessage);
        if (audioBuffer) {
          return audioBuffer;
        }
      }

      // M√©todo 2: Download via URL direta (fallback)
      if (audioMessage.url) {
        this.logger.log('üéµ Tentando download direto da URL...');
        const audioBuffer = await this.downloadDirectFromUrl(audioMessage.url);
        if (audioBuffer) {
          return audioBuffer;
        }
      }

      throw new Error('N√£o foi poss√≠vel baixar o √°udio');

    } catch (error) {
      this.logger.error('‚ùå Erro ao baixar √°udio:', error);
      throw error;
    }
  }

  private async downloadFromEvolutionMediaAPI(audioMessage: any): Promise<Buffer | null> {
    try {
      const evolutionApiUrl = this.configService.get('EVOLUTION_API_URL');
      const evolutionApiKey = this.configService.get('EVOLUTION_API_KEY');
      const instanceName = this.configService.get('EVOLUTION_INSTANCE_NAME');

      // Extrair o ID da mensagem da URL
      const urlMatch = audioMessage.url.match(/\/([^\/]+)\.enc/);
      if (!urlMatch) {
        this.logger.warn('‚ö†Ô∏è N√£o foi poss√≠vel extrair ID da mensagem da URL');
        return null;
      }

      const messageId = urlMatch[1];
      this.logger.log('üéµ ID da mensagem extra√≠do:', messageId);

      // M√©todo 1: Tentar usar a API de download de m√≠dia do Evolution API
      try {
        const response = await fetch(`${evolutionApiUrl}/chat/getBase64FromMediaMessage/${instanceName}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': evolutionApiKey,
          },
          body: JSON.stringify({
            messageId: messageId,
            remoteJid: audioMessage.remoteJid || '554892060485@s.whatsapp.net'
          }),
        });

        if (response.ok) {
          const result = await response.json();
          
          if (result.base64) {
            this.logger.log('‚úÖ √Åudio baixado via Evolution API Media Download');
            const buffer = Buffer.from(result.base64, 'base64');
            
            // Verificar se o buffer √© v√°lido
            if (buffer.length === 0) {
              throw new Error('Arquivo de √°udio vazio');
            }

            this.logger.log('‚úÖ √Åudio baixado com sucesso:', buffer.length, 'bytes');
            
            // Verificar os primeiros bytes para debug
            const firstBytes = buffer.slice(0, 16);
            this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
            
            return buffer;
          }
        }
      } catch (apiError) {
        this.logger.warn('‚ö†Ô∏è API getBase64FromMediaMessage n√£o dispon√≠vel, tentando m√©todo alternativo...');
      }

      // M√©todo 2: Tentar usar a API de download direto
      try {
        const response = await fetch(`${evolutionApiUrl}/chat/downloadMedia/${instanceName}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'apikey': evolutionApiKey,
          },
          body: JSON.stringify({
            url: audioMessage.url,
            mimetype: audioMessage.mimetype,
            mediaKey: audioMessage.mediaKey,
            fileEncSha256: audioMessage.fileEncSha256,
            fileSha256: audioMessage.fileSha256,
            fileLength: audioMessage.fileLength,
            seconds: audioMessage.seconds,
            ptt: audioMessage.ptt,
            directPath: audioMessage.directPath,
            mediaKeyTimestamp: audioMessage.mediaKeyTimestamp,
            streamingSidecar: audioMessage.streamingSidecar,
            waveform: audioMessage.waveform
          }),
        });

        if (response.ok) {
          const buffer = await response.arrayBuffer();
          const nodeBuffer = Buffer.from(buffer);
          
          if (nodeBuffer.length > 0) {
            this.logger.log('‚úÖ √Åudio baixado via Evolution API Download Media');
            this.logger.log('‚úÖ √Åudio baixado com sucesso:', nodeBuffer.length, 'bytes');
            
            // Verificar os primeiros bytes para debug
            const firstBytes = nodeBuffer.slice(0, 16);
            this.logger.log('üîç Primeiros bytes do arquivo:', firstBytes.toString('hex'));
            
            return nodeBuffer;
          }
        }
      } catch (downloadError) {
        this.logger.warn('‚ö†Ô∏è API downloadMedia n√£o dispon√≠vel:', downloadError.message);
      }

      return null;

    } catch (error) {
      this.logger.error('‚ùå Erro no download via Evolution API Media Download:', error);
      return null;
    }
  }

  private async processUpgradeFlowWithAI(phone: string, userId: string, userMessage: string, session: any, state: ConversationState): Promise<void> {
    try {
      this.logger.log('üß† Processando fluxo de upgrade com IA...');
      this.logger.log('üìã Sess√£o:', session);
      this.logger.log('üìã Estado:', state);

      // Construir contexto para an√°lise
      const context = {
        currentStep: session?.current_step || state.upgradeStep,
        selectedPlan: session?.plan_name || state.selectedPlan,
        selectedFrequency: session?.billing_cycle || state.selectedFrequency,
        amount: session?.amount || 0,
        sessionId: session?.id
      };

      // Usar IA para analisar a inten√ß√£o no contexto
      const aiAnalysis = await this.aiService.analyzeUpgradeIntent(userMessage, context);
      
      this.logger.log('ü§ñ An√°lise da IA:', aiAnalysis);

      // Processar baseado na inten√ß√£o detectada
      switch (aiAnalysis.intent) {
        case 'payment_confirmation':
          await this.handlePaymentConfirmation(phone, userId, context);
          break;
          
        case 'frequency_selection':
          await this.handleFrequencySelectionWithAI(phone, userId, userMessage, context);
          break;
          
        case 'plan_selection':
          await this.handlePlanSelectionWithAI(phone, userId, userMessage, context);
          break;
          
        case 'cancel_upgrade':
          await this.handleCancelUpgrade(phone, userId, session);
          break;
          
        case 'continue_upgrade':
          await this.handleContinueUpgrade(phone, userId, userMessage, context);
          break;
          
        default:
          await this.handleContinueUpgrade(phone, userId, userMessage, context);
          break;
      }

    } catch (error) {
      this.logger.error('‚ùå Erro ao processar fluxo de upgrade com IA:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo. Tente novamente.');
    }
  }

  private async handlePaymentConfirmation(phone: string, userId: string, context: any): Promise<void> {
    try {
      this.logger.log('üí≥ Processando confirma√ß√£o de pagamento...');
      
      // Verificar se temos todas as informa√ß√µes necess√°rias
      if (!context.selectedPlan || !context.selectedFrequency) {
        await this.sendMessage(phone, '‚ùå Informa√ß√µes do plano incompletas. Digite "quero assinar" para come√ßar novamente.');
        return;
      }

      // Buscar dados do plano para calcular pre√ßo
      const plan = await this.getPlanByName(context.selectedPlan);
      const planPrice = context.selectedFrequency === 'monthly' ? plan.monthly_price : plan.yearly_price;
      
      const response = `üéâ **Excelente decis√£o! Vamos te ajudar na sua organiza√ß√£o financeira!**

‚úÖ **Resumo do Pedido:**
‚Ä¢ Plano: ${context.selectedPlan}
‚Ä¢ Frequ√™ncia: ${context.selectedFrequency === 'monthly' ? 'Mensal' : 'Anual'}
‚Ä¢ Valor: R$ ${planPrice.toFixed(2)}

‚è≥ **Gerando PIX...**
Aguarde um momento enquanto preparamos seu pagamento... ‚è≥`;
      
      await this.sendMessage(phone, response);
      
      // Buscar ou criar sess√£o
      let session = await this.upgradeSessionsService.getActiveSession(userId);
      
      if (!session) {
        // Criar nova sess√£o
        session = await this.upgradeSessionsService.createSession({
          user_id: userId,
          phone: phone,
          plan_name: context.selectedPlan,
          billing_cycle: context.selectedFrequency as 'monthly' | 'yearly',
          amount: planPrice,
          current_step: 'payment_processing'
        });
      } else {
        // Atualizar sess√£o existente
        session = await this.upgradeSessionsService.updateSession(session.id, {
          plan_name: context.selectedPlan,
          billing_cycle: context.selectedFrequency as 'monthly' | 'yearly',
          amount: planPrice,
          current_step: 'payment_processing'
        });
      }
      
      // Gerar PIX
      await this.generatePixPayment(phone, userId, context.selectedPlan, context.selectedFrequency, planPrice, session);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar confirma√ß√£o de pagamento:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar pagamento. Tente novamente.');
    }
  }

  private async handleFrequencySelectionWithAI(phone: string, userId: string, userMessage: string, context: any): Promise<void> {
    try {
      this.logger.log('üìÖ Processando sele√ß√£o de frequ√™ncia com IA...');
      
      // Usar IA para detectar frequ√™ncia
      const frequencyAnalysis = await this.aiService.detectFrequencySelection(userMessage);
      
      if (frequencyAnalysis.frequency) {
        await this.processFrequencySelection(phone, userId, userMessage);
      } else {
        await this.sendMessage(phone, '‚ùì Escolha a frequ√™ncia: "mensal" ou "anual"?');
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar sele√ß√£o de frequ√™ncia:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async handlePlanSelectionWithAI(phone: string, userId: string, userMessage: string, context: any): Promise<void> {
    try {
      this.logger.log('üìã Processando sele√ß√£o de plano com IA...');
      
      // Usar IA para detectar plano
      const planAnalysis = await this.aiService.detectPlanFromMessage(userMessage);
      
      if (planAnalysis.planName) {
        await this.processPlanSelection(phone, userId, userMessage);
      } else {
        const plans = await this.getUpgradePlans();
        const planNames = plans.map(p => p.name).join(' ou ');
        await this.sendMessage(phone, `‚ùì Qual plano voc√™ gostaria? ${planNames}?`);
      }
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar sele√ß√£o de plano:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar sele√ß√£o. Tente novamente.');
    }
  }

  private async handleCancelUpgrade(phone: string, userId: string, session: any): Promise<void> {
    try {
      this.logger.log('‚ùå Processando cancelamento de upgrade...');
      
      if (session) {
        await this.upgradeSessionsService.cancelSession(session.id);
      }
      
      this.clearConversationState(phone);
      await this.sendMessage(phone, '‚ùå Upgrade cancelado. Voc√™ pode iniciar novamente quando quiser.');
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar cancelamento:', error);
      await this.sendMessage(phone, '‚ùå Erro ao cancelar. Tente novamente.');
    }
  }

  private async handleContinueUpgrade(phone: string, userId: string, userMessage: string, context: any): Promise<void> {
    try {
      this.logger.log('üîÑ Continuando fluxo de upgrade...');
      
      // Gerar resposta contextual baseada no estado atual
      const response = await this.aiService.generateUpgradeResponse(userMessage, context);
      await this.sendMessage(phone, response);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao continuar upgrade:', error);
      await this.sendMessage(phone, '‚ùå Erro no processo. Tente novamente.');
    }
  }

  private async generatePixPayment(phone: string, userId: string, planName: string, frequency: string, amount: number, session: any): Promise<void> {
    try {
      // Gerar JSON para requisi√ß√£o
      const upgradeRequest = {
        user_id: userId,
        plan_name: planName,
        billing_cycle: frequency as 'monthly' | 'yearly',
        amount: amount,
        payment_method: 'pix' as const,
        status: 'pending' as const
      };
      
      this.logger.log('üìã JSON para requisi√ß√£o:', JSON.stringify(upgradeRequest, null, 2));
      
      // Gerar PIX via Mercado Pago
      try {
        // TODO: Implementar pagamento via Stripe para Chat LawX
        // const pixData = await this.mercadoPagoService.createPixPayment(upgradeRequest);
        // const pixMessages = await this.mercadoPagoService.sendPixQRCode(phone, pixData, upgradeRequest);
        
        // TODO: Implementar envio de mensagens PIX para Chat LawX
        // await this.sendMessage(phone, pixMessages.mainMessage);
        // await this.sendImage(phone, pixMessages.qrCodeImage, `QR Code PIX - R$ ${upgradeRequest.amount.toFixed(2)}`);
        // await this.sendMessage(phone, pixMessages.copyPasteCode);
        // await this.sendMessage(phone, pixMessages.copyPasteInstructions);
        
        await this.sendMessage(phone, 'üí≥ Redirecionando para pagamento via Stripe...');
        
        // Atualizar sess√£o para payment_pending
        await this.upgradeSessionsService.updateStep(session.id, 'payment_pending');
        
      } catch (pixError) {
        this.logger.error('‚ùå Erro ao gerar PIX:', pixError);
        
        // Incrementar tentativas
        await this.upgradeSessionsService.incrementAttempts(session.id);
        
        // Enviar mensagem de erro com op√ß√µes de recupera√ß√£o
        const errorMessage = await this.upgradeSessionsService.getErrorRecoveryMessage(session);
        await this.sendMessage(phone, errorMessage);
      }
      
      // Limpar estado da conversa
      this.clearConversationState(phone);
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao gerar PIX:', error);
      await this.sendMessage(phone, '‚ùå Erro ao processar pagamento. Tente novamente.');
    }
  }
} 